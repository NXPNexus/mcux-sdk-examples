<?xml version="1.0" encoding="UTF-8"?>
<ksdk:manifest xmlns:ksdk="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SDK_2.x_LPCXpresso860MAX_manifest_v3_14" name="SDK Version Superset" brief="SDK Superset" format_version="3.14" api_version="2.0.0" configuration="37bbf4eb706f3814bfad8f3a27525c83" xsi:schemaLocation="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd http://nxp.com/mcuxpresso/sdk/sdk_manifest_v3.14.xsd">

  <ksdk id="MCUXpressoSDK216000" name="MCUXpresso SDK216000" version="2.16.000" revision="2.16.000"/>
  <compilers>
    <compiler id="compiler_gcc" name="gcc" type="gcc"/>
  </compilers>
  <toolchainSettings>
    <toolchainSetting id="com.nxp.mcuxpresso" name="mcuxpresso" version="11.10.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" toolchain="mcuxpresso">
      <option id="gnu.cpp.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.c.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.cpp.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.cpp.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="gnu.c.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
    </toolchainSetting>
  </toolchainSettings>
  <toolchains>
    <toolchain id="armgcc" name="GCC_ARM_Embedded_13-2023.10" version="13.2.1" full_name="GCC ARM Embedded 13-2023.10" compiler="compiler_gcc" type="armgcc" vendor="GCC ARM Embedded" vendor_url="https://developer.arm.com/downloads/-/arm-gnu-toolchain-downloads"/>
    <toolchain id="mcuxpresso" name="MCUXpresso_IDE" version="11.10.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" type="mcuxpresso" vendor="NXP Semiconductors" vendor_url="http://www.nxp.com">
      <debug>
        <debug_configuration id="com.crt.advproject.config.exe.release" name="Release Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.release.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.release.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.crt.advproject.config.exe.debug" name="Debug Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.debug.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.debug.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.debug" name="Debug Configuration" probe="Segger"/>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.release" name="Release Configuration" probe="Segger"/>
      </debug>
    </toolchain>
  </toolchains>
  <boards>
    <board id="lpcxpresso860max" name="LPCXpresso860MAX" version="1.0.0" package="LPC865M201JBD64">
      <description>LPCXpresso Development Board for the LPC86x family of MCUs</description>
      <image path="core/boards/lpcxpresso860max" type="image">
        <files mask="lpcxpresso860max.png"/>
      </image>
      <examples>
        <example id="lpcxpresso860max_crc" name="crc" brief="The CRC Example project is a demonstration program that uses the KSDK software to generate checksumsfor an ASCII string. Several CRC protocols are implemented using the CRC driver API." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/crc" path="examples/lpcxpresso860max/driver_examples/crc">
          <external path="examples/lpcxpresso860max/driver_examples/crc" type="xml">
            <files mask="crc_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_hello_world" name="hello_world" brief="The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers and repeat what user input. The purpose of this demo is to show how to use the UART, and to provide a simple project for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/lpcxpresso860max/demo_apps/hello_world">
          <external path="examples/lpcxpresso860max/demo_apps/hello_world" type="xml">
            <files mask="hello_world_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_power_mode_switch_lpc" name="power_mode_switch_lpc" brief="The power_mode_switch application shows the usage of normal power mode control APIs for entering the three kinds oflow power mode: Sleep mode, Deep Sleep mode and Power Down mode, deep power down mode. When the application runs to each low powermode, the device would cut off the power for specific modules to save energy. The device can be also waken up by prepared wakeup source from external event. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware. - In order to meet typedef power consumption of DateSheet manual, Please configure MCU under the following conditions.     鈥? Configure all pins as GPIO with pull-up resistor disabled in the IOCON block.     鈥? Configure GPIO pins as outputs using the GPIO DIR register.     鈥?Write 1 to the GPIO CLR register to drive the outputs LOW.     鈥?All peripherals disabled." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/lpcxpresso860max/demo_apps/power_mode_switch_lpc">
          <external path="examples/lpcxpresso860max/demo_apps/power_mode_switch_lpc" type="xml">
            <files mask="power_mode_switch_lpc_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_gpio_led_output" name="gpio_led_output" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs. The example use LEDs and buttons to demonstrates GPIO API for port and pin manipulation (init, set,clear, and toggle)." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/gpio" path="examples/lpcxpresso860max/driver_examples/gpio/led_output">
          <external path="examples/lpcxpresso860max/driver_examples/gpio/led_output" type="xml">
            <files mask="gpio_led_output_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_ftm_pwm_twochannel" name="ftm_pwm_twochannel" brief="The FTM pwm two channel Example project is a demonstration program that uses the KSDK software to generate a square pulse PWM on 2 channel to control the LED brightness.- FTM generates a PWM with the increasing and decreasing duty cycle.- LED brightness is increasing and then dimming. This is a continuous process." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="examples/lpcxpresso860max/driver_examples/ftm/pwm_twochannel">
          <external path="examples/lpcxpresso860max/driver_examples/ftm/pwm_twochannel" type="xml">
            <files mask="ftm_pwm_twochannel_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_ftm_simple_pwm" name="ftm_simple_pwm" brief="The FTM project is a simple demonstration program of the SDK FTM driver. It sets up the FTMhardware block to output a center-aligned PWM signal. The PWM dutycycle is periodically updated.On boards that have an LED connected to the FTM pins, the user will see a change in LED brightness." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="examples/lpcxpresso860max/driver_examples/ftm/simple_pwm">
          <external path="examples/lpcxpresso860max/driver_examples/ftm/simple_pwm" type="xml">
            <files mask="ftm_simple_pwm_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_ftm_timer" name="ftm_timer" brief="The FTM project is a simple demonstration program of the SDK FTM driver to use FTM as a timer.It sets up the FTM hardware block to trigger an interrupt every 1 millisecond.When the FTM interrupt is triggered a message a printed on the UART terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="examples/lpcxpresso860max/driver_examples/ftm/timer">
          <external path="examples/lpcxpresso860max/driver_examples/ftm/timer" type="xml">
            <files mask="ftm_timer_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_ftm_combine_pwm" name="ftm_combine_pwm" brief="The FTM project is a demonstration program of generating a combined PWM signal by the SDK FTM driver. It sets up the FTMhardware block to output PWM signals on two TPM channels. The example also shows the complementary mode of operationand deadtime insertion.On boards that have 2 LEDs connected to the FTM pins, the user will see a change in LED brightness.And if the board do not support LEDs to show, the outputs can be observed by oscilloscope." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="examples/lpcxpresso860max/driver_examples/ftm/combine_pwm">
          <external path="examples/lpcxpresso860max/driver_examples/ftm/combine_pwm" type="xml">
            <files mask="ftm_combine_pwm_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_ftm_dual_edge_capture" name="ftm_dual_edge_capture" brief="The FTM project is a demonstration program of the SDK FTM driver's dual-edge capture feature.This feature is available only on certain SoC's.The example sets up a FTM channel-pair for dual-edge capture. Once the input signal is received,this example will print the capture values and period of the input signal on the terminal window." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="examples/lpcxpresso860max/driver_examples/ftm/dual_edge_capture">
          <external path="examples/lpcxpresso860max/driver_examples/ftm/dual_edge_capture" type="xml">
            <files mask="ftm_dual_edge_capture_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_ftm_output_compare" name="ftm_output_compare" brief="The FTM project is a demonstration program of the SDK FTM driver's output compare feature.It sets up one FTM channel to toggle the output when a match occurs with the channel value. The usershould probe the FTM output with a oscilloscope to see the signal toggling." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="examples/lpcxpresso860max/driver_examples/ftm/output_compare">
          <external path="examples/lpcxpresso860max/driver_examples/ftm/output_compare" type="xml">
            <files mask="ftm_output_compare_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_ftm_input_capture" name="ftm_input_capture" brief="The FTM project is a demonstration program of the SDK FTM driver's input capture feature.The example sets up a FTM channel for dual-edge capture. Once the input signal is received,this example will print the capture value." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="examples/lpcxpresso860max/driver_examples/ftm/input_capture">
          <external path="examples/lpcxpresso860max/driver_examples/ftm/input_capture" type="xml">
            <files mask="ftm_input_capture_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_pint_pin_interrupt" name="pint_pin_interrupt" brief="This example shows how to use SDK drivers to use the Pin interrupt &amp; pattern match peripheral." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/pint" path="examples/lpcxpresso860max/driver_examples/pint/pin_interrupt">
          <external path="examples/lpcxpresso860max/driver_examples/pint/pin_interrupt" type="xml">
            <files mask="pint_pin_interrupt_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_pint_pattern_match" name="pint_pattern_match" brief="This example shows how to use SDK drivers to use the Pin interrupt &amp; pattern match peripheral." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/pint" path="examples/lpcxpresso860max/driver_examples/pint/pattern_match">
          <external path="examples/lpcxpresso860max/driver_examples/pint/pattern_match" type="xml">
            <files mask="pint_pattern_match_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_usart_polling_example" name="usart_polling_example" brief="The uart_polling example shows how to use uart driver in polling way:In this example, one uart instance connect to PC, the board will send back all characters that PCsend to the board. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/usart" path="examples/lpcxpresso860max/driver_examples/usart/polling">
          <external path="examples/lpcxpresso860max/driver_examples/usart/polling" type="xml">
            <files mask="usart_polling_example_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_usart_terminal" name="usart_terminal" brief="This example demonstrate configuration and use of the USART module in interrupt-driven &#10;asynchronous mode on communication with a terminal emulator calling the USART &#10;transactional APIs. USART will echo back every character to terminal emulator, and send&#10;back all received characters once users press [Enter] key.&#10;" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/usart" path="examples/lpcxpresso860max/driver_examples/usart/terminal">
          <external path="examples/lpcxpresso860max/driver_examples/usart/terminal" type="xml">
            <files mask="usart_terminal_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_usart_transfer_interrupt" name="usart_transfer_interrupt" brief="usart_transfer_interrupt" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/usart" path="examples/lpcxpresso860max/driver_examples/usart/transfer_interrupt">
          <external path="examples/lpcxpresso860max/driver_examples/usart/transfer_interrupt" type="xml">
            <files mask="usart_transfer_interrupt_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_usart_transfer_ring_buffer" name="usart_transfer_ring_buffer" brief="The usart_interrupt_rb_transfer example shows how to use usart driver in interrupt way withRX ring buffer enabled.In this example, one uart instance connect to PC through, the board will send back all charactersthat PC send to the board.Note: The example echo every 8 characters." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/usart" path="examples/lpcxpresso860max/driver_examples/usart/transfer_ring_buffer">
          <external path="examples/lpcxpresso860max/driver_examples/usart/transfer_ring_buffer" type="xml">
            <files mask="usart_transfer_ring_buffer_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_usart_transfer_sync_mode" name="usart_transfer_sync_mode" brief="The usart_interrupt_sync_transfer example shows how to use usart API in synchronous mode:In this example, one usart instance will be selected as master ,and another as slave. The master will send data to slave in polling way, and slave will receive data in nonblocking way.After all data has been received by slave, info will be printed by debug console." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/usart" path="examples/lpcxpresso860max/driver_examples/usart/transfer_sync_mode">
          <external path="examples/lpcxpresso860max/driver_examples/usart/transfer_sync_mode" type="xml">
            <files mask="usart_transfer_sync_mode_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_usart_transfer_dma" name="usart_transfer_dma" brief="This example shows how to use the DMA driver to implement a double buffer receive scheme from the USART The example shows the double buffer constructed using two descriptors (g_pingpong_desc). These descriptors are cycled from one to the other.Things to note- The descriptors of the ping pong transfer need to be aligned to size 16- The initial transfer will perform the same job as first descriptor of ping pong, so the first linkeage   is to go to g_pingpong_desc[1]- g_pingpong_desc[1] then chains the g_pingpong_desc[0] as the next descriptor- The properties are set up such that g_pingpong_desc[0] (and the initial configuration uses INTA to signal  back to the callback)- g_pingpong_desc[1] uses INTB to signal to the callback- The scheduled callback uses this information to know which data was last writtenA note on Performance The intent of this example is to illustrate how a double-buffer scheme can be implemented using the dma. The performance of this example will be limited to how quickly the echo printer can read-out the data from the ping pong buffer and display it. This means that the example will work well if characters are entered at a rate where the DMA callback to echo the string can keep up with the input stream. Connecting the USARTRX to a continuous fast speed will cause the DMA to fall behind.  " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/usart" path="examples/lpcxpresso860max/driver_examples/usart/transfer_dma">
          <external path="examples/lpcxpresso860max/driver_examples/usart/transfer_dma" type="xml">
            <files mask="usart_transfer_dma_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_usart_transfer_rb_dma" name="usart_transfer_rb_dma" brief="This example shows how to use the DMA driver to implement a ring buffer to receive the data, and routine will send back every 8 characters. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/usart" path="examples/lpcxpresso860max/driver_examples/usart/transfer_rb_dma">
          <external path="examples/lpcxpresso860max/driver_examples/usart/transfer_rb_dma" type="xml">
            <files mask="usart_transfer_rb_dma_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_usart_transfer_hardware_flow_control" name="usart_transfer_hardware_flow_control" brief="The usart_transfer_hardware_flow_control example project demonstrates the usage of the hardware flow control function. This example sends data to itself(loopback), and hardware flow control is enabled in the example. The CTS(clear-to-send) pin is for transmiter to check if receiver is ready, if the CTS pin is asserted, transmiter starts to send data. The RTS(request-to-send) pin is for receiver to inform the transmiter if receiver is ready to receive data. So, please connect RTS to CTS pin directly." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/usart" path="examples/lpcxpresso860max/driver_examples/usart/transfer_hardware_flow_control">
          <external path="examples/lpcxpresso860max/driver_examples/usart/transfer_hardware_flow_control" type="xml">
            <files mask="usart_transfer_hardware_flow_control_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_lpc_adc_basic" name="lpc_adc_basic" brief="The lpc_adc_basic example shows how to use LPC ADC driver in the simplest way.In this example, the internal temperature sensor is used to created the input analog signal. When user type in any key from the keyboard, the software trigger API is called to start the conversion. Then it polls the conversion sequence A's flag till the conversion is completed. When the conversion is completed, just print the conversion result to terminal.Project Information1.what are ADC conversion sequences?  A conversion sequence is a single pass through a series of A/D conversions performed on a selected set of  A/D channels. Software can set-up two independent conversion sequences, either of which can be triggered   by software or by a transition on one of the hardware triggers. Each sequence can be triggered by a different   hardware trigger. One of these conversion sequences is referred to as the A sequence and the other as the B  sequence. It is not necessary to employ both sequences. An optional single-step mode allows advancing through  the channels of a sequence one at a time on each successive occurrence of a trigger. The user can select whether  a trigger on the B sequence can interrupt an already-in-progress A sequence. The B sequence, however, can never be  interrupted by an A trigger.  2. How to use software-triggered conversion?   There are two ways that software can trigger a conversion sequence:      1. Start Bit: The first way to software-trigger an sequence is by setting the START bit in         the corresponding SEQn_CTRL register. The response to this is identical to         occurrence of a hardware trigger on that sequence. Specifically, one cycle of         conversions through that conversion sequence will be immediately triggered except         as indicated above. (In this example, we use this way.)      2. Burst Mode: The other way to initiate conversions is to set the BURST bit in the         SEQn_CTRL register. As long as this bit is 1 the designated conversion sequence will         be continuously and repetitively cycled through. Any new software or hardware trigger         on this sequence will be ignored.  Program Flow1.This example demonstrates how to configure the A sequences with polling, assigning one channel with software  trigger, you can configure channel via &quot;DEMO_ADC_SAMPLE_CHANNEL_NUMBER&quot;.  2.Before configuration of the ADC begins, the ADC is put through a self-calibration cycle.    3.After ADC channels are assigned to each of the sequences, the software trigger is chosen. Setting   SEQA_CTRL_START to '1' will trigger sequence A.  4.After ADC channels are assigned to each of the sequences, if the user enters any key via terminal, software trigger will start. 5.Read the corresponding DATAVALID field with polling to judge whether the conversion completes and the result is ready.  If the result is ready, the example will printf result information to terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/adc" path="examples/lpcxpresso860max/driver_examples/adc/lpc_adc_basic">
          <external path="examples/lpcxpresso860max/driver_examples/adc/lpc_adc_basic" type="xml">
            <files mask="lpc_adc_basic_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_lpc_adc_interrupt" name="lpc_adc_interrupt" brief="The lpc_adc_interrupt example shows how to use interrupt with LPC ADC driver.In this example, the internal temperature sensor is used to created the input analog signal. When user type in any key from the keyboard, the software trigger API is called to start the conversion. Then it polls the flag variable which would be asserted when the conversion completed ISR is executed. Then just print the conversion result to terminal.Project Information1.what are ADC conversion sequences?  A conversion sequence is a single pass through a series of A/D conversions performed on a selected set of  A/D channels. Software can set-up two independent conversion sequences, either of which can be triggered   by software or by a transition on one of the hardware triggers. Each sequence can be triggered by a different   hardware trigger. One of these conversion sequences is referred to as the A sequence and the other as the B  sequence. It is not necessary to employ both sequences. An optional single-step mode allows advancing through  the channels of a sequence one at a time on each successive occurrence of a trigger. The user can select whether  a trigger on the B sequence can interrupt an already-in-progress A sequence. The B sequence, however, can never be  interrupted by an A trigger.  2. How to use software-triggered conversion?   There are two ways that software can trigger a conversion sequence:      1. Start Bit: The first way to software-trigger an sequence is by setting the START bit in         the corresponding SEQn_CTRL register. The response to this is identical to         occurrence of a hardware trigger on that sequence. Specifically, one cycle of         conversions through that conversion sequence will be immediately triggered except         as indicated above. (In this example, we use this way.)      2. Burst Mode: The other way to initiate conversions is to set the BURST bit in the         SEQn_CTRL register. As long as this bit is 1 the designated conversion sequence will         be continuously and repetitively cycled through. Any new software or hardware trigger         on this sequence will be ignored.          3. What kinds of interrupt do ADC have?   There are four interrupts that can be generated by the ADC:     • Conversion-Complete or Sequence-Complete interrupts for sequences A and B     • Threshold-Compare Out-of-Range Interrupt     • Data Overrun Interrupt   Any of these interrupt requests may be individually enabled or disabled in the INTEN register.  Program Flow1.This example demonstrates how to configure the A sequences with interrupt, assigning one channel with software  trigger, you can configure channel via &quot;DEMO_ADC_SAMPLE_CHANNEL_NUMBER&quot;.  2.Before configuration of the ADC begins, the ADC is put through a self-calibration cycle.  3.Enable the Conversion-Complete or Sequence-Complete interrupt for sequences A.  4.After ADC channels are assigned to each of the sequences, if the user enters any key via terminal, software trigger will start.    5.When the conversion completes, the interrupt would be triggered. The ISR will print conversion result to terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/adc" path="examples/lpcxpresso860max/driver_examples/adc/lpc_adc_interrupt">
          <external path="examples/lpcxpresso860max/driver_examples/adc/lpc_adc_interrupt" type="xml">
            <files mask="lpc_adc_interrupt_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_lpc_adc_burst" name="lpc_adc_burst" brief="The lpc_adc_burst example shows how to use LPC ADC driver with the burst mode.In this example, the internal temperature sensor is used to created the input analog signal.When user type in any key from the keyboard, the burst mode is enabled. Then the conversion sequence A would be started automatically, till the burst would be disabled in conversion completed ISR. Project Information1.what are ADC conversion sequences?  A conversion sequence is a single pass through a series of A/D conversions performed on a selected set of  A/D channels. Software can set-up two independent conversion sequences, either of which can be triggered   by software or by a transition on one of the hardware triggers. Each sequence can be triggered by a different   hardware trigger. One of these conversion sequences is referred to as the A sequence and the other as the B  sequence. It is not necessary to employ both sequences. An optional single-step mode allows advancing through  the channels of a sequence one at a time on each successive occurrence of a trigger. The user can select whether  a trigger on the B sequence can interrupt an already-in-progress A sequence. The B sequence, however, can never be  interrupted by an A trigger.  2. How to use software-triggered conversion?   There are two ways that software can trigger a conversion sequence:      1. Start Bit: The first way to software-trigger an sequence is by setting the START bit in         the corresponding SEQn_CTRL register. The response to this is identical to         occurrence of a hardware trigger on that sequence. Specifically, one cycle of         conversions through that conversion sequence will be immediately triggered except         as indicated above.       2. Burst Mode: The other way to initiate conversions is to set the BURST bit in the         SEQn_CTRL register. As long as this bit is 1 the designated conversion sequence will         be continuously and repetitively cycled through. Any new software or hardware trigger         on this sequence will be ignored. (In this example, we use this way.)         3. What kinds of interrupt do ADC have?   There are four interrupts that can be generated by the ADC:     • Conversion-Complete or Sequence-Complete interrupts for sequences A and B     • Threshold-Compare Out-of-Range Interrupt     • Data Overrun Interrupt   Any of these interrupt requests may be individually enabled or disabled in the INTEN register.  Program Flow1.This example demonstrates how to configure the A sequences with burst mode, you can configure channel via   &quot;DEMO_ADC_SAMPLE_CHANNEL_NUMBER&quot;.  2.Before configuration of the ADC begins, the ADC is put through a self-calibration cycle.  3.Enable the Conversion-Complete or Sequence-Complete interrupt for sequences A.  4.After ADC channels are assigned to each of the sequences, if the user enters any key via terminal, burst mode will start.    5.When the first conversion completes, the interrupt would be triggered. The ISR will stop the burst mode and print conversion result   to terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/adc" path="examples/lpcxpresso860max/driver_examples/adc/lpc_adc_burst">
          <external path="examples/lpcxpresso860max/driver_examples/adc/lpc_adc_burst" type="xml">
            <files mask="lpc_adc_burst_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_lpc_adc_dma" name="lpc_adc_dma" brief="The lpc_adc_dma example shows how to use LPC ADC driver with DMA.In this example, the internal temperature sensor is used to created the input analog signal. When user type in any key from the keyboard, the software trigger API is called to start the conversion. When the ADC conversion is completed, it would trigger the DMA to move the ADC conversion result from ADC conversion data register to user indicated memory. Then the main loop waits for the transfer to be done and print the result to terminal.Project Information1.what are ADC conversion sequences?  A conversion sequence is a single pass through a series of A/D conversions performed on a selected set of  A/D channels. Software can set-up two independent conversion sequences, either of which can be triggered   by software or by a transition on one of the hardware triggers. Each sequence can be triggered by a different   hardware trigger. One of these conversion sequences is referred to as the A sequence and the other as the B  sequence. It is not necessary to employ both sequences. An optional single-step mode allows advancing through  the channels of a sequence one at a time on each successive occurrence of a trigger. The user can select whether  a trigger on the B sequence can interrupt an already-in-progress A sequence. The B sequence, however, can never be  interrupted by an A trigger.  2. How to use software-triggered conversion?   There are two ways that software can trigger a conversion sequence:      1. Start Bit: The first way to software-trigger an sequence is by setting the START bit in         the corresponding SEQn_CTRL register. The response to this is identical to         occurrence of a hardware trigger on that sequence. Specifically, one cycle of         conversions through that conversion sequence will be immediately triggered except         as indicated above. (In this example, we use this way.)      2. Burst Mode: The other way to initiate conversions is to set the BURST bit in the         SEQn_CTRL register. As long as this bit is 1 the designated conversion sequence will         be continuously and repetitively cycled through. Any new software or hardware trigger         on this sequence will be ignored.          3. How to use DMA to work with ADC?   The sequence-A or sequence-B conversion/sequence-complete interrupts may also be   used to generate a DMA trigger. To trigger a DMA transfer, the same conditions must be   met as the conditions for generating an interrupt.   Remark: If the DMA is used, the ADC interrupt must be disabled in the NVIC.   Program Flow1.This example demonstrates how to configure the A sequences with interrupt, assigning one channel with software  trigger, you can configure channel via &quot;DEMO_ADC_SAMPLE_CHANNEL_NUMBER&quot;.  2.Before configuration of the ADC begins, the ADC is put through a self-calibration cycle.  3.Configure the DMA and DMAMUX to work with ADC sequences.4.Enable the Conversion-Complete or Sequence-Complete DMA for sequences A.  5.After ADC channels are assigned to each of the sequences, if the user enters any key via terminal, software trigger will start.    6.When the conversion completes, the DMA would be requested.7.When the DMA transfer completes, DMA will trigger a interrupt. ISR would set the &quot;bDmaTransferDone&quot; to 'true'. Then main function will   print conversion result to terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/adc" path="examples/lpcxpresso860max/driver_examples/adc/lpc_adc_dma">
          <external path="examples/lpcxpresso860max/driver_examples/adc/lpc_adc_dma" type="xml">
            <files mask="lpc_adc_dma_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_spi_interrupt_master" name="spi_interrupt_master" brief="The spi_interrupt_master example shows how to use spi functional API to do interrupt transfer as a master:In this example, the spi instance as master. Master sends a piece of data to slave, receive data from slave,and check if the data master received is correct. This example needs to work with spi_interrupt_slave example. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/lpcxpresso860max/driver_examples/spi/interrupt/master">
          <external path="examples/lpcxpresso860max/driver_examples/spi/interrupt/master" type="xml">
            <files mask="spi_interrupt_master_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_spi_interrupt_slave" name="spi_interrupt_slave" brief="The spi_interrupt_slave example shows how to use spi driver as slave to receive data from master.In this example, one spi instance as slave and another spi instance on other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from master is correct. This example should work with spi_interrupt_master example. And this example should start first. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/lpcxpresso860max/driver_examples/spi/interrupt/slave">
          <external path="examples/lpcxpresso860max/driver_examples/spi/interrupt/slave" type="xml">
            <files mask="spi_interrupt_slave_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_spi_transfer_interrupt_master" name="spi_transfer_interrupt_master" brief="The spi_interrupt_transfer_master example shows how to use spi driver as master to do board to boardtransfer in interrupt way:In this example, one spi instance as master and another spi instance on othere board as slave. Mastersends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct. This example need to work with spi_interrupt_transfer_slave example. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/lpcxpresso860max/driver_examples/spi/transfer_interrupt/master">
          <external path="examples/lpcxpresso860max/driver_examples/spi/transfer_interrupt/master" type="xml">
            <files mask="spi_transfer_interrupt_master_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_spi_transfer_interrupt_slave" name="spi_transfer_interrupt_slave" brief="The spi_interrupt_transfer_slave example shows how to use spi driver as slave to receive data from master.In this example, one spi instance as slave and another spi instance on other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from master is correct. This example should work with spi_interrupt_transfer_master example. And this example should start first. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/lpcxpresso860max/driver_examples/spi/transfer_interrupt/slave">
          <external path="examples/lpcxpresso860max/driver_examples/spi/transfer_interrupt/slave" type="xml">
            <files mask="spi_transfer_interrupt_slave_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_spi_polling_master" name="spi_polling_master" brief="The spi_polling_transfer_master example shows how to use spi driver as master to do board to boardtransfer with polling:In this example, one spi instance as master and another spi instance on othere board as slave. Mastersends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct. This example need to work with spi_polling_transfer_slave example. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/lpcxpresso860max/driver_examples/spi/polling/master">
          <external path="examples/lpcxpresso860max/driver_examples/spi/polling/master" type="xml">
            <files mask="spi_polling_master_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_spi_polling_slave" name="spi_polling_slave" brief="The spi_polling_transfer_slave example shows how to use spi driver as slave to receive data from master.In this example, one spi instance as slave and another spi instance on other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from master is correct. This example should work with spi_polling_transfer_master example. And this example should start first." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/lpcxpresso860max/driver_examples/spi/polling/slave">
          <external path="examples/lpcxpresso860max/driver_examples/spi/polling/slave" type="xml">
            <files mask="spi_polling_slave_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_spi_transfer_dma_master" name="spi_transfer_dma_master" brief="The spi_dma_transfer_master example shows how to use driver API to transfer in DMA way.  In this example, one spi instance as master and another spi instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checksif the data received from slave is correct. This example needs to work with spi_dma_transfer_slave example. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/lpcxpresso860max/driver_examples/spi/transfer_dma/master">
          <external path="examples/lpcxpresso860max/driver_examples/spi/transfer_dma/master" type="xml">
            <files mask="spi_transfer_dma_master_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_spi_transfer_dma_slave" name="spi_transfer_dma_slave" brief="The spi_dma_transfer_slave example shows how to use driver API to transfer in DMA way.  In this example, one spi instance as master and another spi instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checksif the data received from slave is correct. This example needs to work with spi_dma_transfer_master example. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/lpcxpresso860max/driver_examples/spi/transfer_dma/slave">
          <external path="examples/lpcxpresso860max/driver_examples/spi/transfer_dma/slave" type="xml">
            <files mask="spi_transfer_dma_slave_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_led_blinky" name="led_blinky" brief="The LED Blinky demo application provides a sanity check for the new SDK build environments and board bring up. The LED Blinky demo uses the systick interrupt to realize the function of timing delay. The example takes turns to shine the LED. The purpose of this demo is to provide a simple project for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/lpcxpresso860max/demo_apps/led_blinky">
          <external path="examples/lpcxpresso860max/demo_apps/led_blinky" type="xml">
            <files mask="led_blinky_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_new_project" name="new_project" brief="The new project is provided as starting point for user to add with customized flow." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/lpcxpresso860max/demo_apps/new_project">
          <external path="examples/lpcxpresso860max/demo_apps/new_project" type="xml">
            <files mask="new_project_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_acomp_basic" name="acomp_basic" brief="The ACOMP Basic Example shows the simplest way to use ACOMP driver and help user with a quick start.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the ACOMP's negative channel input. On the postive side, the internal voltage ladder is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user's voltage crosses the internal ladder's output. The endless loop in main() functionwould detect the logic value of comparator's output, and change the LED. The LED would be turned on when the compareoutput is logic one, or turned off when zero." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/acomp" path="examples/lpcxpresso860max/driver_examples/acomp/acomp_basic">
          <external path="examples/lpcxpresso860max/driver_examples/acomp/acomp_basic" type="xml">
            <files mask="acomp_basic_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_acomp_interrupt" name="acomp_interrupt" brief="The ACOMP Interrupt Example shows how to use interrupt with ACOMP driver.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the ACOMP's negative channel input. On the postive side, the internal voltage ladder is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user-defined channel's voltage crosses the internal ladder's output. The change ofcomparator's output would generate the falling and rising edge events with their interrupts enabled. When any ACOMP interrupt happens, the ACOMP's ISR would turn on/off the LED light." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/acomp" path="examples/lpcxpresso860max/driver_examples/acomp/acomp_interrupt">
          <external path="examples/lpcxpresso860max/driver_examples/acomp/acomp_interrupt" type="xml">
            <files mask="acomp_interrupt_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_lpc_i2c_interrupt_b2b_transfer_master" name="lpc_i2c_interrupt_b2b_transfer_master" brief="The i2c_interrupt_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/lpcxpresso860max/driver_examples/i2c/interrupt_b2b_transfer/master">
          <external path="examples/lpcxpresso860max/driver_examples/i2c/interrupt_b2b_transfer/master" type="xml">
            <files mask="lpc_i2c_interrupt_b2b_transfer_master_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_lpc_i2c_interrupt_b2b_transfer_slave" name="lpc_i2c_interrupt_b2b_transfer_slave" brief="The i2c_interrupt_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with interrupt:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/lpcxpresso860max/driver_examples/i2c/interrupt_b2b_transfer/slave">
          <external path="examples/lpcxpresso860max/driver_examples/i2c/interrupt_b2b_transfer/slave" type="xml">
            <files mask="lpc_i2c_interrupt_b2b_transfer_slave_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_lpc_i2c_dma_b2b_master" name="lpc_i2c_dma_b2b_master" brief="The i2c_dma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with DMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/lpcxpresso860max/driver_examples/i2c/dma_b2b/master">
          <external path="examples/lpcxpresso860max/driver_examples/i2c/dma_b2b/master" type="xml">
            <files mask="lpc_i2c_dma_b2b_master_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_lpc_i2c_dma_b2b_slave" name="lpc_i2c_dma_b2b_slave" brief="The i2c_dma_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with a DMA master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/lpcxpresso860max/driver_examples/i2c/dma_b2b/slave">
          <external path="examples/lpcxpresso860max/driver_examples/i2c/dma_b2b/slave" type="xml">
            <files mask="lpc_i2c_dma_b2b_slave_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_mrt_example" name="mrt_example" brief="The MRT project is a simple demonstration program of the SDK MRT driver. It sets up the MRThardware block to trigger a periodic interrupt after every 250 milliseconds. When the PIT interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/mrt" path="examples/lpcxpresso860max/driver_examples/mrt">
          <external path="examples/lpcxpresso860max/driver_examples/mrt" type="xml">
            <files mask="mrt_example_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_dma_memory_to_memory" name="dma_memory_to_memory" brief="The DMA memory to memory example is a simple demonstration program that uses the SDK software.It executes one shot transfer from source buffer to destination buffer using the SDK DMA drivers.The purpose of this example is to show how to use the DMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dma" path="examples/lpcxpresso860max/driver_examples/dma/memory_to_memory">
          <external path="examples/lpcxpresso860max/driver_examples/dma/memory_to_memory" type="xml">
            <files mask="dma_memory_to_memory_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_dma_m2m_polling" name="dma_m2m_polling" brief="The DMA memory to memory example is a simple demonstration program that uses the SDK software.It executes one shot polling transfer from source buffer to destination buffer using the SDK DMA drivers.The purpose of this example is to show how to use the DMA and to provide a simple example for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dma" path="examples/lpcxpresso860max/driver_examples/dma/m2m_polling">
          <external path="examples/lpcxpresso860max/driver_examples/dma/m2m_polling" type="xml">
            <files mask="dma_m2m_polling_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_wwdt_example" name="wwdt_example" brief="The WDOG Example project is to demonstrate usage of the KSDK wdog driver.In this example,quick test is first implemented to test the wdog.And then after 5 times of refreshing the watchdog, a timeout reset is generated." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/wwdt" path="examples/lpcxpresso860max/driver_examples/wwdt">
          <external path="examples/lpcxpresso860max/driver_examples/wwdt" type="xml">
            <files mask="wwdt_example_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_wkt_example" name="wkt_example" brief="The WKT project is a simple demonstration program of the SDK WKT driver. It sets up the WKT hardware block to trigger a periodic interrupt after loading a counter value and counting down to 0. When the WKT interrupt is triggered a message printed on the UART terminal and the LED is toggled on the board.Depending on the clock source, the WKT can be used for waking up the part from any low power mode or for general-purposetiming." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/wkt" path="examples/lpcxpresso860max/driver_examples/wkt">
          <external path="examples/lpcxpresso860max/driver_examples/wkt" type="xml">
            <files mask="wkt_example_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_dma_channel_chain" name="dma_channel_chain" brief="The DMA channel chain example is a simple demonstration program that uses the SDK software.The purpose of this example is to show how to use the DMA channel chain feature." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dma" path="examples/lpcxpresso860max/driver_examples/dma/channel_chain">
          <external path="examples/lpcxpresso860max/driver_examples/dma/channel_chain" type="xml">
            <files mask="dma_channel_chain_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_dma_interleave_transfer" name="dma_interleave_transfer" brief="The DMA interleave transfer example is a simple demonstration program that uses the SDK software.It executes a linked transfer from source buffer to destination buffer using the SDK DMA drivers.The purpose of this example is to show how to use the DMA interleave feature." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dma" path="examples/lpcxpresso860max/driver_examples/dma/interleave_transfer">
          <external path="examples/lpcxpresso860max/driver_examples/dma/interleave_transfer" type="xml">
            <files mask="dma_interleave_transfer_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_dma_linked_transfer" name="dma_linked_transfer" brief="The DMA linked transfer example is a simple demonstration program that uses the SDK software.It executes a linked transfer from source buffer to destination buffer using the SDK DMA drivers.The purpose of this example is to show how to use the DMA and to provide a linked trnasfer example." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dma" path="examples/lpcxpresso860max/driver_examples/dma/linked_transfer">
          <external path="examples/lpcxpresso860max/driver_examples/dma/linked_transfer" type="xml">
            <files mask="dma_linked_transfer_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_dma_wrap_transfer" name="dma_wrap_transfer" brief="The DMA wrap transfer example is a simple demonstration program that uses the SDK software.It executes a wrap transfer from source buffer to destination buffer using the SDK DMA drivers.The purpose of this example is to show how to use the DMA wrap feature." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dma" path="examples/lpcxpresso860max/driver_examples/dma/wrap_transfer">
          <external path="examples/lpcxpresso860max/driver_examples/dma/wrap_transfer" type="xml">
            <files mask="dma_wrap_transfer_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_iap_basic" name="iap_basic" brief="The IAP project is a simple demonstration program of the SDK IAP driver. It reads part id, boot code version, unique id and reinvoke ISP. A message a printed on the UART terminal as various bascial iap operations are performed." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/iap" path="examples/lpcxpresso860max/driver_examples/iap/iap_basic">
          <external path="examples/lpcxpresso860max/driver_examples/iap/iap_basic" type="xml">
            <files mask="iap_basic_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_iap_flash" name="iap_flash" brief="The IAP Flash project is a simple demonstration program of the SDK IAP driver. It erases and programs a portion of on-chip flash memory. A message a printed on the UART terminal as various operations on flash memory are performed." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/iap" path="examples/lpcxpresso860max/driver_examples/iap/iap_flash">
          <external path="examples/lpcxpresso860max/driver_examples/iap/iap_flash" type="xml">
            <files mask="iap_flash_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_lpc_i2c_polling_b2b_master" name="lpc_i2c_polling_b2b_master" brief="The i2c_polling_b2b_master example shows how to use i2c driver as master to do board to board transfer using polling method:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/lpcxpresso860max/driver_examples/i2c/polling_b2b/master">
          <external path="examples/lpcxpresso860max/driver_examples/i2c/polling_b2b/master" type="xml">
            <files mask="lpc_i2c_polling_b2b_master_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_lpc_i2c_polling_b2b_slave" name="lpc_i2c_polling_b2b_slave" brief="The i2c_polling_b2b_slave example shows how to use i2c driver as slave to do board to board transfer with a polling master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/lpcxpresso860max/driver_examples/i2c/polling_b2b/slave">
          <external path="examples/lpcxpresso860max/driver_examples/i2c/polling_b2b/slave" type="xml">
            <files mask="lpc_i2c_polling_b2b_slave_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_i3c_master_read_sensor_icm42688p" name="i3c_master_read_sensor_icm42688p" brief="The i3c_master_read_sensor_icm42688p example shows how to use i3c driver as master to communicate with sensor ICM-42688P." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i3c" path="examples/lpcxpresso860max/driver_examples/i3c/master_read_sensor_icm42688p">
          <external path="examples/lpcxpresso860max/driver_examples/i3c/master_read_sensor_icm42688p" type="xml">
            <files mask="i3c_master_read_sensor_icm42688p_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_i3c_polling_b2b_transfer_master" name="i3c_polling_b2b_transfer_master" brief="The i3c_polling_b2b_transfer_master example shows how to use i3c driver as master to do board to board transfer using polling method. In this example, one i3c instance as master and another i3c instance on the other board as slave. Master will assign dynamic address to slave, then sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i3c" path="examples/lpcxpresso860max/driver_examples/i3c/polling_b2b_transfer/master">
          <external path="examples/lpcxpresso860max/driver_examples/i3c/polling_b2b_transfer/master" type="xml">
            <files mask="i3c_polling_b2b_transfer_master_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_i3c_polling_b2b_transfer_slave" name="i3c_polling_b2b_transfer_slave" brief="The i3c_polling_b2b_transfer_slave example shows how to use i3c driver as slave to do board to board transfer with a polling master. In this example, one i3c instance as slave and another i3c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i3c" path="examples/lpcxpresso860max/driver_examples/i3c/polling_b2b_transfer/slave">
          <external path="examples/lpcxpresso860max/driver_examples/i3c/polling_b2b_transfer/slave" type="xml">
            <files mask="i3c_polling_b2b_transfer_slave_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_i3c_interrupt_b2b_transfer_master" name="i3c_interrupt_b2b_transfer_master" brief="The i3c_interrupt_b2b_transfer_master example shows how to use i3c driver as master to do board to board transfer using interrupt method. In this example, one i3c instance as master and another i3c instance on the other board as slave. Master will assign dynamic address to slave, then sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i3c" path="examples/lpcxpresso860max/driver_examples/i3c/interrupt_b2b_transfer/master">
          <external path="examples/lpcxpresso860max/driver_examples/i3c/interrupt_b2b_transfer/master" type="xml">
            <files mask="i3c_interrupt_b2b_transfer_master_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_i3c_interrupt_b2b_transfer_slave" name="i3c_interrupt_b2b_transfer_slave" brief="The i3c_interrupt_b2b_transfer_slave example shows how to use i3c driver as slave to do board to board transfer with a interrupt master. In this example, one i3c instance as slave and another i3c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i3c" path="examples/lpcxpresso860max/driver_examples/i3c/interrupt_b2b_transfer/slave">
          <external path="examples/lpcxpresso860max/driver_examples/i3c/interrupt_b2b_transfer/slave" type="xml">
            <files mask="i3c_interrupt_b2b_transfer_slave_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_lpc_bod" name="lpc_bod" brief="The bod example shows how to use LPC BOD(Brown-out detector) in the simplest way. To run this example, user should remove the jumper for the power source selector, and connect the adjustable input voltage to the MCU's Vin pin. If the input voltage of the Vin pin is lower than the threshold voltage, the BOD interrupt will be asserted." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/bod" path="examples/lpcxpresso860max/driver_examples/bod">
          <external path="examples/lpcxpresso860max/driver_examples/bod" type="xml">
            <files mask="lpc_bod_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_i3c_dma_b2b_transfer_master" name="i3c_dma_b2b_transfer_master" brief="The i3c_dma_b2b_transfer_master example shows how to use i3c driver as master to do board to board transfer using dma method. In this example, one i3c instance as master and another i3c instance on the other board as slave. Master will assign dynamic address to slave, then sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i3c" path="examples/lpcxpresso860max/driver_examples/i3c/dma_b2b_transfer/master">
          <external path="examples/lpcxpresso860max/driver_examples/i3c/dma_b2b_transfer/master" type="xml">
            <files mask="i3c_dma_b2b_transfer_master_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_i3c_dma_b2b_transfer_slave" name="i3c_dma_b2b_transfer_slave" brief="The i3c_dma_b2b_transfer_slave example shows how to use i3c driver as slave to do board to board transfer with a dma master. In this example, one i3c instance as slave and another i3c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i3c" path="examples/lpcxpresso860max/driver_examples/i3c/dma_b2b_transfer/slave">
          <external path="examples/lpcxpresso860max/driver_examples/i3c/dma_b2b_transfer/slave" type="xml">
            <files mask="i3c_dma_b2b_transfer_slave_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_i3c_interrupt_b2b_master" name="i3c_interrupt_b2b_master" brief="The i3c_interrupt_b2b_master example shows how to use i3c driver as master to do board to board transfer using interrupt method. In this example, one i3c instance as master and another i3c instance on the other board as slave. Master will assign dynamic address to slave, then sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i3c" path="examples/lpcxpresso860max/driver_examples/i3c/interrupt_b2b/master">
          <external path="examples/lpcxpresso860max/driver_examples/i3c/interrupt_b2b/master" type="xml">
            <files mask="i3c_interrupt_b2b_master_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_i3c_interrupt_b2b_slave" name="i3c_interrupt_b2b_slave" brief="The i3c_interrupt_b2b_slave example shows how to use i3c driver as slave to do board to board transfer with a interrupt master. In this example, one i3c instance as slave and another i3c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i3c" path="examples/lpcxpresso860max/driver_examples/i3c/interrupt_b2b/slave">
          <external path="examples/lpcxpresso860max/driver_examples/i3c/interrupt_b2b/slave" type="xml">
            <files mask="i3c_interrupt_b2b_slave_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_i3c_bus_master" name="i3c_bus_master" brief="The i3c_bus_master example shows how to use i3c_bus component to create I3C bus and i3c master on bus." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="component_examples/i3c" path="examples/lpcxpresso860max/component_examples/i3c_bus/master">
          <external path="examples/lpcxpresso860max/component_examples/i3c_bus/master" type="xml">
            <files mask="i3c_bus_master_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_i3c_bus_slave" name="i3c_bus_slave" brief="The i3c_bus_slave example shows how to use i3c_bus component to work as i3c bus slave." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="component_examples/i3c" path="examples/lpcxpresso860max/component_examples/i3c_bus/slave">
          <external path="examples/lpcxpresso860max/component_examples/i3c_bus/slave" type="xml">
            <files mask="i3c_bus_slave_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_freertos_hello" name="freertos_hello" brief="The Hello World project is a simple demonstration program that uses the SDK UART driver in combination with FreeRTOS. The purpose of this demo is to show how to use the debug console and toprovide a simple project for debugging and further development.The example application creates one task called hello_task. This task print &quot;Hello world.&quot; messagevia debug console utility and suspend itself." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="freertos_examples" path="examples/lpcxpresso860max/freertos_examples/freertos_hello">
          <external path="examples/lpcxpresso860max/freertos_examples/freertos_hello" type="xml">
            <files mask="freertos_hello_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_freertos_event" name="freertos_event" brief="This document explains the freertos_event example. It shows how task waits for an event (defined setof bits in event group). This event can be set by any other process or interrupt in the system.The example application creates three tasks. Two write tasks write_task_1 and write_task_2continuously setting event bit 0 and bit 1.Read_task is waiting for any event bit and printing actual state on console. Event bits areautomatically cleared after read task is entered.Three possible states can occurre:Both bits are set.zBit B0 is set.Bit B1 is set." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="freertos_examples" path="examples/lpcxpresso860max/freertos_examples/freertos_event">
          <external path="examples/lpcxpresso860max/freertos_examples/freertos_event" type="xml">
            <files mask="freertos_event_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_freertos_mutex" name="freertos_mutex" brief="This document explains the freertos_mutex example. It shows how mutex manage access to commonresource (terminal output).The example application creates two identical instances of write_task. Each task will lock the mutexbefore printing and unlock it after printing to ensure that the outputs from tasks are not mixedtogether.The test_task accept output message during creation as function parameter. Output message have twoparts. If xMutex is unlocked, the write_task_1 acquire xMutex and print first part of message. Thenrescheduling is performed. In this moment scheduler check if some other task could run, but secondtask write_task+_2 is blocked because xMutex is already locked by first write task. The firstwrite_task_1 continue from last point by printing of second message part. Finaly the xMutex isunlocked and second instance of write_task_2 is executed." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="freertos_examples" path="examples/lpcxpresso860max/freertos_examples/freertos_mutex">
          <external path="examples/lpcxpresso860max/freertos_examples/freertos_mutex" type="xml">
            <files mask="freertos_mutex_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_freertos_sem" name="freertos_sem" brief="This document explains the freertos_sem example, what to expect when running it and a briefintroduction to the API. The freertos_sem example code shows how semaphores works. Two differenttasks are synchronized in bilateral rendezvous model.The example uses four tasks. One producer_task and three consumer_tasks. The producer_task starts bycreating of two semaphores (xSemaphore_producer and xSemaphore_consumer). These semaphores controlaccess to virtual item. The synchronization is based on bilateral rendezvous pattern. Both ofconsumer and producer must be prepared to enable transaction." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="freertos_examples" path="examples/lpcxpresso860max/freertos_examples/freertos_sem">
          <external path="examples/lpcxpresso860max/freertos_examples/freertos_sem" type="xml">
            <files mask="freertos_sem_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_freertos_generic" name="freertos_generic" brief="This document explains the freertos_generic example. It is based on code FreeRTOS documentation fromhttp://www.freertos.org/Hardware-independent-RTOS-example.html. It shows combination of severaltasks with queue, software timer, tick hook and semaphore.The example application creates three tasks. The prvQueueSendTask periodically sending data toxQueue queue. The prvQueueReceiveTask is waiting for incoming message and counting number ofreceived messages. Task prvEventSemaphoreTask is waiting for xEventSemaphore semaphore given fromvApplicationTickHook. Tick hook give semaphore every 500 ms.Other hook types used for RTOS and resource statistics are also demonstrated in example:* vApplicationIdleHook* vApplicationStackOverflowHook* vApplicationMallocFailedHook" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="freertos_examples" path="examples/lpcxpresso860max/freertos_examples/freertos_generic">
          <external path="examples/lpcxpresso860max/freertos_examples/freertos_generic" type="xml">
            <files mask="freertos_generic_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_freertos_queue" name="freertos_queue" brief="This document explains the freertos_queue example. This example introduce simple logging mechanismbased on message passing.Example could be devided in two parts. First part is logger. It contain three tasks:log_add().....Add new message into the log. Call xQueueSend function to pass new message into              message queue.log_init()....Initialize logger (create logging task and message queue log_queue).log_task()....Task responsible for printing of log output.Second part is application of this simple logging mechanism. Each of two tasks write_task_1 andwrite_task_2 print 5 messages into log." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="freertos_examples" path="examples/lpcxpresso860max/freertos_examples/freertos_queue">
          <external path="examples/lpcxpresso860max/freertos_examples/freertos_queue" type="xml">
            <files mask="freertos_queue_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_freertos_tickless" name="freertos_tickless" brief="This document explains the freertos_tickless example. It shows the CPU enter at sleep mode and then it is waked up by expired time delay that using timer module." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="freertos_examples" path="examples/lpcxpresso860max/freertos_examples/freertos_tickless">
          <external path="examples/lpcxpresso860max/freertos_examples/freertos_tickless" type="xml">
            <files mask="freertos_tickless_v3_14.xml"/>
          </external>
        </example>
        <example id="lpcxpresso860max_freertos_swtimer" name="freertos_swtimer" brief="This document explains the freertos_swtimer example. It shows usage of software timer and itscallback.The example application creates one software timer SwTimer. The timer's callback SwTimerCallback isperiodically executed and text &quot;Tick.&quot; is printed to terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="freertos_examples" path="examples/lpcxpresso860max/freertos_examples/freertos_swtimer">
          <external path="examples/lpcxpresso860max/freertos_examples/freertos_swtimer" type="xml">
            <files mask="freertos_swtimer_v3_14.xml"/>
          </external>
        </example>
      </examples>
    </board>
  </boards>
  <devices>
    <device id="LPC865" name="LPC865" version="1.0.0" full_name="LPC865" family="LPC86x" platform="LPC">
      <description>Low-Cost Microcontrollers (MCUs) based on Arm Cortex-M0+ Core</description>
      <metadataSet>
        <metadata key="compatible_device.segger" value="LPC865M201"/>
        <metadata key="vendor" value="NXP"/>
      </metadataSet>
      <defines>
        <define name="CPU_$|package|" value=""/>
        <define name="CPU_$|package|_$|core|" value=""/>
      </defines>
      <core id="core0_LPC865" name="core0" fpu="false" type="cm0plus"/>
      <memory>
        <memoryBlock id="PROGRAM_FLASH_LPC865" name="PROGRAM_FLASH" addr="00000000" size="00010000" type="Flash" access="RO"/>
        <memoryBlock id="SRAM_LPC865" name="SRAM" addr="10000000" size="00001fe0" type="RAM" access="RW"/>
        <memoryBlock id="IAP_SRAM_LPC865" name="IAP_SRAM" addr="10001fe0" size="00000020" type="RAM" access="RW"/>
      </memory>
      <total_memory flash_size_kb="64" ram_size_kb="8"/>
      <package id="LPC865M201JBD64" name="LPC865M201JBD64"/>
      <package id="LPC865M201JHI48" name="LPC865M201JHI48"/>
      <package id="LPC865M201JHI33" name="LPC865M201JHI33"/>
      <evaluation_boards>
        <evaluation_board name="lpcxpresso860max"/>
      </evaluation_boards>
      <toolchainSettings>
        <toolchainSetting id_refs="com.nxp.mcuxpresso">
          <option id="com.crt.advproject.link.cpp.crpenable" type="boolean" user_name="">
            <value>true</value>
          </option>
          <option id="com.crt.advproject.link.crpenable" type="boolean" user_name="">
            <value>true</value>
          </option>
        </toolchainSetting>
      </toolchainSettings>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <params>
            <params id="internal.wiretype.release.LPC865" name="internal.wiretype" value="SWD"/>
            <params id="internal.has_swo.release.LPC865" name="internal.has_swo" value="false"/>
            <params id="vector.catch.release.LPC865" name="vector.catch" value="true"/>
          </params>
          <drivers>
            <driver id_refs="PROGRAM_FLASH_LPC865">
              <driverBinary path="core/devices/LPC865/mcuxpresso" type="binary">
                <files mask="LPC86x_64.cfx"/>
              </driverBinary>
            </driver>
          </drivers>
        </debug_configuration>
      </debug_configurations>
      <linkerSettings nature="c_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="mtb_supported" value="true"/>
        <linker property="crp_address" value="0x2fc"/>
      </linkerSettings>
      <linkerSettings nature="cpp_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="mtb_supported" value="true"/>
        <linker property="crp_address" value="0x2fc"/>
      </linkerSettings>
    </device>
  </devices>
  <components>
    <component id="project_template.lpcxpresso860max.LPC865" name="lpcxpresso860max" brief="Board_project_template lpcxpresso860max" version="1.0.0" full_name="Board_project_template lpcxpresso860max" category="Board Support/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/boards/lpcxpresso860max/project_template" project_base_path="board">
      <dependencies>
        <all>
          <component_dependency value="component.miniusart_adapter.LPC865"/>
          <component_dependency value="device.LPC865_startup.LPC865"/>
          <component_dependency value="platform.drivers.clock.LPC865"/>
          <component_dependency value="platform.drivers.lpc_gpio.LPC865"/>
          <component_dependency value="platform.drivers.lpc_iocon_lite.LPC865"/>
          <component_dependency value="platform.drivers.lpc_miniusart.LPC865"/>
          <component_dependency value="platform.drivers.power_no_lib.LPC865"/>
          <component_dependency value="platform.drivers.swm.LPC865"/>
          <component_dependency value="platform.utilities.assert_lite.LPC865"/>
          <component_dependency value="utility.debug_console_lite.LPC865"/>
          <board_dependency value="lpcxpresso860max"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" config="true" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source relative_path="./" config="true" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="BOARD_Project_Template_lpcxpresso860max.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.devices.LPC865_debugger.LPC865" name="Device LPC865_debugger" brief="Device LPC865_debugger" version="1.0.0" full_name="Device LPC865_debugger" category="Board Support/SDK Project Template" user_visible="true" type="debugger" package_base_path="svd/LPC865" project_base_path="svd">
      <dependencies>
        <device_dependency value="LPC865"/>
      </dependencies>
      <source relative_path="./" type="xml">
        <files mask="LPC865.xml"/>
      </source>
    </component>
    <component id="middleware.baremetal.LPC865" name="baremetal" brief="Middleware baremetal" version="1.0.0" full_name="Baremetal" category="Device/SDK Utilities" user_visible="true" type="OS" package_base_path="middleware/bm" project_base_path="middleware/bm">
      <defines>
        <define name="SDK_OS_BAREMETAL" value=""/>
      </defines>
      <dependencies>
        <device_dependency value="LPC865"/>
      </dependencies>
      <source relative_path="./" type="doc">
        <files mask="readme.txt" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_baremetal.LPC865.cmake" hidden="true"/>
      </source>
    </component>
    <component id="tools.LPC865" name="cmake_toolchain" brief="Cmake_toolchain" version="1.0.0" full_name="Cmake_toolchain" category="Device/SDK Utilities" user_visible="true" type="other" package_base_path="core/tools/cmake_toolchain_files" project_base_path="cmake_toolchain_files">
      <dependencies>
        <device_dependency value="LPC865"/>
      </dependencies>
      <source relative_path="./" type="script">
        <files mask="armgcc.cmake"/>
        <files mask="xcc.cmake"/>
        <files mask="xclang.cmake"/>
        <files mask="armgcc_force_cpp.cmake"/>
        <files mask="mcux_config.cmake"/>
      </source>
    </component>
    <component id="CMSIS_Include_core_cm.LPC865" name="CMSIS_Include_CM" brief="CMSIS-CORE for Cortex-M, ARMv8-M, ARMv8.1-M" version="5.9.0" full_name="CMSIS Include For Cortex-M, ARMv8-M, ARMv8.1-M" category="CMSIS/CORE" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Core/Include" project_base_path="CMSIS">
      <dependencies>
        <device_dependency value="LPC865"/>
      </dependencies>
      <source compiler="compiler_gcc" relative_path="./" type="c_include">
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_version.h"/>
      </source>
      <source relative_path="./" type="c_include" device_cores="core0_LPC865">
        <files mask="core_cm0plus.h"/>
        <files mask="mpu_armv7.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Include_core_cm.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <!--<component id="container.CMSIS_all_files.LPC865" name="LPC865" version="1.0.0" package_base_path="core/CMSIS" project_base_path="./">
  <source relative_path="./" type="src">
    <files mask="Driver_CAN.c"/>
    <files mask="Driver_ETH_MAC.c"/>
    <files mask="Driver_ETH_PHY.c"/>
    <files mask="Driver_Flash.c"/>
    <files mask="Driver_I2C.c"/>
    <files mask="Driver_MCI.c"/>
    <files mask="Driver_NAND.c"/>
    <files mask="Driver_SAI.c"/>
    <files mask="Driver_SPI.c"/>
    <files mask="Driver_Storage.c"/>
    <files mask="Driver_USART.c"/>
    <files mask="Driver_USBD.c"/>
    <files mask="Driver_USBH.c"/>
    <files mask="Driver_WiFi.c"/>
    <files mask="vio.c"/>
    <files mask="vio_memory.c"/>
    <files mask="BasicMathFunctions.c"/>
    <files mask="BasicMathFunctionsF16.c"/>
    <files mask="arm_abs_f16.c"/>
    <files mask="arm_abs_f32.c"/>
    <files mask="arm_abs_f64.c"/>
    <files mask="arm_abs_q15.c"/>
    <files mask="arm_abs_q31.c"/>
    <files mask="arm_abs_q7.c"/>
    <files mask="arm_add_f16.c"/>
    <files mask="arm_add_f32.c"/>
    <files mask="arm_add_f64.c"/>
    <files mask="arm_add_q15.c"/>
    <files mask="arm_add_q31.c"/>
    <files mask="arm_add_q7.c"/>
    <files mask="arm_and_u16.c"/>
    <files mask="arm_and_u32.c"/>
    <files mask="arm_and_u8.c"/>
    <files mask="arm_clip_f16.c"/>
    <files mask="arm_clip_f32.c"/>
    <files mask="arm_clip_q15.c"/>
    <files mask="arm_clip_q31.c"/>
    <files mask="arm_clip_q7.c"/>
    <files mask="arm_dot_prod_f16.c"/>
    <files mask="arm_dot_prod_f32.c"/>
    <files mask="arm_dot_prod_f64.c"/>
    <files mask="arm_dot_prod_q15.c"/>
    <files mask="arm_dot_prod_q31.c"/>
    <files mask="arm_dot_prod_q7.c"/>
    <files mask="arm_mult_f16.c"/>
    <files mask="arm_mult_f32.c"/>
    <files mask="arm_mult_f64.c"/>
    <files mask="arm_mult_q15.c"/>
    <files mask="arm_mult_q31.c"/>
    <files mask="arm_mult_q7.c"/>
    <files mask="arm_negate_f16.c"/>
    <files mask="arm_negate_f32.c"/>
    <files mask="arm_negate_f64.c"/>
    <files mask="arm_negate_q15.c"/>
    <files mask="arm_negate_q31.c"/>
    <files mask="arm_negate_q7.c"/>
    <files mask="arm_not_u16.c"/>
    <files mask="arm_not_u32.c"/>
    <files mask="arm_not_u8.c"/>
    <files mask="arm_offset_f16.c"/>
    <files mask="arm_offset_f32.c"/>
    <files mask="arm_offset_f64.c"/>
    <files mask="arm_offset_q15.c"/>
    <files mask="arm_offset_q31.c"/>
    <files mask="arm_offset_q7.c"/>
    <files mask="arm_or_u16.c"/>
    <files mask="arm_or_u32.c"/>
    <files mask="arm_or_u8.c"/>
    <files mask="arm_scale_f16.c"/>
    <files mask="arm_scale_f32.c"/>
    <files mask="arm_scale_f64.c"/>
    <files mask="arm_scale_q15.c"/>
    <files mask="arm_scale_q31.c"/>
    <files mask="arm_scale_q7.c"/>
    <files mask="arm_shift_q15.c"/>
    <files mask="arm_shift_q31.c"/>
    <files mask="arm_shift_q7.c"/>
    <files mask="arm_sub_f16.c"/>
    <files mask="arm_sub_f32.c"/>
    <files mask="arm_sub_f64.c"/>
    <files mask="arm_sub_q15.c"/>
    <files mask="arm_sub_q31.c"/>
    <files mask="arm_sub_q7.c"/>
    <files mask="arm_xor_u16.c"/>
    <files mask="arm_xor_u32.c"/>
    <files mask="arm_xor_u8.c"/>
    <files mask="BayesFunctions.c"/>
    <files mask="BayesFunctionsF16.c"/>
    <files mask="arm_gaussian_naive_bayes_predict_f16.c"/>
    <files mask="arm_gaussian_naive_bayes_predict_f32.c"/>
    <files mask="CommonTables.c"/>
    <files mask="CommonTablesF16.c"/>
    <files mask="arm_common_tables.c"/>
    <files mask="arm_common_tables_f16.c"/>
    <files mask="arm_const_structs.c"/>
    <files mask="arm_const_structs_f16.c"/>
    <files mask="arm_mve_tables.c"/>
    <files mask="arm_mve_tables_f16.c"/>
    <files mask="ComplexMathFunctions.c"/>
    <files mask="ComplexMathFunctionsF16.c"/>
    <files mask="arm_cmplx_conj_f16.c"/>
    <files mask="arm_cmplx_conj_f32.c"/>
    <files mask="arm_cmplx_conj_q15.c"/>
    <files mask="arm_cmplx_conj_q31.c"/>
    <files mask="arm_cmplx_dot_prod_f16.c"/>
    <files mask="arm_cmplx_dot_prod_f32.c"/>
    <files mask="arm_cmplx_dot_prod_q15.c"/>
    <files mask="arm_cmplx_dot_prod_q31.c"/>
    <files mask="arm_cmplx_mag_f16.c"/>
    <files mask="arm_cmplx_mag_f32.c"/>
    <files mask="arm_cmplx_mag_f64.c"/>
    <files mask="arm_cmplx_mag_fast_q15.c"/>
    <files mask="arm_cmplx_mag_q15.c"/>
    <files mask="arm_cmplx_mag_q31.c"/>
    <files mask="arm_cmplx_mag_squared_f16.c"/>
    <files mask="arm_cmplx_mag_squared_f32.c"/>
    <files mask="arm_cmplx_mag_squared_f64.c"/>
    <files mask="arm_cmplx_mag_squared_q15.c"/>
    <files mask="arm_cmplx_mag_squared_q31.c"/>
    <files mask="arm_cmplx_mult_cmplx_f16.c"/>
    <files mask="arm_cmplx_mult_cmplx_f32.c"/>
    <files mask="arm_cmplx_mult_cmplx_f64.c"/>
    <files mask="arm_cmplx_mult_cmplx_q15.c"/>
    <files mask="arm_cmplx_mult_cmplx_q31.c"/>
    <files mask="arm_cmplx_mult_real_f16.c"/>
    <files mask="arm_cmplx_mult_real_f32.c"/>
    <files mask="arm_cmplx_mult_real_q15.c"/>
    <files mask="arm_cmplx_mult_real_q31.c"/>
    <files mask="ControllerFunctions.c"/>
    <files mask="arm_pid_init_f32.c"/>
    <files mask="arm_pid_init_q15.c"/>
    <files mask="arm_pid_init_q31.c"/>
    <files mask="arm_pid_reset_f32.c"/>
    <files mask="arm_pid_reset_q15.c"/>
    <files mask="arm_pid_reset_q31.c"/>
    <files mask="arm_sin_cos_f32.c"/>
    <files mask="arm_sin_cos_q31.c"/>
    <files mask="DistanceFunctions.c"/>
    <files mask="DistanceFunctionsF16.c"/>
    <files mask="arm_boolean_distance.c"/>
    <files mask="arm_braycurtis_distance_f16.c"/>
    <files mask="arm_braycurtis_distance_f32.c"/>
    <files mask="arm_canberra_distance_f16.c"/>
    <files mask="arm_canberra_distance_f32.c"/>
    <files mask="arm_chebyshev_distance_f16.c"/>
    <files mask="arm_chebyshev_distance_f32.c"/>
    <files mask="arm_chebyshev_distance_f64.c"/>
    <files mask="arm_cityblock_distance_f16.c"/>
    <files mask="arm_cityblock_distance_f32.c"/>
    <files mask="arm_cityblock_distance_f64.c"/>
    <files mask="arm_correlation_distance_f16.c"/>
    <files mask="arm_correlation_distance_f32.c"/>
    <files mask="arm_cosine_distance_f16.c"/>
    <files mask="arm_cosine_distance_f32.c"/>
    <files mask="arm_cosine_distance_f64.c"/>
    <files mask="arm_dice_distance.c"/>
    <files mask="arm_dtw_distance_f32.c"/>
    <files mask="arm_dtw_init_window_q7.c"/>
    <files mask="arm_dtw_path_f32.c"/>
    <files mask="arm_euclidean_distance_f16.c"/>
    <files mask="arm_euclidean_distance_f32.c"/>
    <files mask="arm_euclidean_distance_f64.c"/>
    <files mask="arm_hamming_distance.c"/>
    <files mask="arm_jaccard_distance.c"/>
    <files mask="arm_jensenshannon_distance_f16.c"/>
    <files mask="arm_jensenshannon_distance_f32.c"/>
    <files mask="arm_kulsinski_distance.c"/>
    <files mask="arm_minkowski_distance_f16.c"/>
    <files mask="arm_minkowski_distance_f32.c"/>
    <files mask="arm_rogerstanimoto_distance.c"/>
    <files mask="arm_russellrao_distance.c"/>
    <files mask="arm_sokalmichener_distance.c"/>
    <files mask="arm_sokalsneath_distance.c"/>
    <files mask="arm_yule_distance.c"/>
    <files mask="FastMathFunctions.c"/>
    <files mask="FastMathFunctionsF16.c"/>
    <files mask="arm_atan2_f16.c"/>
    <files mask="arm_atan2_f32.c"/>
    <files mask="arm_atan2_q15.c"/>
    <files mask="arm_atan2_q31.c"/>
    <files mask="arm_cos_f32.c"/>
    <files mask="arm_cos_q15.c"/>
    <files mask="arm_cos_q31.c"/>
    <files mask="arm_divide_q15.c"/>
    <files mask="arm_divide_q31.c"/>
    <files mask="arm_sin_f32.c"/>
    <files mask="arm_sin_q15.c"/>
    <files mask="arm_sin_q31.c"/>
    <files mask="arm_sqrt_q15.c"/>
    <files mask="arm_sqrt_q31.c"/>
    <files mask="arm_vexp_f16.c"/>
    <files mask="arm_vexp_f32.c"/>
    <files mask="arm_vexp_f64.c"/>
    <files mask="arm_vinverse_f16.c"/>
    <files mask="arm_vlog_f16.c"/>
    <files mask="arm_vlog_f32.c"/>
    <files mask="arm_vlog_f64.c"/>
    <files mask="arm_vlog_q15.c"/>
    <files mask="arm_vlog_q31.c"/>
    <files mask="FilteringFunctions.c"/>
    <files mask="FilteringFunctionsF16.c"/>
    <files mask="arm_biquad_cascade_df1_32x64_init_q31.c"/>
    <files mask="arm_biquad_cascade_df1_32x64_q31.c"/>
    <files mask="arm_biquad_cascade_df1_f16.c"/>
    <files mask="arm_biquad_cascade_df1_f32.c"/>
    <files mask="arm_biquad_cascade_df1_fast_q15.c"/>
    <files mask="arm_biquad_cascade_df1_fast_q31.c"/>
    <files mask="arm_biquad_cascade_df1_init_f16.c"/>
    <files mask="arm_biquad_cascade_df1_init_f32.c"/>
    <files mask="arm_biquad_cascade_df1_init_q15.c"/>
    <files mask="arm_biquad_cascade_df1_init_q31.c"/>
    <files mask="arm_biquad_cascade_df1_q15.c"/>
    <files mask="arm_biquad_cascade_df1_q31.c"/>
    <files mask="arm_biquad_cascade_df2T_f16.c"/>
    <files mask="arm_biquad_cascade_df2T_f32.c"/>
    <files mask="arm_biquad_cascade_df2T_f64.c"/>
    <files mask="arm_biquad_cascade_df2T_init_f16.c"/>
    <files mask="arm_biquad_cascade_df2T_init_f32.c"/>
    <files mask="arm_biquad_cascade_df2T_init_f64.c"/>
    <files mask="arm_biquad_cascade_stereo_df2T_f16.c"/>
    <files mask="arm_biquad_cascade_stereo_df2T_f32.c"/>
    <files mask="arm_biquad_cascade_stereo_df2T_init_f16.c"/>
    <files mask="arm_biquad_cascade_stereo_df2T_init_f32.c"/>
    <files mask="arm_conv_f32.c"/>
    <files mask="arm_conv_fast_opt_q15.c"/>
    <files mask="arm_conv_fast_q15.c"/>
    <files mask="arm_conv_fast_q31.c"/>
    <files mask="arm_conv_opt_q15.c"/>
    <files mask="arm_conv_opt_q7.c"/>
    <files mask="arm_conv_partial_f32.c"/>
    <files mask="arm_conv_partial_fast_opt_q15.c"/>
    <files mask="arm_conv_partial_fast_q15.c"/>
    <files mask="arm_conv_partial_fast_q31.c"/>
    <files mask="arm_conv_partial_opt_q15.c"/>
    <files mask="arm_conv_partial_opt_q7.c"/>
    <files mask="arm_conv_partial_q15.c"/>
    <files mask="arm_conv_partial_q31.c"/>
    <files mask="arm_conv_partial_q7.c"/>
    <files mask="arm_conv_q15.c"/>
    <files mask="arm_conv_q31.c"/>
    <files mask="arm_conv_q7.c"/>
    <files mask="arm_correlate_f16.c"/>
    <files mask="arm_correlate_f32.c"/>
    <files mask="arm_correlate_f64.c"/>
    <files mask="arm_correlate_fast_opt_q15.c"/>
    <files mask="arm_correlate_fast_q15.c"/>
    <files mask="arm_correlate_fast_q31.c"/>
    <files mask="arm_correlate_opt_q15.c"/>
    <files mask="arm_correlate_opt_q7.c"/>
    <files mask="arm_correlate_q15.c"/>
    <files mask="arm_correlate_q31.c"/>
    <files mask="arm_correlate_q7.c"/>
    <files mask="arm_fir_decimate_f32.c"/>
    <files mask="arm_fir_decimate_fast_q15.c"/>
    <files mask="arm_fir_decimate_fast_q31.c"/>
    <files mask="arm_fir_decimate_init_f32.c"/>
    <files mask="arm_fir_decimate_init_q15.c"/>
    <files mask="arm_fir_decimate_init_q31.c"/>
    <files mask="arm_fir_decimate_q15.c"/>
    <files mask="arm_fir_decimate_q31.c"/>
    <files mask="arm_fir_f16.c"/>
    <files mask="arm_fir_f32.c"/>
    <files mask="arm_fir_f64.c"/>
    <files mask="arm_fir_fast_q15.c"/>
    <files mask="arm_fir_fast_q31.c"/>
    <files mask="arm_fir_init_f16.c"/>
    <files mask="arm_fir_init_f32.c"/>
    <files mask="arm_fir_init_f64.c"/>
    <files mask="arm_fir_init_q15.c"/>
    <files mask="arm_fir_init_q31.c"/>
    <files mask="arm_fir_init_q7.c"/>
    <files mask="arm_fir_interpolate_f32.c"/>
    <files mask="arm_fir_interpolate_init_f32.c"/>
    <files mask="arm_fir_interpolate_init_q15.c"/>
    <files mask="arm_fir_interpolate_init_q31.c"/>
    <files mask="arm_fir_interpolate_q15.c"/>
    <files mask="arm_fir_interpolate_q31.c"/>
    <files mask="arm_fir_lattice_f32.c"/>
    <files mask="arm_fir_lattice_init_f32.c"/>
    <files mask="arm_fir_lattice_init_q15.c"/>
    <files mask="arm_fir_lattice_init_q31.c"/>
    <files mask="arm_fir_lattice_q15.c"/>
    <files mask="arm_fir_lattice_q31.c"/>
    <files mask="arm_fir_q15.c"/>
    <files mask="arm_fir_q31.c"/>
    <files mask="arm_fir_q7.c"/>
    <files mask="arm_fir_sparse_f32.c"/>
    <files mask="arm_fir_sparse_init_f32.c"/>
    <files mask="arm_fir_sparse_init_q15.c"/>
    <files mask="arm_fir_sparse_init_q31.c"/>
    <files mask="arm_fir_sparse_init_q7.c"/>
    <files mask="arm_fir_sparse_q15.c"/>
    <files mask="arm_fir_sparse_q31.c"/>
    <files mask="arm_fir_sparse_q7.c"/>
    <files mask="arm_iir_lattice_f32.c"/>
    <files mask="arm_iir_lattice_init_f32.c"/>
    <files mask="arm_iir_lattice_init_q15.c"/>
    <files mask="arm_iir_lattice_init_q31.c"/>
    <files mask="arm_iir_lattice_q15.c"/>
    <files mask="arm_iir_lattice_q31.c"/>
    <files mask="arm_levinson_durbin_f16.c"/>
    <files mask="arm_levinson_durbin_f32.c"/>
    <files mask="arm_levinson_durbin_q31.c"/>
    <files mask="arm_lms_f32.c"/>
    <files mask="arm_lms_init_f32.c"/>
    <files mask="arm_lms_init_q15.c"/>
    <files mask="arm_lms_init_q31.c"/>
    <files mask="arm_lms_norm_f32.c"/>
    <files mask="arm_lms_norm_init_f32.c"/>
    <files mask="arm_lms_norm_init_q15.c"/>
    <files mask="arm_lms_norm_init_q31.c"/>
    <files mask="arm_lms_norm_q15.c"/>
    <files mask="arm_lms_norm_q31.c"/>
    <files mask="arm_lms_q15.c"/>
    <files mask="arm_lms_q31.c"/>
    <files mask="InterpolationFunctions.c"/>
    <files mask="InterpolationFunctionsF16.c"/>
    <files mask="arm_bilinear_interp_f16.c"/>
    <files mask="arm_bilinear_interp_f32.c"/>
    <files mask="arm_bilinear_interp_q15.c"/>
    <files mask="arm_bilinear_interp_q31.c"/>
    <files mask="arm_bilinear_interp_q7.c"/>
    <files mask="arm_linear_interp_f16.c"/>
    <files mask="arm_linear_interp_f32.c"/>
    <files mask="arm_linear_interp_q15.c"/>
    <files mask="arm_linear_interp_q31.c"/>
    <files mask="arm_linear_interp_q7.c"/>
    <files mask="arm_spline_interp_f32.c"/>
    <files mask="arm_spline_interp_init_f32.c"/>
    <files mask="MatrixFunctions.c"/>
    <files mask="MatrixFunctionsF16.c"/>
    <files mask="arm_householder_f16.c"/>
    <files mask="arm_householder_f32.c"/>
    <files mask="arm_householder_f64.c"/>
    <files mask="arm_mat_add_f16.c"/>
    <files mask="arm_mat_add_f32.c"/>
    <files mask="arm_mat_add_q15.c"/>
    <files mask="arm_mat_add_q31.c"/>
    <files mask="arm_mat_cholesky_f16.c"/>
    <files mask="arm_mat_cholesky_f32.c"/>
    <files mask="arm_mat_cholesky_f64.c"/>
    <files mask="arm_mat_cmplx_mult_f16.c"/>
    <files mask="arm_mat_cmplx_mult_f32.c"/>
    <files mask="arm_mat_cmplx_mult_q15.c"/>
    <files mask="arm_mat_cmplx_mult_q31.c"/>
    <files mask="arm_mat_cmplx_trans_f16.c"/>
    <files mask="arm_mat_cmplx_trans_f32.c"/>
    <files mask="arm_mat_cmplx_trans_q15.c"/>
    <files mask="arm_mat_cmplx_trans_q31.c"/>
    <files mask="arm_mat_init_f16.c"/>
    <files mask="arm_mat_init_f32.c"/>
    <files mask="arm_mat_init_f64.c"/>
    <files mask="arm_mat_init_q15.c"/>
    <files mask="arm_mat_init_q31.c"/>
    <files mask="arm_mat_inverse_f16.c"/>
    <files mask="arm_mat_inverse_f32.c"/>
    <files mask="arm_mat_inverse_f64.c"/>
    <files mask="arm_mat_ldlt_f32.c"/>
    <files mask="arm_mat_ldlt_f64.c"/>
    <files mask="arm_mat_mult_f16.c"/>
    <files mask="arm_mat_mult_f32.c"/>
    <files mask="arm_mat_mult_f64.c"/>
    <files mask="arm_mat_mult_fast_q15.c"/>
    <files mask="arm_mat_mult_fast_q31.c"/>
    <files mask="arm_mat_mult_opt_q31.c"/>
    <files mask="arm_mat_mult_q15.c"/>
    <files mask="arm_mat_mult_q31.c"/>
    <files mask="arm_mat_mult_q7.c"/>
    <files mask="arm_mat_qr_f16.c"/>
    <files mask="arm_mat_qr_f32.c"/>
    <files mask="arm_mat_qr_f64.c"/>
    <files mask="arm_mat_scale_f16.c"/>
    <files mask="arm_mat_scale_f32.c"/>
    <files mask="arm_mat_scale_q15.c"/>
    <files mask="arm_mat_scale_q31.c"/>
    <files mask="arm_mat_solve_lower_triangular_f16.c"/>
    <files mask="arm_mat_solve_lower_triangular_f32.c"/>
    <files mask="arm_mat_solve_lower_triangular_f64.c"/>
    <files mask="arm_mat_solve_upper_triangular_f16.c"/>
    <files mask="arm_mat_solve_upper_triangular_f32.c"/>
    <files mask="arm_mat_solve_upper_triangular_f64.c"/>
    <files mask="arm_mat_sub_f16.c"/>
    <files mask="arm_mat_sub_f32.c"/>
    <files mask="arm_mat_sub_f64.c"/>
    <files mask="arm_mat_sub_q15.c"/>
    <files mask="arm_mat_sub_q31.c"/>
    <files mask="arm_mat_trans_f16.c"/>
    <files mask="arm_mat_trans_f32.c"/>
    <files mask="arm_mat_trans_f64.c"/>
    <files mask="arm_mat_trans_q15.c"/>
    <files mask="arm_mat_trans_q31.c"/>
    <files mask="arm_mat_trans_q7.c"/>
    <files mask="arm_mat_vec_mult_f16.c"/>
    <files mask="arm_mat_vec_mult_f32.c"/>
    <files mask="arm_mat_vec_mult_q15.c"/>
    <files mask="arm_mat_vec_mult_q31.c"/>
    <files mask="arm_mat_vec_mult_q7.c"/>
    <files mask="QuaternionMathFunctions.c"/>
    <files mask="arm_quaternion2rotation_f32.c"/>
    <files mask="arm_quaternion_conjugate_f32.c"/>
    <files mask="arm_quaternion_inverse_f32.c"/>
    <files mask="arm_quaternion_norm_f32.c"/>
    <files mask="arm_quaternion_normalize_f32.c"/>
    <files mask="arm_quaternion_product_f32.c"/>
    <files mask="arm_quaternion_product_single_f32.c"/>
    <files mask="arm_rotation2quaternion_f32.c"/>
    <files mask="SVMFunctions.c"/>
    <files mask="SVMFunctionsF16.c"/>
    <files mask="arm_svm_linear_init_f16.c"/>
    <files mask="arm_svm_linear_init_f32.c"/>
    <files mask="arm_svm_linear_predict_f16.c"/>
    <files mask="arm_svm_linear_predict_f32.c"/>
    <files mask="arm_svm_polynomial_init_f16.c"/>
    <files mask="arm_svm_polynomial_init_f32.c"/>
    <files mask="arm_svm_polynomial_predict_f16.c"/>
    <files mask="arm_svm_polynomial_predict_f32.c"/>
    <files mask="arm_svm_rbf_init_f16.c"/>
    <files mask="arm_svm_rbf_init_f32.c"/>
    <files mask="arm_svm_rbf_predict_f16.c"/>
    <files mask="arm_svm_rbf_predict_f32.c"/>
    <files mask="arm_svm_sigmoid_init_f16.c"/>
    <files mask="arm_svm_sigmoid_init_f32.c"/>
    <files mask="arm_svm_sigmoid_predict_f16.c"/>
    <files mask="arm_svm_sigmoid_predict_f32.c"/>
    <files mask="StatisticsFunctions.c"/>
    <files mask="StatisticsFunctionsF16.c"/>
    <files mask="arm_absmax_f16.c"/>
    <files mask="arm_absmax_f32.c"/>
    <files mask="arm_absmax_f64.c"/>
    <files mask="arm_absmax_no_idx_f16.c"/>
    <files mask="arm_absmax_no_idx_f32.c"/>
    <files mask="arm_absmax_no_idx_f64.c"/>
    <files mask="arm_absmax_no_idx_q15.c"/>
    <files mask="arm_absmax_no_idx_q31.c"/>
    <files mask="arm_absmax_no_idx_q7.c"/>
    <files mask="arm_absmax_q15.c"/>
    <files mask="arm_absmax_q31.c"/>
    <files mask="arm_absmax_q7.c"/>
    <files mask="arm_absmin_f16.c"/>
    <files mask="arm_absmin_f32.c"/>
    <files mask="arm_absmin_f64.c"/>
    <files mask="arm_absmin_no_idx_f16.c"/>
    <files mask="arm_absmin_no_idx_f32.c"/>
    <files mask="arm_absmin_no_idx_f64.c"/>
    <files mask="arm_absmin_no_idx_q15.c"/>
    <files mask="arm_absmin_no_idx_q31.c"/>
    <files mask="arm_absmin_no_idx_q7.c"/>
    <files mask="arm_absmin_q15.c"/>
    <files mask="arm_absmin_q31.c"/>
    <files mask="arm_absmin_q7.c"/>
    <files mask="arm_accumulate_f16.c"/>
    <files mask="arm_accumulate_f32.c"/>
    <files mask="arm_accumulate_f64.c"/>
    <files mask="arm_entropy_f16.c"/>
    <files mask="arm_entropy_f32.c"/>
    <files mask="arm_entropy_f64.c"/>
    <files mask="arm_kullback_leibler_f16.c"/>
    <files mask="arm_kullback_leibler_f32.c"/>
    <files mask="arm_kullback_leibler_f64.c"/>
    <files mask="arm_logsumexp_dot_prod_f16.c"/>
    <files mask="arm_logsumexp_dot_prod_f32.c"/>
    <files mask="arm_logsumexp_f16.c"/>
    <files mask="arm_logsumexp_f32.c"/>
    <files mask="arm_max_f16.c"/>
    <files mask="arm_max_f32.c"/>
    <files mask="arm_max_f64.c"/>
    <files mask="arm_max_no_idx_f16.c"/>
    <files mask="arm_max_no_idx_f32.c"/>
    <files mask="arm_max_no_idx_f64.c"/>
    <files mask="arm_max_no_idx_q15.c"/>
    <files mask="arm_max_no_idx_q31.c"/>
    <files mask="arm_max_no_idx_q7.c"/>
    <files mask="arm_max_q15.c"/>
    <files mask="arm_max_q31.c"/>
    <files mask="arm_max_q7.c"/>
    <files mask="arm_mean_f16.c"/>
    <files mask="arm_mean_f32.c"/>
    <files mask="arm_mean_f64.c"/>
    <files mask="arm_mean_q15.c"/>
    <files mask="arm_mean_q31.c"/>
    <files mask="arm_mean_q7.c"/>
    <files mask="arm_min_f16.c"/>
    <files mask="arm_min_f32.c"/>
    <files mask="arm_min_f64.c"/>
    <files mask="arm_min_no_idx_f16.c"/>
    <files mask="arm_min_no_idx_f32.c"/>
    <files mask="arm_min_no_idx_f64.c"/>
    <files mask="arm_min_no_idx_q15.c"/>
    <files mask="arm_min_no_idx_q31.c"/>
    <files mask="arm_min_no_idx_q7.c"/>
    <files mask="arm_min_q15.c"/>
    <files mask="arm_min_q31.c"/>
    <files mask="arm_min_q7.c"/>
    <files mask="arm_mse_f16.c"/>
    <files mask="arm_mse_f32.c"/>
    <files mask="arm_mse_f64.c"/>
    <files mask="arm_mse_q15.c"/>
    <files mask="arm_mse_q31.c"/>
    <files mask="arm_mse_q7.c"/>
    <files mask="arm_power_f16.c"/>
    <files mask="arm_power_f32.c"/>
    <files mask="arm_power_f64.c"/>
    <files mask="arm_power_q15.c"/>
    <files mask="arm_power_q31.c"/>
    <files mask="arm_power_q7.c"/>
    <files mask="arm_rms_f16.c"/>
    <files mask="arm_rms_f32.c"/>
    <files mask="arm_rms_q15.c"/>
    <files mask="arm_rms_q31.c"/>
    <files mask="arm_std_f16.c"/>
    <files mask="arm_std_f32.c"/>
    <files mask="arm_std_f64.c"/>
    <files mask="arm_std_q15.c"/>
    <files mask="arm_std_q31.c"/>
    <files mask="arm_var_f16.c"/>
    <files mask="arm_var_f32.c"/>
    <files mask="arm_var_f64.c"/>
    <files mask="arm_var_q15.c"/>
    <files mask="arm_var_q31.c"/>
    <files mask="SupportFunctions.c"/>
    <files mask="SupportFunctionsF16.c"/>
    <files mask="arm_barycenter_f16.c"/>
    <files mask="arm_barycenter_f32.c"/>
    <files mask="arm_bitonic_sort_f32.c"/>
    <files mask="arm_bubble_sort_f32.c"/>
    <files mask="arm_copy_f16.c"/>
    <files mask="arm_copy_f32.c"/>
    <files mask="arm_copy_f64.c"/>
    <files mask="arm_copy_q15.c"/>
    <files mask="arm_copy_q31.c"/>
    <files mask="arm_copy_q7.c"/>
    <files mask="arm_f16_to_f64.c"/>
    <files mask="arm_f16_to_float.c"/>
    <files mask="arm_f16_to_q15.c"/>
    <files mask="arm_f64_to_f16.c"/>
    <files mask="arm_f64_to_float.c"/>
    <files mask="arm_f64_to_q15.c"/>
    <files mask="arm_f64_to_q31.c"/>
    <files mask="arm_f64_to_q7.c"/>
    <files mask="arm_fill_f16.c"/>
    <files mask="arm_fill_f32.c"/>
    <files mask="arm_fill_f64.c"/>
    <files mask="arm_fill_q15.c"/>
    <files mask="arm_fill_q31.c"/>
    <files mask="arm_fill_q7.c"/>
    <files mask="arm_float_to_f16.c"/>
    <files mask="arm_float_to_f64.c"/>
    <files mask="arm_float_to_q15.c"/>
    <files mask="arm_float_to_q31.c"/>
    <files mask="arm_float_to_q7.c"/>
    <files mask="arm_heap_sort_f32.c"/>
    <files mask="arm_insertion_sort_f32.c"/>
    <files mask="arm_merge_sort_f32.c"/>
    <files mask="arm_merge_sort_init_f32.c"/>
    <files mask="arm_q15_to_f16.c"/>
    <files mask="arm_q15_to_f64.c"/>
    <files mask="arm_q15_to_float.c"/>
    <files mask="arm_q15_to_q31.c"/>
    <files mask="arm_q15_to_q7.c"/>
    <files mask="arm_q31_to_f64.c"/>
    <files mask="arm_q31_to_float.c"/>
    <files mask="arm_q31_to_q15.c"/>
    <files mask="arm_q31_to_q7.c"/>
    <files mask="arm_q7_to_f64.c"/>
    <files mask="arm_q7_to_float.c"/>
    <files mask="arm_q7_to_q15.c"/>
    <files mask="arm_q7_to_q31.c"/>
    <files mask="arm_quick_sort_f32.c"/>
    <files mask="arm_selection_sort_f32.c"/>
    <files mask="arm_sort_f32.c"/>
    <files mask="arm_sort_init_f32.c"/>
    <files mask="arm_weighted_sum_f16.c"/>
    <files mask="arm_weighted_sum_f32.c"/>
    <files mask="TransformFunctions.c"/>
    <files mask="TransformFunctionsF16.c"/>
    <files mask="arm_bitreversal.c"/>
    <files mask="arm_bitreversal2.c"/>
    <files mask="arm_bitreversal_f16.c"/>
    <files mask="arm_cfft_f16.c"/>
    <files mask="arm_cfft_f32.c"/>
    <files mask="arm_cfft_f64.c"/>
    <files mask="arm_cfft_init_f16.c"/>
    <files mask="arm_cfft_init_f32.c"/>
    <files mask="arm_cfft_init_f64.c"/>
    <files mask="arm_cfft_init_q15.c"/>
    <files mask="arm_cfft_init_q31.c"/>
    <files mask="arm_cfft_q15.c"/>
    <files mask="arm_cfft_q31.c"/>
    <files mask="arm_cfft_radix2_f16.c"/>
    <files mask="arm_cfft_radix2_f32.c"/>
    <files mask="arm_cfft_radix2_init_f16.c"/>
    <files mask="arm_cfft_radix2_init_f32.c"/>
    <files mask="arm_cfft_radix2_init_q15.c"/>
    <files mask="arm_cfft_radix2_init_q31.c"/>
    <files mask="arm_cfft_radix2_q15.c"/>
    <files mask="arm_cfft_radix2_q31.c"/>
    <files mask="arm_cfft_radix4_f16.c"/>
    <files mask="arm_cfft_radix4_f32.c"/>
    <files mask="arm_cfft_radix4_init_f16.c"/>
    <files mask="arm_cfft_radix4_init_f32.c"/>
    <files mask="arm_cfft_radix4_init_q15.c"/>
    <files mask="arm_cfft_radix4_init_q31.c"/>
    <files mask="arm_cfft_radix4_q15.c"/>
    <files mask="arm_cfft_radix4_q31.c"/>
    <files mask="arm_cfft_radix8_f16.c"/>
    <files mask="arm_cfft_radix8_f32.c"/>
    <files mask="arm_dct4_f32.c"/>
    <files mask="arm_dct4_init_f32.c"/>
    <files mask="arm_dct4_init_q15.c"/>
    <files mask="arm_dct4_init_q31.c"/>
    <files mask="arm_dct4_q15.c"/>
    <files mask="arm_dct4_q31.c"/>
    <files mask="arm_mfcc_f16.c"/>
    <files mask="arm_mfcc_f32.c"/>
    <files mask="arm_mfcc_init_f16.c"/>
    <files mask="arm_mfcc_init_f32.c"/>
    <files mask="arm_mfcc_init_q15.c"/>
    <files mask="arm_mfcc_init_q31.c"/>
    <files mask="arm_mfcc_q15.c"/>
    <files mask="arm_mfcc_q31.c"/>
    <files mask="arm_rfft_f32.c"/>
    <files mask="arm_rfft_fast_f16.c"/>
    <files mask="arm_rfft_fast_f32.c"/>
    <files mask="arm_rfft_fast_f64.c"/>
    <files mask="arm_rfft_fast_init_f16.c"/>
    <files mask="arm_rfft_fast_init_f32.c"/>
    <files mask="arm_rfft_fast_init_f64.c"/>
    <files mask="arm_rfft_init_f32.c"/>
    <files mask="arm_rfft_init_q15.c"/>
    <files mask="arm_rfft_init_q31.c"/>
    <files mask="arm_rfft_q15.c"/>
    <files mask="arm_rfft_q31.c"/>
    <files mask="WindowFunctions.c"/>
    <files mask="arm_bartlett_f32.c"/>
    <files mask="arm_bartlett_f64.c"/>
    <files mask="arm_blackman_harris_92db_f32.c"/>
    <files mask="arm_blackman_harris_92db_f64.c"/>
    <files mask="arm_hamming_f32.c"/>
    <files mask="arm_hamming_f64.c"/>
    <files mask="arm_hanning_f32.c"/>
    <files mask="arm_hanning_f64.c"/>
    <files mask="arm_hft116d_f32.c"/>
    <files mask="arm_hft116d_f64.c"/>
    <files mask="arm_hft144d_f32.c"/>
    <files mask="arm_hft144d_f64.c"/>
    <files mask="arm_hft169d_f32.c"/>
    <files mask="arm_hft169d_f64.c"/>
    <files mask="arm_hft196d_f32.c"/>
    <files mask="arm_hft196d_f64.c"/>
    <files mask="arm_hft223d_f32.c"/>
    <files mask="arm_hft223d_f64.c"/>
    <files mask="arm_hft248d_f32.c"/>
    <files mask="arm_hft248d_f64.c"/>
    <files mask="arm_hft90d_f32.c"/>
    <files mask="arm_hft90d_f64.c"/>
    <files mask="arm_hft95_f32.c"/>
    <files mask="arm_hft95_f64.c"/>
    <files mask="arm_nuttall3_f32.c"/>
    <files mask="arm_nuttall3_f64.c"/>
    <files mask="arm_nuttall3a_f32.c"/>
    <files mask="arm_nuttall3a_f64.c"/>
    <files mask="arm_nuttall3b_f32.c"/>
    <files mask="arm_nuttall3b_f64.c"/>
    <files mask="arm_nuttall4_f32.c"/>
    <files mask="arm_nuttall4_f64.c"/>
    <files mask="arm_nuttall4a_f32.c"/>
    <files mask="arm_nuttall4a_f64.c"/>
    <files mask="arm_nuttall4b_f32.c"/>
    <files mask="arm_nuttall4b_f64.c"/>
    <files mask="arm_nuttall4c_f32.c"/>
    <files mask="arm_nuttall4c_f64.c"/>
    <files mask="arm_welch_f32.c"/>
    <files mask="arm_welch_f64.c"/>
  </source>
  <source relative_path="./" type="c_include">
    <files mask="Driver_CAN.h"/>
    <files mask="Driver_Common.h"/>
    <files mask="Driver_ETH.h"/>
    <files mask="Driver_ETH_MAC.h"/>
    <files mask="Driver_ETH_PHY.h"/>
    <files mask="Driver_Flash.h"/>
    <files mask="Driver_I2C.h"/>
    <files mask="Driver_MCI.h"/>
    <files mask="Driver_NAND.h"/>
    <files mask="Driver_SAI.h"/>
    <files mask="Driver_SPI.h"/>
    <files mask="Driver_Storage.h"/>
    <files mask="Driver_USART.h"/>
    <files mask="Driver_USB.h"/>
    <files mask="Driver_USBD.h"/>
    <files mask="Driver_USBH.h"/>
    <files mask="Driver_WiFi.h"/>
    <files mask="cmsis_vio.h"/>
    <files mask="arm_boolean_distance_template.h"/>
  </source>
  <source relative_path="./" type="other">
    <files mask="cmsis_vio.scvd"/>
    <files mask="CMSIS.yml"/>
    <files mask="CMSIS_v2.yml"/>
    <files mask="CMSIS_v3.yml"/>
    <files mask="README.md"/>
  </source>
  <source relative_path="./" type="doc">
    <files mask="LICENSE.txt"/>
  </source>
</component>-->
    <component id="CMSIS_DSP_Include.LPC865" name="CMSIS_DSP_Library_Header" brief="CMSIS-DSP Library Header" version="1.15.0" full_name="CMSIS DSP Library Header" category="CMSIS/DSP" user_visible="true" type="CMSIS_driver" package_base_path="core/CMSIS/DSP" project_base_path="CMSIS/DSP">
      <dependencies>
        <device_dependency value="LPC865"/>
      </dependencies>
      <source exclude="true" relative_path="./" type="doc">
        <files mask="README.md" hidden="true"/>
      </source>
      <source relative_path="Include" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_common_tables_f16.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_const_structs_f16.h"/>
        <files mask="arm_helium_utils.h"/>
        <files mask="arm_math.h"/>
        <files mask="arm_math_f16.h"/>
        <files mask="arm_math_memory.h"/>
        <files mask="arm_math_types.h"/>
        <files mask="arm_math_types_f16.h"/>
        <files mask="arm_mve_tables.h"/>
        <files mask="arm_mve_tables_f16.h"/>
        <files mask="arm_vec_math.h"/>
        <files mask="arm_vec_math_f16.h"/>
      </source>
      <source relative_path="Include/dsp" type="c_include">
        <files mask="basic_math_functions.h"/>
        <files mask="basic_math_functions_f16.h"/>
        <files mask="bayes_functions.h"/>
        <files mask="bayes_functions_f16.h"/>
        <files mask="complex_math_functions.h"/>
        <files mask="complex_math_functions_f16.h"/>
        <files mask="controller_functions.h"/>
        <files mask="controller_functions_f16.h"/>
        <files mask="debug.h"/>
        <files mask="distance_functions.h"/>
        <files mask="distance_functions_f16.h"/>
        <files mask="fast_math_functions.h"/>
        <files mask="fast_math_functions_f16.h"/>
        <files mask="filtering_functions.h"/>
        <files mask="filtering_functions_f16.h"/>
        <files mask="interpolation_functions.h"/>
        <files mask="interpolation_functions_f16.h"/>
        <files mask="matrix_functions.h"/>
        <files mask="matrix_functions_f16.h"/>
        <files mask="matrix_utils.h"/>
        <files mask="none.h"/>
        <files mask="quaternion_math_functions.h"/>
        <files mask="statistics_functions.h"/>
        <files mask="statistics_functions_f16.h"/>
        <files mask="support_functions.h"/>
        <files mask="support_functions_f16.h"/>
        <files mask="svm_defines.h"/>
        <files mask="svm_functions.h"/>
        <files mask="svm_functions_f16.h"/>
        <files mask="transform_functions.h"/>
        <files mask="transform_functions_f16.h"/>
        <files mask="utils.h"/>
        <files mask="window_functions.h"/>
      </source>
      <source relative_path="PrivateInclude" type="c_include">
        <files mask="arm_sorting.h"/>
        <files mask="arm_vec_fft.h"/>
        <files mask="arm_vec_filtering.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_DSP_Include.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
        <include_path relative_path="PrivateInclude" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_DSP_Source.LPC865" name="CMSIS_DSP_Library_Source" brief="CMSIS-DSP Library" version="1.15.0" full_name="CMSIS DSP Library Source" category="CMSIS/DSP" user_visible="true" type="CMSIS_driver" package_base_path="core/CMSIS/DSP" project_base_path="CMSIS/DSP">
      <defines>
        <define name="DISABLEFLOAT16" value=""/>
      </defines>
      <dependencies>
        <device_dependency value="LPC865"/>
      </dependencies>
      <source exclude="true" relative_path="./" type="doc">
        <files mask="README.md" hidden="true"/>
      </source>
      <source relative_path="Include" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_common_tables_f16.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_const_structs_f16.h"/>
        <files mask="arm_helium_utils.h"/>
        <files mask="arm_math.h"/>
        <files mask="arm_math_f16.h"/>
        <files mask="arm_math_memory.h"/>
        <files mask="arm_math_types.h"/>
        <files mask="arm_math_types_f16.h"/>
        <files mask="arm_mve_tables.h"/>
        <files mask="arm_mve_tables_f16.h"/>
        <files mask="arm_vec_math.h"/>
        <files mask="arm_vec_math_f16.h"/>
      </source>
      <source relative_path="Include/dsp" type="c_include">
        <files mask="basic_math_functions.h"/>
        <files mask="basic_math_functions_f16.h"/>
        <files mask="bayes_functions.h"/>
        <files mask="bayes_functions_f16.h"/>
        <files mask="complex_math_functions.h"/>
        <files mask="complex_math_functions_f16.h"/>
        <files mask="controller_functions.h"/>
        <files mask="controller_functions_f16.h"/>
        <files mask="debug.h"/>
        <files mask="distance_functions.h"/>
        <files mask="distance_functions_f16.h"/>
        <files mask="fast_math_functions.h"/>
        <files mask="fast_math_functions_f16.h"/>
        <files mask="filtering_functions.h"/>
        <files mask="filtering_functions_f16.h"/>
        <files mask="interpolation_functions.h"/>
        <files mask="interpolation_functions_f16.h"/>
        <files mask="matrix_functions.h"/>
        <files mask="matrix_functions_f16.h"/>
        <files mask="matrix_utils.h"/>
        <files mask="none.h"/>
        <files mask="quaternion_math_functions.h"/>
        <files mask="statistics_functions.h"/>
        <files mask="statistics_functions_f16.h"/>
        <files mask="support_functions.h"/>
        <files mask="support_functions_f16.h"/>
        <files mask="svm_defines.h"/>
        <files mask="svm_functions.h"/>
        <files mask="svm_functions_f16.h"/>
        <files mask="transform_functions.h"/>
        <files mask="transform_functions_f16.h"/>
        <files mask="utils.h"/>
        <files mask="window_functions.h"/>
      </source>
      <source relative_path="PrivateInclude" type="c_include">
        <files mask="arm_sorting.h"/>
        <files mask="arm_vec_fft.h"/>
        <files mask="arm_vec_filtering.h"/>
      </source>
      <source relative_path="Source/BasicMathFunctions" type="src">
        <files mask="BasicMathFunctions.c"/>
        <files mask="BasicMathFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/BasicMathFunctions" type="src">
        <files mask="arm_abs_f32.c"/>
        <files mask="arm_abs_f64.c"/>
        <files mask="arm_abs_q15.c"/>
        <files mask="arm_abs_q31.c"/>
        <files mask="arm_abs_q7.c"/>
        <files mask="arm_add_f32.c"/>
        <files mask="arm_add_f64.c"/>
        <files mask="arm_add_q15.c"/>
        <files mask="arm_add_q31.c"/>
        <files mask="arm_add_q7.c"/>
        <files mask="arm_and_u16.c"/>
        <files mask="arm_and_u32.c"/>
        <files mask="arm_and_u8.c"/>
        <files mask="arm_clip_f32.c"/>
        <files mask="arm_clip_q15.c"/>
        <files mask="arm_clip_q31.c"/>
        <files mask="arm_clip_q7.c"/>
        <files mask="arm_dot_prod_f32.c"/>
        <files mask="arm_dot_prod_f64.c"/>
        <files mask="arm_dot_prod_q15.c"/>
        <files mask="arm_dot_prod_q31.c"/>
        <files mask="arm_dot_prod_q7.c"/>
        <files mask="arm_mult_f32.c"/>
        <files mask="arm_mult_f64.c"/>
        <files mask="arm_mult_q15.c"/>
        <files mask="arm_mult_q31.c"/>
        <files mask="arm_mult_q7.c"/>
        <files mask="arm_negate_f32.c"/>
        <files mask="arm_negate_f64.c"/>
        <files mask="arm_negate_q15.c"/>
        <files mask="arm_negate_q31.c"/>
        <files mask="arm_negate_q7.c"/>
        <files mask="arm_not_u16.c"/>
        <files mask="arm_not_u32.c"/>
        <files mask="arm_not_u8.c"/>
        <files mask="arm_offset_f32.c"/>
        <files mask="arm_offset_f64.c"/>
        <files mask="arm_offset_q15.c"/>
        <files mask="arm_offset_q31.c"/>
        <files mask="arm_offset_q7.c"/>
        <files mask="arm_or_u16.c"/>
        <files mask="arm_or_u32.c"/>
        <files mask="arm_or_u8.c"/>
        <files mask="arm_scale_f32.c"/>
        <files mask="arm_scale_f64.c"/>
        <files mask="arm_scale_q15.c"/>
        <files mask="arm_scale_q31.c"/>
        <files mask="arm_scale_q7.c"/>
        <files mask="arm_shift_q15.c"/>
        <files mask="arm_shift_q31.c"/>
        <files mask="arm_shift_q7.c"/>
        <files mask="arm_sub_f32.c"/>
        <files mask="arm_sub_f64.c"/>
        <files mask="arm_sub_q15.c"/>
        <files mask="arm_sub_q31.c"/>
        <files mask="arm_sub_q7.c"/>
        <files mask="arm_xor_u16.c"/>
        <files mask="arm_xor_u32.c"/>
        <files mask="arm_xor_u8.c"/>
        <files mask="arm_abs_f16.c"/>
        <files mask="arm_add_f16.c"/>
        <files mask="arm_clip_f16.c"/>
        <files mask="arm_dot_prod_f16.c"/>
        <files mask="arm_mult_f16.c"/>
        <files mask="arm_negate_f16.c"/>
        <files mask="arm_offset_f16.c"/>
        <files mask="arm_scale_f16.c"/>
        <files mask="arm_sub_f16.c"/>
      </source>
      <source relative_path="Source/BayesFunctions" type="src">
        <files mask="BayesFunctions.c"/>
        <files mask="BayesFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/BayesFunctions" type="src">
        <files mask="arm_gaussian_naive_bayes_predict_f32.c"/>
        <files mask="arm_gaussian_naive_bayes_predict_f16.c"/>
      </source>
      <source relative_path="Source/CommonTables" type="src">
        <files mask="CommonTables.c"/>
        <files mask="CommonTablesF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/CommonTables" type="src">
        <files mask="arm_common_tables.c"/>
        <files mask="arm_const_structs.c"/>
        <files mask="arm_mve_tables.c"/>
        <files mask="arm_common_tables_f16.c"/>
        <files mask="arm_const_structs_f16.c"/>
        <files mask="arm_mve_tables_f16.c"/>
      </source>
      <source relative_path="Source/ComplexMathFunctions" type="src">
        <files mask="ComplexMathFunctions.c"/>
        <files mask="ComplexMathFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/ComplexMathFunctions" type="src">
        <files mask="arm_cmplx_conj_f32.c"/>
        <files mask="arm_cmplx_conj_q15.c"/>
        <files mask="arm_cmplx_conj_q31.c"/>
        <files mask="arm_cmplx_dot_prod_f32.c"/>
        <files mask="arm_cmplx_dot_prod_q15.c"/>
        <files mask="arm_cmplx_dot_prod_q31.c"/>
        <files mask="arm_cmplx_mag_f32.c"/>
        <files mask="arm_cmplx_mag_f64.c"/>
        <files mask="arm_cmplx_mag_fast_q15.c"/>
        <files mask="arm_cmplx_mag_q15.c"/>
        <files mask="arm_cmplx_mag_q31.c"/>
        <files mask="arm_cmplx_mag_squared_f32.c"/>
        <files mask="arm_cmplx_mag_squared_f64.c"/>
        <files mask="arm_cmplx_mag_squared_q15.c"/>
        <files mask="arm_cmplx_mag_squared_q31.c"/>
        <files mask="arm_cmplx_mult_cmplx_f32.c"/>
        <files mask="arm_cmplx_mult_cmplx_f64.c"/>
        <files mask="arm_cmplx_mult_cmplx_q15.c"/>
        <files mask="arm_cmplx_mult_cmplx_q31.c"/>
        <files mask="arm_cmplx_mult_real_f32.c"/>
        <files mask="arm_cmplx_mult_real_q15.c"/>
        <files mask="arm_cmplx_mult_real_q31.c"/>
        <files mask="arm_cmplx_conj_f16.c"/>
        <files mask="arm_cmplx_dot_prod_f16.c"/>
        <files mask="arm_cmplx_mag_f16.c"/>
        <files mask="arm_cmplx_mag_squared_f16.c"/>
        <files mask="arm_cmplx_mult_cmplx_f16.c"/>
        <files mask="arm_cmplx_mult_real_f16.c"/>
      </source>
      <source relative_path="Source/ControllerFunctions" type="src">
        <files mask="ControllerFunctions.c"/>
      </source>
      <source exclude="true" relative_path="Source/ControllerFunctions" type="src">
        <files mask="arm_pid_init_f32.c"/>
        <files mask="arm_pid_init_q15.c"/>
        <files mask="arm_pid_init_q31.c"/>
        <files mask="arm_pid_reset_f32.c"/>
        <files mask="arm_pid_reset_q15.c"/>
        <files mask="arm_pid_reset_q31.c"/>
        <files mask="arm_sin_cos_f32.c"/>
        <files mask="arm_sin_cos_q31.c"/>
      </source>
      <source relative_path="Source/DistanceFunctions" type="src">
        <files mask="DistanceFunctions.c"/>
        <files mask="DistanceFunctionsF16.c"/>
      </source>
      <source relative_path="Source/DistanceFunctions" type="c_include">
        <files mask="arm_boolean_distance_template.h"/>
      </source>
      <source exclude="true" relative_path="Source/DistanceFunctions" type="src">
        <files mask="arm_boolean_distance.c"/>
        <files mask="arm_braycurtis_distance_f32.c"/>
        <files mask="arm_canberra_distance_f32.c"/>
        <files mask="arm_chebyshev_distance_f32.c"/>
        <files mask="arm_chebyshev_distance_f64.c"/>
        <files mask="arm_cityblock_distance_f32.c"/>
        <files mask="arm_cityblock_distance_f64.c"/>
        <files mask="arm_correlation_distance_f32.c"/>
        <files mask="arm_cosine_distance_f32.c"/>
        <files mask="arm_cosine_distance_f64.c"/>
        <files mask="arm_dice_distance.c"/>
        <files mask="arm_dtw_distance_f32.c"/>
        <files mask="arm_dtw_init_window_q7.c"/>
        <files mask="arm_dtw_path_f32.c"/>
        <files mask="arm_euclidean_distance_f32.c"/>
        <files mask="arm_euclidean_distance_f64.c"/>
        <files mask="arm_hamming_distance.c"/>
        <files mask="arm_jaccard_distance.c"/>
        <files mask="arm_jensenshannon_distance_f32.c"/>
        <files mask="arm_kulsinski_distance.c"/>
        <files mask="arm_minkowski_distance_f32.c"/>
        <files mask="arm_rogerstanimoto_distance.c"/>
        <files mask="arm_russellrao_distance.c"/>
        <files mask="arm_sokalmichener_distance.c"/>
        <files mask="arm_sokalsneath_distance.c"/>
        <files mask="arm_yule_distance.c"/>
        <files mask="arm_braycurtis_distance_f16.c"/>
        <files mask="arm_chebyshev_distance_f16.c"/>
        <files mask="arm_canberra_distance_f16.c"/>
        <files mask="arm_cityblock_distance_f16.c"/>
        <files mask="arm_correlation_distance_f16.c"/>
        <files mask="arm_cosine_distance_f16.c"/>
        <files mask="arm_euclidean_distance_f16.c"/>
        <files mask="arm_jensenshannon_distance_f16.c"/>
        <files mask="arm_minkowski_distance_f16.c"/>
      </source>
      <source relative_path="Source/FastMathFunctions" type="src">
        <files mask="FastMathFunctions.c"/>
        <files mask="FastMathFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/FastMathFunctions" type="src">
        <files mask="arm_atan2_f32.c"/>
        <files mask="arm_atan2_q15.c"/>
        <files mask="arm_atan2_q31.c"/>
        <files mask="arm_cos_f32.c"/>
        <files mask="arm_cos_q15.c"/>
        <files mask="arm_cos_q31.c"/>
        <files mask="arm_divide_q15.c"/>
        <files mask="arm_divide_q31.c"/>
        <files mask="arm_sin_f32.c"/>
        <files mask="arm_sin_q15.c"/>
        <files mask="arm_sin_q31.c"/>
        <files mask="arm_sqrt_q15.c"/>
        <files mask="arm_sqrt_q31.c"/>
        <files mask="arm_vexp_f32.c"/>
        <files mask="arm_vexp_f64.c"/>
        <files mask="arm_vlog_f32.c"/>
        <files mask="arm_vlog_f64.c"/>
        <files mask="arm_vlog_q15.c"/>
        <files mask="arm_vlog_q31.c"/>
        <files mask="arm_atan2_f16.c"/>
        <files mask="arm_vexp_f16.c"/>
        <files mask="arm_vinverse_f16.c"/>
        <files mask="arm_vlog_f16.c"/>
      </source>
      <source relative_path="Source/FilteringFunctions" type="src">
        <files mask="FilteringFunctions.c"/>
        <files mask="FilteringFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/FilteringFunctions" type="src">
        <files mask="arm_biquad_cascade_df1_32x64_init_q31.c"/>
        <files mask="arm_biquad_cascade_df1_32x64_q31.c"/>
        <files mask="arm_biquad_cascade_df1_f32.c"/>
        <files mask="arm_biquad_cascade_df1_fast_q15.c"/>
        <files mask="arm_biquad_cascade_df1_fast_q31.c"/>
        <files mask="arm_biquad_cascade_df1_init_f32.c"/>
        <files mask="arm_biquad_cascade_df1_init_q15.c"/>
        <files mask="arm_biquad_cascade_df1_init_q31.c"/>
        <files mask="arm_biquad_cascade_df1_q15.c"/>
        <files mask="arm_biquad_cascade_df1_q31.c"/>
        <files mask="arm_biquad_cascade_df2T_f32.c"/>
        <files mask="arm_biquad_cascade_df2T_f64.c"/>
        <files mask="arm_biquad_cascade_df2T_init_f32.c"/>
        <files mask="arm_biquad_cascade_df2T_init_f64.c"/>
        <files mask="arm_biquad_cascade_stereo_df2T_f32.c"/>
        <files mask="arm_biquad_cascade_stereo_df2T_init_f32.c"/>
        <files mask="arm_conv_f32.c"/>
        <files mask="arm_conv_fast_opt_q15.c"/>
        <files mask="arm_conv_fast_q15.c"/>
        <files mask="arm_conv_fast_q31.c"/>
        <files mask="arm_conv_opt_q15.c"/>
        <files mask="arm_conv_opt_q7.c"/>
        <files mask="arm_conv_partial_f32.c"/>
        <files mask="arm_conv_partial_fast_opt_q15.c"/>
        <files mask="arm_conv_partial_fast_q15.c"/>
        <files mask="arm_conv_partial_fast_q31.c"/>
        <files mask="arm_conv_partial_opt_q15.c"/>
        <files mask="arm_conv_partial_opt_q7.c"/>
        <files mask="arm_conv_partial_q15.c"/>
        <files mask="arm_conv_partial_q31.c"/>
        <files mask="arm_conv_partial_q7.c"/>
        <files mask="arm_conv_q15.c"/>
        <files mask="arm_conv_q31.c"/>
        <files mask="arm_conv_q7.c"/>
        <files mask="arm_correlate_f32.c"/>
        <files mask="arm_correlate_f64.c"/>
        <files mask="arm_correlate_fast_opt_q15.c"/>
        <files mask="arm_correlate_fast_q15.c"/>
        <files mask="arm_correlate_fast_q31.c"/>
        <files mask="arm_correlate_opt_q15.c"/>
        <files mask="arm_correlate_opt_q7.c"/>
        <files mask="arm_correlate_q15.c"/>
        <files mask="arm_correlate_q31.c"/>
        <files mask="arm_correlate_q7.c"/>
        <files mask="arm_fir_decimate_f32.c"/>
        <files mask="arm_fir_decimate_fast_q15.c"/>
        <files mask="arm_fir_decimate_fast_q31.c"/>
        <files mask="arm_fir_decimate_init_f32.c"/>
        <files mask="arm_fir_decimate_init_q15.c"/>
        <files mask="arm_fir_decimate_init_q31.c"/>
        <files mask="arm_fir_decimate_q15.c"/>
        <files mask="arm_fir_decimate_q31.c"/>
        <files mask="arm_fir_f32.c"/>
        <files mask="arm_fir_f64.c"/>
        <files mask="arm_fir_fast_q15.c"/>
        <files mask="arm_fir_fast_q31.c"/>
        <files mask="arm_fir_init_f32.c"/>
        <files mask="arm_fir_init_f64.c"/>
        <files mask="arm_fir_init_q15.c"/>
        <files mask="arm_fir_init_q31.c"/>
        <files mask="arm_fir_init_q7.c"/>
        <files mask="arm_fir_interpolate_f32.c"/>
        <files mask="arm_fir_interpolate_init_f32.c"/>
        <files mask="arm_fir_interpolate_init_q15.c"/>
        <files mask="arm_fir_interpolate_init_q31.c"/>
        <files mask="arm_fir_interpolate_q15.c"/>
        <files mask="arm_fir_interpolate_q31.c"/>
        <files mask="arm_fir_lattice_f32.c"/>
        <files mask="arm_fir_lattice_init_f32.c"/>
        <files mask="arm_fir_lattice_init_q15.c"/>
        <files mask="arm_fir_lattice_init_q31.c"/>
        <files mask="arm_fir_lattice_q15.c"/>
        <files mask="arm_fir_lattice_q31.c"/>
        <files mask="arm_fir_q15.c"/>
        <files mask="arm_fir_q31.c"/>
        <files mask="arm_fir_q7.c"/>
        <files mask="arm_fir_sparse_f32.c"/>
        <files mask="arm_fir_sparse_init_f32.c"/>
        <files mask="arm_fir_sparse_init_q15.c"/>
        <files mask="arm_fir_sparse_init_q31.c"/>
        <files mask="arm_fir_sparse_init_q7.c"/>
        <files mask="arm_fir_sparse_q15.c"/>
        <files mask="arm_fir_sparse_q31.c"/>
        <files mask="arm_fir_sparse_q7.c"/>
        <files mask="arm_iir_lattice_f32.c"/>
        <files mask="arm_iir_lattice_init_f32.c"/>
        <files mask="arm_iir_lattice_init_q15.c"/>
        <files mask="arm_iir_lattice_init_q31.c"/>
        <files mask="arm_iir_lattice_q15.c"/>
        <files mask="arm_iir_lattice_q31.c"/>
        <files mask="arm_levinson_durbin_f32.c"/>
        <files mask="arm_levinson_durbin_q31.c"/>
        <files mask="arm_lms_f32.c"/>
        <files mask="arm_lms_init_f32.c"/>
        <files mask="arm_lms_init_q15.c"/>
        <files mask="arm_lms_init_q31.c"/>
        <files mask="arm_lms_norm_f32.c"/>
        <files mask="arm_lms_norm_init_f32.c"/>
        <files mask="arm_lms_norm_init_q15.c"/>
        <files mask="arm_lms_norm_init_q31.c"/>
        <files mask="arm_lms_norm_q15.c"/>
        <files mask="arm_lms_norm_q31.c"/>
        <files mask="arm_lms_q15.c"/>
        <files mask="arm_lms_q31.c"/>
        <files mask="arm_biquad_cascade_df1_f16.c"/>
        <files mask="arm_biquad_cascade_df1_init_f16.c"/>
        <files mask="arm_biquad_cascade_df2T_f16.c"/>
        <files mask="arm_biquad_cascade_df2T_init_f16.c"/>
        <files mask="arm_biquad_cascade_stereo_df2T_f16.c"/>
        <files mask="arm_biquad_cascade_stereo_df2T_init_f16.c"/>
        <files mask="arm_correlate_f16.c"/>
        <files mask="arm_fir_f16.c"/>
        <files mask="arm_fir_init_f16.c"/>
        <files mask="arm_levinson_durbin_f16.c"/>
      </source>
      <source relative_path="Source/InterpolationFunctions" type="src">
        <files mask="InterpolationFunctions.c"/>
        <files mask="InterpolationFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/InterpolationFunctions" type="src">
        <files mask="arm_bilinear_interp_f32.c"/>
        <files mask="arm_bilinear_interp_q15.c"/>
        <files mask="arm_bilinear_interp_q31.c"/>
        <files mask="arm_bilinear_interp_q7.c"/>
        <files mask="arm_linear_interp_f32.c"/>
        <files mask="arm_linear_interp_q15.c"/>
        <files mask="arm_linear_interp_q31.c"/>
        <files mask="arm_linear_interp_q7.c"/>
        <files mask="arm_spline_interp_f32.c"/>
        <files mask="arm_spline_interp_init_f32.c"/>
        <files mask="arm_bilinear_interp_f16.c"/>
        <files mask="arm_linear_interp_f16.c"/>
      </source>
      <source relative_path="Source/MatrixFunctions" type="src">
        <files mask="MatrixFunctions.c"/>
        <files mask="MatrixFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/MatrixFunctions" type="src">
        <files mask="arm_householder_f32.c"/>
        <files mask="arm_householder_f64.c"/>
        <files mask="arm_mat_add_f32.c"/>
        <files mask="arm_mat_add_q15.c"/>
        <files mask="arm_mat_add_q31.c"/>
        <files mask="arm_mat_cholesky_f32.c"/>
        <files mask="arm_mat_cholesky_f64.c"/>
        <files mask="arm_mat_cmplx_mult_f32.c"/>
        <files mask="arm_mat_cmplx_mult_q15.c"/>
        <files mask="arm_mat_cmplx_mult_q31.c"/>
        <files mask="arm_mat_cmplx_trans_f32.c"/>
        <files mask="arm_mat_cmplx_trans_q15.c"/>
        <files mask="arm_mat_cmplx_trans_q31.c"/>
        <files mask="arm_mat_init_f32.c"/>
        <files mask="arm_mat_init_f64.c"/>
        <files mask="arm_mat_init_q15.c"/>
        <files mask="arm_mat_init_q31.c"/>
        <files mask="arm_mat_inverse_f32.c"/>
        <files mask="arm_mat_inverse_f64.c"/>
        <files mask="arm_mat_ldlt_f32.c"/>
        <files mask="arm_mat_ldlt_f64.c"/>
        <files mask="arm_mat_mult_f32.c"/>
        <files mask="arm_mat_mult_f64.c"/>
        <files mask="arm_mat_mult_fast_q15.c"/>
        <files mask="arm_mat_mult_fast_q31.c"/>
        <files mask="arm_mat_mult_opt_q31.c"/>
        <files mask="arm_mat_mult_q15.c"/>
        <files mask="arm_mat_mult_q31.c"/>
        <files mask="arm_mat_mult_q7.c"/>
        <files mask="arm_mat_qr_f32.c"/>
        <files mask="arm_mat_qr_f64.c"/>
        <files mask="arm_mat_scale_f32.c"/>
        <files mask="arm_mat_scale_q15.c"/>
        <files mask="arm_mat_scale_q31.c"/>
        <files mask="arm_mat_solve_lower_triangular_f32.c"/>
        <files mask="arm_mat_solve_lower_triangular_f64.c"/>
        <files mask="arm_mat_solve_upper_triangular_f32.c"/>
        <files mask="arm_mat_solve_upper_triangular_f64.c"/>
        <files mask="arm_mat_sub_f32.c"/>
        <files mask="arm_mat_sub_f64.c"/>
        <files mask="arm_mat_sub_q15.c"/>
        <files mask="arm_mat_sub_q31.c"/>
        <files mask="arm_mat_trans_f32.c"/>
        <files mask="arm_mat_trans_f64.c"/>
        <files mask="arm_mat_trans_q15.c"/>
        <files mask="arm_mat_trans_q31.c"/>
        <files mask="arm_mat_trans_q7.c"/>
        <files mask="arm_mat_vec_mult_f32.c"/>
        <files mask="arm_mat_vec_mult_q15.c"/>
        <files mask="arm_mat_vec_mult_q31.c"/>
        <files mask="arm_mat_vec_mult_q7.c"/>
        <files mask="arm_householder_f16.c"/>
        <files mask="arm_mat_add_f16.c"/>
        <files mask="arm_mat_cholesky_f16.c"/>
        <files mask="arm_mat_cmplx_mult_f16.c"/>
        <files mask="arm_mat_cmplx_trans_f16.c"/>
        <files mask="arm_mat_init_f16.c"/>
        <files mask="arm_mat_inverse_f16.c"/>
        <files mask="arm_mat_qr_f16.c"/>
        <files mask="arm_mat_mult_f16.c"/>
        <files mask="arm_mat_scale_f16.c"/>
        <files mask="arm_mat_solve_lower_triangular_f16.c"/>
        <files mask="arm_mat_solve_upper_triangular_f16.c"/>
        <files mask="arm_mat_sub_f16.c"/>
        <files mask="arm_mat_trans_f16.c"/>
        <files mask="arm_mat_vec_mult_f16.c"/>
      </source>
      <source relative_path="Source/QuaternionMathFunctions" type="src">
        <files mask="QuaternionMathFunctions.c"/>
      </source>
      <source exclude="true" relative_path="Source/QuaternionMathFunctions" type="src">
        <files mask="arm_quaternion2rotation_f32.c"/>
        <files mask="arm_quaternion_conjugate_f32.c"/>
        <files mask="arm_quaternion_inverse_f32.c"/>
        <files mask="arm_quaternion_normalize_f32.c"/>
        <files mask="arm_quaternion_norm_f32.c"/>
        <files mask="arm_quaternion_product_f32.c"/>
        <files mask="arm_quaternion_product_single_f32.c"/>
        <files mask="arm_rotation2quaternion_f32.c"/>
      </source>
      <source relative_path="Source/SVMFunctions" type="src">
        <files mask="SVMFunctions.c"/>
        <files mask="SVMFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/SVMFunctions" type="src">
        <files mask="arm_svm_linear_init_f32.c"/>
        <files mask="arm_svm_linear_predict_f32.c"/>
        <files mask="arm_svm_polynomial_init_f32.c"/>
        <files mask="arm_svm_polynomial_predict_f32.c"/>
        <files mask="arm_svm_rbf_init_f32.c"/>
        <files mask="arm_svm_rbf_predict_f32.c"/>
        <files mask="arm_svm_sigmoid_init_f32.c"/>
        <files mask="arm_svm_sigmoid_predict_f32.c"/>
        <files mask="arm_svm_linear_init_f16.c"/>
        <files mask="arm_svm_linear_predict_f16.c"/>
        <files mask="arm_svm_polynomial_init_f16.c"/>
        <files mask="arm_svm_polynomial_predict_f16.c"/>
        <files mask="arm_svm_rbf_init_f16.c"/>
        <files mask="arm_svm_rbf_predict_f16.c"/>
        <files mask="arm_svm_sigmoid_init_f16.c"/>
        <files mask="arm_svm_sigmoid_predict_f16.c"/>
      </source>
      <source relative_path="Source/StatisticsFunctions" type="src">
        <files mask="StatisticsFunctions.c"/>
        <files mask="StatisticsFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/StatisticsFunctions" type="src">
        <files mask="arm_absmax_f32.c"/>
        <files mask="arm_absmax_f64.c"/>
        <files mask="arm_absmax_no_idx_f32.c"/>
        <files mask="arm_absmax_no_idx_f64.c"/>
        <files mask="arm_absmax_no_idx_q15.c"/>
        <files mask="arm_absmax_no_idx_q31.c"/>
        <files mask="arm_absmax_no_idx_q7.c"/>
        <files mask="arm_absmax_q15.c"/>
        <files mask="arm_absmax_q31.c"/>
        <files mask="arm_absmax_q7.c"/>
        <files mask="arm_absmin_f32.c"/>
        <files mask="arm_absmin_f64.c"/>
        <files mask="arm_absmin_no_idx_f32.c"/>
        <files mask="arm_absmin_no_idx_f64.c"/>
        <files mask="arm_absmin_no_idx_q15.c"/>
        <files mask="arm_absmin_no_idx_q31.c"/>
        <files mask="arm_absmin_no_idx_q7.c"/>
        <files mask="arm_absmin_q15.c"/>
        <files mask="arm_absmin_q31.c"/>
        <files mask="arm_absmin_q7.c"/>
        <files mask="arm_accumulate_f32.c"/>
        <files mask="arm_accumulate_f64.c"/>
        <files mask="arm_entropy_f32.c"/>
        <files mask="arm_entropy_f64.c"/>
        <files mask="arm_kullback_leibler_f32.c"/>
        <files mask="arm_kullback_leibler_f64.c"/>
        <files mask="arm_logsumexp_dot_prod_f32.c"/>
        <files mask="arm_logsumexp_f32.c"/>
        <files mask="arm_max_f32.c"/>
        <files mask="arm_max_f64.c"/>
        <files mask="arm_max_no_idx_f32.c"/>
        <files mask="arm_max_no_idx_f64.c"/>
        <files mask="arm_max_no_idx_q15.c"/>
        <files mask="arm_max_no_idx_q31.c"/>
        <files mask="arm_max_no_idx_q7.c"/>
        <files mask="arm_max_q15.c"/>
        <files mask="arm_max_q31.c"/>
        <files mask="arm_max_q7.c"/>
        <files mask="arm_mean_f32.c"/>
        <files mask="arm_mean_f64.c"/>
        <files mask="arm_mean_q15.c"/>
        <files mask="arm_mean_q31.c"/>
        <files mask="arm_mean_q7.c"/>
        <files mask="arm_min_f32.c"/>
        <files mask="arm_min_f64.c"/>
        <files mask="arm_min_no_idx_f32.c"/>
        <files mask="arm_min_no_idx_f64.c"/>
        <files mask="arm_min_no_idx_q15.c"/>
        <files mask="arm_min_no_idx_q31.c"/>
        <files mask="arm_min_no_idx_q7.c"/>
        <files mask="arm_min_q15.c"/>
        <files mask="arm_min_q31.c"/>
        <files mask="arm_min_q7.c"/>
        <files mask="arm_mse_f32.c"/>
        <files mask="arm_mse_f64.c"/>
        <files mask="arm_mse_q15.c"/>
        <files mask="arm_mse_q31.c"/>
        <files mask="arm_mse_q7.c"/>
        <files mask="arm_power_f32.c"/>
        <files mask="arm_power_f64.c"/>
        <files mask="arm_power_q15.c"/>
        <files mask="arm_power_q31.c"/>
        <files mask="arm_power_q7.c"/>
        <files mask="arm_rms_f32.c"/>
        <files mask="arm_rms_q15.c"/>
        <files mask="arm_rms_q31.c"/>
        <files mask="arm_std_f32.c"/>
        <files mask="arm_std_f64.c"/>
        <files mask="arm_std_q15.c"/>
        <files mask="arm_std_q31.c"/>
        <files mask="arm_var_f32.c"/>
        <files mask="arm_var_f64.c"/>
        <files mask="arm_var_q15.c"/>
        <files mask="arm_var_q31.c"/>
        <files mask="arm_absmax_f16.c"/>
        <files mask="arm_absmax_no_idx_f16.c"/>
        <files mask="arm_absmin_f16.c"/>
        <files mask="arm_absmin_no_idx_f16.c"/>
        <files mask="arm_accumulate_f16.c"/>
        <files mask="arm_entropy_f16.c"/>
        <files mask="arm_kullback_leibler_f16.c"/>
        <files mask="arm_logsumexp_dot_prod_f16.c"/>
        <files mask="arm_logsumexp_f16.c"/>
        <files mask="arm_max_f16.c"/>
        <files mask="arm_max_no_idx_f16.c"/>
        <files mask="arm_mean_f16.c"/>
        <files mask="arm_min_f16.c"/>
        <files mask="arm_min_no_idx_f16.c"/>
        <files mask="arm_mse_f16.c"/>
        <files mask="arm_power_f16.c"/>
        <files mask="arm_rms_f16.c"/>
        <files mask="arm_std_f16.c"/>
        <files mask="arm_var_f16.c"/>
      </source>
      <source relative_path="Source/SupportFunctions" type="src">
        <files mask="SupportFunctions.c"/>
        <files mask="SupportFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/SupportFunctions" type="src">
        <files mask="arm_barycenter_f32.c"/>
        <files mask="arm_bitonic_sort_f32.c"/>
        <files mask="arm_bubble_sort_f32.c"/>
        <files mask="arm_copy_f32.c"/>
        <files mask="arm_copy_f64.c"/>
        <files mask="arm_copy_q15.c"/>
        <files mask="arm_copy_q31.c"/>
        <files mask="arm_copy_q7.c"/>
        <files mask="arm_f64_to_float.c"/>
        <files mask="arm_f64_to_q31.c"/>
        <files mask="arm_f64_to_q15.c"/>
        <files mask="arm_f64_to_q7.c"/>
        <files mask="arm_fill_f32.c"/>
        <files mask="arm_fill_f64.c"/>
        <files mask="arm_fill_q15.c"/>
        <files mask="arm_fill_q31.c"/>
        <files mask="arm_fill_q7.c"/>
        <files mask="arm_float_to_f64.c"/>
        <files mask="arm_float_to_q15.c"/>
        <files mask="arm_float_to_q31.c"/>
        <files mask="arm_float_to_q7.c"/>
        <files mask="arm_heap_sort_f32.c"/>
        <files mask="arm_insertion_sort_f32.c"/>
        <files mask="arm_merge_sort_f32.c"/>
        <files mask="arm_merge_sort_init_f32.c"/>
        <files mask="arm_q15_to_f64.c"/>
        <files mask="arm_q15_to_float.c"/>
        <files mask="arm_q15_to_q31.c"/>
        <files mask="arm_q15_to_q7.c"/>
        <files mask="arm_q31_to_f64.c"/>
        <files mask="arm_q31_to_float.c"/>
        <files mask="arm_q31_to_q15.c"/>
        <files mask="arm_q31_to_q7.c"/>
        <files mask="arm_q7_to_f64.c"/>
        <files mask="arm_q7_to_float.c"/>
        <files mask="arm_q7_to_q15.c"/>
        <files mask="arm_q7_to_q31.c"/>
        <files mask="arm_quick_sort_f32.c"/>
        <files mask="arm_selection_sort_f32.c"/>
        <files mask="arm_sort_f32.c"/>
        <files mask="arm_sort_init_f32.c"/>
        <files mask="arm_weighted_sum_f32.c"/>
        <files mask="arm_barycenter_f16.c"/>
        <files mask="arm_copy_f16.c"/>
        <files mask="arm_f16_to_float.c"/>
        <files mask="arm_f16_to_q15.c"/>
        <files mask="arm_f16_to_f64.c"/>
        <files mask="arm_f64_to_f16.c"/>
        <files mask="arm_fill_f16.c"/>
        <files mask="arm_float_to_f16.c"/>
        <files mask="arm_q15_to_f16.c"/>
        <files mask="arm_weighted_sum_f16.c"/>
      </source>
      <source relative_path="Source/TransformFunctions" type="src">
        <files mask="TransformFunctions.c"/>
        <files mask="TransformFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/TransformFunctions" type="src">
        <files mask="arm_bitreversal.c"/>
        <files mask="arm_bitreversal2.c"/>
        <files mask="arm_cfft_f32.c"/>
        <files mask="arm_cfft_f64.c"/>
        <files mask="arm_cfft_init_f32.c"/>
        <files mask="arm_cfft_init_f64.c"/>
        <files mask="arm_cfft_init_q15.c"/>
        <files mask="arm_cfft_init_q31.c"/>
        <files mask="arm_cfft_q15.c"/>
        <files mask="arm_cfft_q31.c"/>
        <files mask="arm_cfft_radix2_f32.c"/>
        <files mask="arm_cfft_radix2_init_f32.c"/>
        <files mask="arm_cfft_radix2_init_q15.c"/>
        <files mask="arm_cfft_radix2_init_q31.c"/>
        <files mask="arm_cfft_radix2_q15.c"/>
        <files mask="arm_cfft_radix2_q31.c"/>
        <files mask="arm_cfft_radix4_f32.c"/>
        <files mask="arm_cfft_radix4_init_f32.c"/>
        <files mask="arm_cfft_radix4_init_q15.c"/>
        <files mask="arm_cfft_radix4_init_q31.c"/>
        <files mask="arm_cfft_radix4_q15.c"/>
        <files mask="arm_cfft_radix4_q31.c"/>
        <files mask="arm_cfft_radix8_f32.c"/>
        <files mask="arm_dct4_f32.c"/>
        <files mask="arm_dct4_init_f32.c"/>
        <files mask="arm_dct4_init_q15.c"/>
        <files mask="arm_dct4_init_q31.c"/>
        <files mask="arm_dct4_q15.c"/>
        <files mask="arm_dct4_q31.c"/>
        <files mask="arm_mfcc_f32.c"/>
        <files mask="arm_mfcc_init_f32.c"/>
        <files mask="arm_mfcc_init_q15.c"/>
        <files mask="arm_mfcc_init_q31.c"/>
        <files mask="arm_mfcc_q15.c"/>
        <files mask="arm_mfcc_q31.c"/>
        <files mask="arm_rfft_f32.c"/>
        <files mask="arm_rfft_fast_f32.c"/>
        <files mask="arm_rfft_fast_f64.c"/>
        <files mask="arm_rfft_fast_init_f32.c"/>
        <files mask="arm_rfft_fast_init_f64.c"/>
        <files mask="arm_rfft_init_f32.c"/>
        <files mask="arm_rfft_init_q15.c"/>
        <files mask="arm_rfft_init_q31.c"/>
        <files mask="arm_rfft_q15.c"/>
        <files mask="arm_rfft_q31.c"/>
        <files mask="arm_bitreversal_f16.c"/>
        <files mask="arm_cfft_f16.c"/>
        <files mask="arm_cfft_init_f16.c"/>
        <files mask="arm_cfft_radix2_f16.c"/>
        <files mask="arm_cfft_radix2_init_f16.c"/>
        <files mask="arm_cfft_radix4_f16.c"/>
        <files mask="arm_cfft_radix8_f16.c"/>
        <files mask="arm_mfcc_f16.c"/>
        <files mask="arm_cfft_radix4_init_f16.c"/>
        <files mask="arm_mfcc_init_f16.c"/>
        <files mask="arm_rfft_fast_f16.c"/>
        <files mask="arm_rfft_fast_init_f16.c"/>
      </source>
      <source relative_path="Source/WindowFunctions" type="src">
        <files mask="WindowFunctions.c"/>
      </source>
      <source exclude="true" relative_path="Source/WindowFunctions" type="src">
        <files mask="arm_bartlett_f32.c"/>
        <files mask="arm_bartlett_f64.c"/>
        <files mask="arm_blackman_harris_92db_f32.c"/>
        <files mask="arm_blackman_harris_92db_f64.c"/>
        <files mask="arm_hamming_f32.c"/>
        <files mask="arm_hamming_f64.c"/>
        <files mask="arm_hanning_f32.c"/>
        <files mask="arm_hanning_f64.c"/>
        <files mask="arm_hft116d_f32.c"/>
        <files mask="arm_hft116d_f64.c"/>
        <files mask="arm_hft144d_f32.c"/>
        <files mask="arm_hft144d_f64.c"/>
        <files mask="arm_hft169d_f32.c"/>
        <files mask="arm_hft169d_f64.c"/>
        <files mask="arm_hft196d_f32.c"/>
        <files mask="arm_hft196d_f64.c"/>
        <files mask="arm_hft223d_f32.c"/>
        <files mask="arm_hft223d_f64.c"/>
        <files mask="arm_hft248d_f32.c"/>
        <files mask="arm_hft248d_f64.c"/>
        <files mask="arm_hft90d_f32.c"/>
        <files mask="arm_hft90d_f64.c"/>
        <files mask="arm_hft95_f32.c"/>
        <files mask="arm_hft95_f64.c"/>
        <files mask="arm_nuttall3a_f32.c"/>
        <files mask="arm_nuttall3a_f64.c"/>
        <files mask="arm_nuttall3b_f32.c"/>
        <files mask="arm_nuttall3b_f64.c"/>
        <files mask="arm_nuttall3_f32.c"/>
        <files mask="arm_nuttall3_f64.c"/>
        <files mask="arm_nuttall4a_f32.c"/>
        <files mask="arm_nuttall4a_f64.c"/>
        <files mask="arm_nuttall4b_f32.c"/>
        <files mask="arm_nuttall4b_f64.c"/>
        <files mask="arm_nuttall4c_f32.c"/>
        <files mask="arm_nuttall4c_f64.c"/>
        <files mask="arm_nuttall4_f32.c"/>
        <files mask="arm_nuttall4_f64.c"/>
        <files mask="arm_welch_f32.c"/>
        <files mask="arm_welch_f64.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_DSP_Source.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
        <include_path relative_path="PrivateInclude" type="c_include"/>
        <include_path relative_path="Source/DistanceFunctions" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.USART.LPC865" name="CMSIS_Driver_USART" brief="Access to #include Driver_USART.h file for custom implementation" version="2.4.0" full_name="CMSIS Driver USART" category="CMSIS Driver/USART" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="LPC865"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_USART.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_USART.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_USART.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.CAN.LPC865" name="CMSIS_Driver_CAN" brief="Access to #include Driver_CAN.h file for custom implementation" version="1.3.0" full_name="CMSIS Driver CAN" category="CMSIS Driver/CAN" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="LPC865"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_CAN.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_CAN.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_CAN.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.Ethernet.LPC865" name="CMSIS_Driver_Ethernet_Common" brief="Access to #include Driver_ETH.h file for custom implementation" version="2.2.0" full_name="CMSIS Driver Ethernet Common" category="CMSIS Driver/Ethernet" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="LPC865"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_Common.h"/>
        <files mask="Driver_ETH.h"/>
        <files mask="Driver_ETH_MAC.h"/>
        <files mask="Driver_ETH_PHY.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_ETH_MAC.c"/>
        <files mask="Driver_ETH_PHY.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_Ethernet.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.Ethernet_MAC.LPC865" name="CMSIS_Driver_Ethernet_MAC" brief="Access to #include Driver_ETH_MAC.h file for custom implementation" version="2.2.0" full_name="CMSIS Driver Ethernet MAC" category="CMSIS Driver/Ethernet MAC" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="LPC865"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_ETH.h"/>
        <files mask="Driver_Common.h"/>
        <files mask="Driver_ETH_MAC.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_ETH_MAC.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_Ethernet_MAC.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.Ethernet_PHY.LPC865" name="CMSIS_Driver_Ethernet_PHY" brief="Access to #include Driver_ETH_PHY.h file for custom implementation" version="2.2.0" full_name="CMSIS Driver Ethernet PHY" category="CMSIS Driver/Ethernet PHY" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="LPC865"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_ETH.h"/>
        <files mask="Driver_ETH_PHY.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_ETH_PHY.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_Ethernet_PHY.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.Flash.LPC865" name="CMSIS_Driver_Flash" brief="Access to #include Driver_Flash.h file for custom implementation" version="2.3.0" full_name="CMSIS Driver Flash" category="CMSIS Driver/Flash" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="LPC865"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_Flash.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_Flash.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_Flash.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.I2C.LPC865" name="CMSIS_Driver_I2C" brief="Access to #include Driver_I2C.h file for custom implementation" version="2.4.0" full_name="CMSIS Driver I2C" category="CMSIS Driver/I2C" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="LPC865"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_I2C.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_I2C.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_I2C.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.MCI.LPC865" name="CMSIS_Driver_MCI" brief="Access to #include Driver_MCI.h file for custom implementation" version="2.4.0" full_name="CMSIS Driver MCI" category="CMSIS Driver/MCI" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="LPC865"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_MCI.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_MCI.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_MCI.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.NAND.LPC865" name="CMSIS_Driver_NAND" brief="Access to #include Driver_NAND.h file for custom implementation" version="2.4.0" full_name="CMSIS Driver NAND" category="CMSIS Driver/NAND" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="LPC865"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_NAND.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_NAND.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_NAND.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.SAI.LPC865" name="CMSIS_Driver_SAI" brief="Access to #include Driver_SAI.h file for custom implementation" version="1.2.0" full_name="CMSIS Driver SAI" category="CMSIS Driver/SAI" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="LPC865"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_SAI.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_SAI.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_SAI.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.SPI.LPC865" name="CMSIS_Driver_SPI" brief="Access to #include Driver_SPI.h file for custom implementation" version="2.3.0" full_name="CMSIS Driver SPI" category="CMSIS Driver/SPI" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="LPC865"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_SPI.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_SPI.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_SPI.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.USB_Device.LPC865" name="CMSIS_Driver_USB_Device" brief="Access to #include Driver_USBD.h file for custom implementation" version="2.3.0" full_name="CMSIS Driver USB Device" category="CMSIS Driver/USB Device" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="LPC865"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_USBD.h"/>
        <files mask="Driver_USB.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_USBD.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_USB_Device.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.USB_Host.LPC865" name="CMSIS_Driver_USB_Host" brief="Access to #include Driver_USBH.h file for custom implementation" version="2.3.0" full_name="CMSIS Driver USB Host" category="CMSIS Driver/USB Host" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="LPC865"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_USBH.h"/>
        <files mask="Driver_USB.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_USBH.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_USB_Host.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.WiFi.LPC865" name="CMSIS_Driver_WiFi" brief="Access to #include Driver_WiFi.h file" version="1.1.0" full_name="CMSIS Driver WiFi" category="CMSIS Driver/WiFi" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="LPC865"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_WiFi.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_WiFi.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_WiFi.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Device_API_OSTick.LPC865" name="CMSIS_Device_API_OSTick" brief="Device interrupt controller interface" version="1.0.2" full_name="CMSIS Device API OSTick" category="Device/OS Tick" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/RTOS2/Include" project_base_path="CMSIS/RTOS2/Include">
      <dependencies>
        <device_dependency value="LPC865"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="os_tick.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Device_API_OSTick.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Device_API_RTOS2.LPC865" name="CMSIS_Device_API_RTOS2" brief="CMSIS-RTOS API for Cortex-M, SC000, and SC300" version="2.1.3" full_name="CMSIS Device API RTOS2" category="CMSIS/RTOS2" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/RTOS2/Include" project_base_path="CMSIS/RTOS2/Include">
      <dependencies>
        <device_dependency value="LPC865"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="cmsis_os2.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Device_API_RTOS2.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.utilities.misc_utilities.LPC865" name="misc_utilities" brief="Utilities which is needed for particular toolchain like the SBRK function required to address limitation between HEAP and STACK in GCC toolchain library." version="1.1.1" full_name="Utilities miscellaneous" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="core/utilities/misc_utilities" project_base_path="utilities">
      <dependencies>
        <device_dependency value="LPC865"/>
      </dependencies>
      <source toolchain="armgcc" relative_path="./" type="src">
        <files mask="fsl_sbrk.c"/>
        <files mask="fsl_syscall_stub.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="utilities_misc_utilities.LPC865.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.extension.LPC865" name="FreeRTOS NXP extension" brief="FreeRTOS NXP extension" version="11.0.1" full_name="FreeRTOS NXP extension" category="RTOS/TAD extension" user_visible="false" type="other" package_base_path="rtos/freertos/freertos-kernel" project_base_path="freertos/freertos-kernel">
      <dependencies>
        <device_dependency value="LPC865"/>
      </dependencies>
      <source relative_path="include" type="c_include">
        <files mask="freertos_tasks_c_additions.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_freertos-kernel_extension.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.template.LPC865" name="FreeRTOS configuration template" brief="Template configuration file to be edited by user. Provides also memory allocator (heap_x), change variant if needed." version="11.0.1" full_name="FreeRTOS configuration template" category="RTOS/freertos template" user_visible="false" type="project_template" package_base_path="rtos/freertos/freertos-kernel" project_base_path="freertos/freertos-kernel">
      <dependencies>
        <device_dependency value="LPC865"/>
      </dependencies>
      <source relative_path="template/ARM_CM0" project_relative_path="../../source" config="true" type="c_include" device_cores="core0_LPC865">
        <files mask="FreeRTOSConfig.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_freertos-kernel_template.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="template/ARM_CM0" project_relative_path="../../source" type="c_include" device_cores="core0_LPC865"/>
      </include_paths>
    </component>
    <component id="component.osa_zephyr.LPC865" name="osa_zephyr" brief="Component osa_zephyr" version="1.0.0" full_name="Component osa_zephyr" category="NXP Component/OS Abstraction Layer" user_visible="true" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <device_dependency value="LPC865"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction_zephyr.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_os_abstraction_zephyr.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_osa_zephyr.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.icm42688p.LPC865" name="icm42688p" brief="Driver icm42688p" version="1.0.0" full_name="Driver icm42688p" category="Device/SDK Drivers" user_visible="true" type="board_component" package_base_path="core/components/icm42688p" project_base_path="icm42688p">
      <dependencies>
        <device_dependency value="LPC865"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_icm42688p.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_icm42688p.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_icm42688p.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="project_template.LPC865.LPC865" name="LPC865" brief="Devices_project_template LPC865" version="1.0.0" full_name="Devices_project_template LPC865" category="Board Support/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/devices/LPC865/project_template" project_base_path="board">
      <dependencies>
        <all>
          <component_dependency value="component.miniusart_adapter.LPC865"/>
          <component_dependency value="device.LPC865_startup.LPC865"/>
          <component_dependency value="platform.drivers.clock.LPC865"/>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <component_dependency value="platform.drivers.lpc_gpio.LPC865"/>
          <component_dependency value="platform.drivers.lpc_iocon_lite.LPC865"/>
          <component_dependency value="platform.drivers.lpc_miniusart.LPC865"/>
          <component_dependency value="platform.drivers.power_no_lib.LPC865"/>
          <component_dependency value="platform.drivers.reset.LPC865"/>
          <component_dependency value="platform.drivers.swm.LPC865"/>
          <component_dependency value="platform.utilities.assert_lite.LPC865"/>
          <component_dependency value="utility.debug_console_lite.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" config="true" type="c_include">
        <files mask="clock_config.h"/>
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source relative_path="./" config="true" type="src">
        <files mask="clock_config.c"/>
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="DEVICES_Project_Template_LPC865.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="device.LPC865_startup.LPC865" name="LPC865_startup" brief="Device LPC865_startup" version="1.1.0" full_name="Device LPC865_startup" category="Device/Startup" user_visible="true" type="startup" package_base_path="core/devices/LPC865" project_base_path="startup">
      <dependencies>
        <all>
          <component_dependency value="device.LPC865_system.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source toolchain="armgcc" relative_path="gcc" project_relative_path="./" config="true" type="asm_include">
        <files mask="startup_LPC865.S"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" project_relative_path="./" config="true" type="src_c">
        <files mask="startup_lpc865.c"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" project_relative_path="./" config="true" type="src_cpp">
        <files mask="startup_lpc865.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="device_LPC865_startup.LPC865.cmake" hidden="true"/>
      </source>
    </component>
    <component id="platform.devices.LPC865_linker.LPC865" name="LPC865_linker" brief="Device LPC865_linker" version="1.0.0" full_name="Device LPC865_linker" category="Device/SDK Utilities" user_visible="true" type="linker" package_base_path="core/devices/LPC865" project_base_path="LPC865">
      <dependencies>
        <device_dependency value="LPC865"/>
      </dependencies>
      <source toolchain="armgcc" relative_path="gcc" config="true" type="linker">
        <files mask="LPC865_flash.ld"/>
        <files mask="LPC865_ram.ld"/>
      </source>
    </component>
    <component id="device.LPC865_CMSIS.LPC865" name="LPC865_CMSIS" brief="Device LPC865_cmsis" version="1.0.0" full_name="Device LPC865_cmsis" category="Device/CMSIS" user_visible="true" type="CMSIS_Include" package_base_path="core/devices/LPC865" project_base_path="device">
      <dependencies>
        <all>
          <component_dependency value="CMSIS_Include_core_cm.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_device_registers.h"/>
        <files mask="LPC865.h"/>
        <files mask="LPC865_features.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="device_LPC865_CMSIS.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.clock.LPC865" name="clock" brief="Clock Driver" version="2.1.0" full_name="Clock Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/devices/LPC865/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.power_no_lib.LPC865"/>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_clock.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_clock.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_clock.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.utilities.assert_lite.LPC865" name="assert_lite" brief="Utility assert_lite" version="1.0.0" full_name="Utility assert_lite" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="core/utilities/assert" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.miniusart_adapter.LPC865"/>
          <component_dependency value="utility.debug_console_lite.LPC865"/>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_assert.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_assert.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="utility_assert_lite.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lpc_gpio_adapter.LPC865" name="lpc_gpio_adapter" brief="Component lpc_gpio_adapter" version="1.0.1" full_name="Component lpc_gpio_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/gpio" project_base_path="component/gpio">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.syscon.LPC865"/>
          <component_dependency value="platform.drivers.lpc_gpio.LPC865"/>
          <component_dependency value="platform.drivers.inputmux.LPC865"/>
          <component_dependency value="platform.drivers.pint.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_gpio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lpc_gpio.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_lpc_gpio_adapter.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="utility.debug_console_lite.LPC865" name="debug_console_lite" brief="Utility debug_console_lite" version="1.0.0" full_name="Utility debug_console_lite" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="core/utilities" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.miniusart_adapter.LPC865"/>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <component_dependency value="utility.str.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="debug_console_lite" project_relative_path="./" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source relative_path="debug_console_lite" project_relative_path="./" type="c_include">
        <files mask="fsl_debug_console.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="utility_debug_console_lite.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="debug_console_lite" project_relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_i2c_dma.LPC865" name="i2c_dma" brief="I2C Driver" version="2.1.0" full_name="I2C DMA Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/lpc_i2c" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpc_dma.LPC865"/>
          <component_dependency value="platform.drivers.lpc_i2c.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_i2c_dma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_i2c_dma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lpc_i2c_dma.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="docs.LPC865.LPC865" name="LPC865" brief="Docs lpc865" version="1.0.0" full_name="Docs lpc865" category="docs/LPC865" user_visible="true" type="documentation" package_base_path="core/docs" project_base_path="docs">
      <dependencies>
        <device_dependency value="LPC865"/>
      </dependencies>
      <source relative_path="./" type="doc">
        <files mask="Getting Started with MCUXpresso SDK.pdf"/>
        <files mask="MCUXpresso SDK Release Notes for LPCXpresso860MAX.pdf"/>
        <files mask="Getting Started Guide for using MCUXpresso SDK online.pdf"/>
        <files mask="MCUXpresso SDK ChangeLog_LPC865.pdf"/>
        <files mask="MCUXpresso SDK API Reference Manual_LPC865.pdf"/>
      </source>
      <source relative_path="MCUXpresso SDK API Reference Manual_LPC865" type="doc">
        <files mask="Kinetis_SDK_Block_Diagram.jpg"/>
        <files mask="a00002.html"/>
        <files mask="a00004.html"/>
        <files mask="a00006.html"/>
        <files mask="a00008.html"/>
        <files mask="a00008.js"/>
        <files mask="a00009.html"/>
        <files mask="a00009.js"/>
        <files mask="a00010.html"/>
        <files mask="a00010.js"/>
        <files mask="a00011.html"/>
        <files mask="a00011.js"/>
        <files mask="a00012.html"/>
        <files mask="a00012.js"/>
        <files mask="a00013.html"/>
        <files mask="a00013.js"/>
        <files mask="a00014.html"/>
        <files mask="a00014.js"/>
        <files mask="a00015.html"/>
        <files mask="a00015.js"/>
        <files mask="a00016.html"/>
        <files mask="a00016.js"/>
        <files mask="a00017.html"/>
        <files mask="a00017.js"/>
        <files mask="a00018.html"/>
        <files mask="a00018.js"/>
        <files mask="a00019.html"/>
        <files mask="a00019.js"/>
        <files mask="a00020.html"/>
        <files mask="a00020.js"/>
        <files mask="a00021.html"/>
        <files mask="a00021.js"/>
        <files mask="a00022.html"/>
        <files mask="a00022.js"/>
        <files mask="a00023.html"/>
        <files mask="a00023.js"/>
        <files mask="a00024.html"/>
        <files mask="a00024.js"/>
        <files mask="a00025.html"/>
        <files mask="a00025.js"/>
        <files mask="a00085.html"/>
        <files mask="a00085.js"/>
        <files mask="a00086.html"/>
        <files mask="a00086.js"/>
        <files mask="a00087.html"/>
        <files mask="a00087.js"/>
        <files mask="a00088.html"/>
        <files mask="a00088.js"/>
        <files mask="a00089.html"/>
        <files mask="a00089.js"/>
        <files mask="a00090.html"/>
        <files mask="a00090.js"/>
        <files mask="a00091.html"/>
        <files mask="a00091.js"/>
        <files mask="a00092.html"/>
        <files mask="a00092.js"/>
        <files mask="a00093.html"/>
        <files mask="a00093.js"/>
        <files mask="a00094.html"/>
        <files mask="a00094.js"/>
        <files mask="a00095.html"/>
        <files mask="a00095.js"/>
        <files mask="a00096.html"/>
        <files mask="a00096.js"/>
        <files mask="a00097.html"/>
        <files mask="a00097.js"/>
        <files mask="a00098.html"/>
        <files mask="a00100.html"/>
        <files mask="arm_logo.png"/>
        <files mask="bc_s.png"/>
        <files mask="bdwn.png"/>
        <files mask="closed.png"/>
        <files mask="customdoxygen.css"/>
        <files mask="dir_07b86ffc266b39efa5bbdc0e9fdb330a.html"/>
        <files mask="dir_1331922326a697e1e9aa2323d085217f.html"/>
        <files mask="dir_2056c7e4f19697e9c34230a1d3554841.html"/>
        <files mask="dir_22cbbd27e16e87caa10f675e5ce8b9df.html"/>
        <files mask="dir_2a1dd0fbcd48f3a218ef69b90ad172e4.html"/>
        <files mask="dir_2c6aa0e2bbb2234cdccf71ce9920a505.html"/>
        <files mask="dir_3803c7c40becdc1a8f991e020a425f6b.html"/>
        <files mask="dir_3d87c2df58032c55a697acbe8461844d.html"/>
        <files mask="dir_51c73ba289f0e8fe50ccaff542140dcf.html"/>
        <files mask="dir_597e7b4abe9370d09efc17ad39621bb9.html"/>
        <files mask="dir_5b772dd4d456f495cb29becefd143ee2.html"/>
        <files mask="dir_75214fd834f54a955adf2012023f7050.html"/>
        <files mask="dir_8072ca6cdeca8c705203cc0f896a3705.html"/>
        <files mask="dir_8240c85063e108bd95ef29fb603f8af8.html"/>
        <files mask="dir_83c4f67939b2e50b6dc50fe3fc259b2d.html"/>
        <files mask="dir_8ceb0280e3a6924da33c684985152a52.html"/>
        <files mask="dir_97879f77cafaedc6c6b7c8e7e6bcf419.html"/>
        <files mask="dir_9e0a0b363f74c0efadbd1d6e4c01cac5.html"/>
        <files mask="dir_a2da420fdde962bd10156eaa17d1670b.html"/>
        <files mask="dir_a343a3e9cbb710280ccd0de2056b945d.html"/>
        <files mask="dir_a3e8f1feb8c30c12d24fc9c7995a15c1.html"/>
        <files mask="dir_b81d5557345932eec08d61eeb5afa2f0.html"/>
        <files mask="dir_c48a66ee7236adaad29cf263b70b3b16.html"/>
        <files mask="dir_c5a52a81292cf9a5167198f4f346d6d9.html"/>
        <files mask="dir_c7e9d45afd61725c3e80b2f8c629533d.html"/>
        <files mask="dir_d0b0cea4c1afa919405231e98537b73c.html"/>
        <files mask="dir_d488d26126eac48f68b56f6b2e0f43d9.html"/>
        <files mask="dir_ea982a4a90bbf64c8a612131ad2f0fcb.html"/>
        <files mask="dir_eb78a2695df30cd843f578001c009203.html"/>
        <files mask="dir_f116f7633d12361ea112ee9d6dd3a804.html"/>
        <files mask="doxygen.css"/>
        <files mask="doxygen.png"/>
        <files mask="dynsections.js"/>
        <files mask="fs_logo.gif"/>
        <files mask="ftv2blank.png"/>
        <files mask="ftv2cl.png"/>
        <files mask="ftv2doc.png"/>
        <files mask="ftv2folderclosed.png"/>
        <files mask="ftv2folderopen.png"/>
        <files mask="ftv2lastnode.png"/>
        <files mask="ftv2link.png"/>
        <files mask="ftv2mlastnode.png"/>
        <files mask="ftv2mnode.png"/>
        <files mask="ftv2mo.png"/>
        <files mask="ftv2node.png"/>
        <files mask="ftv2ns.png"/>
        <files mask="ftv2plastnode.png"/>
        <files mask="ftv2pnode.png"/>
        <files mask="ftv2splitbar.png"/>
        <files mask="ftv2vertline.png"/>
        <files mask="index.html"/>
        <files mask="jquery.js"/>
        <files mask="modules.html"/>
        <files mask="modules.js"/>
        <files mask="nav_f.png"/>
        <files mask="nav_g.png"/>
        <files mask="nav_h.png"/>
        <files mask="navtree.css"/>
        <files mask="navtree.js"/>
        <files mask="navtreeindex0.js"/>
        <files mask="navtreeindex1.js"/>
        <files mask="navtreeindex2.js"/>
        <files mask="navtreeindex3.js"/>
        <files mask="navtreeindex4.js"/>
        <files mask="navtreeindex5.js"/>
        <files mask="navtreeindex6.js"/>
        <files mask="navtreeindex7.js"/>
        <files mask="navtreeindex8.js"/>
        <files mask="nxp_logo_small.png"/>
        <files mask="open.png"/>
        <files mask="pages.html"/>
        <files mask="resize.js"/>
        <files mask="sync_off.png"/>
        <files mask="sync_on.png"/>
        <files mask="tab_a.png"/>
        <files mask="tab_b.png"/>
        <files mask="tab_h.png"/>
        <files mask="tab_s.png"/>
        <files mask="tabs.css"/>
      </source>
      <source relative_path="MCUXpresso SDK API Reference Manual_LPC865/search" type="doc">
        <files mask="all_5f.html"/>
        <files mask="all_5f.js"/>
        <files mask="all_61.html"/>
        <files mask="all_61.js"/>
        <files mask="all_62.html"/>
        <files mask="all_62.js"/>
        <files mask="all_63.html"/>
        <files mask="all_63.js"/>
        <files mask="all_64.html"/>
        <files mask="all_64.js"/>
        <files mask="all_65.html"/>
        <files mask="all_65.js"/>
        <files mask="all_66.html"/>
        <files mask="all_66.js"/>
        <files mask="all_67.html"/>
        <files mask="all_67.js"/>
        <files mask="all_68.html"/>
        <files mask="all_68.js"/>
        <files mask="all_69.html"/>
        <files mask="all_69.js"/>
        <files mask="all_6b.html"/>
        <files mask="all_6b.js"/>
        <files mask="all_6c.html"/>
        <files mask="all_6c.js"/>
        <files mask="all_6d.html"/>
        <files mask="all_6d.js"/>
        <files mask="all_6e.html"/>
        <files mask="all_6e.js"/>
        <files mask="all_6f.html"/>
        <files mask="all_6f.js"/>
        <files mask="all_70.html"/>
        <files mask="all_70.js"/>
        <files mask="all_71.html"/>
        <files mask="all_71.js"/>
        <files mask="all_72.html"/>
        <files mask="all_72.js"/>
        <files mask="all_73.html"/>
        <files mask="all_73.js"/>
        <files mask="all_74.html"/>
        <files mask="all_74.js"/>
        <files mask="all_75.html"/>
        <files mask="all_75.js"/>
        <files mask="all_76.html"/>
        <files mask="all_76.js"/>
        <files mask="all_77.html"/>
        <files mask="all_77.js"/>
        <files mask="all_78.html"/>
        <files mask="all_78.js"/>
        <files mask="all_79.html"/>
        <files mask="all_79.js"/>
        <files mask="classes_5f.html"/>
        <files mask="classes_5f.js"/>
        <files mask="close.png"/>
        <files mask="enums_5f.html"/>
        <files mask="enums_5f.js"/>
        <files mask="enums_63.html"/>
        <files mask="enums_63.js"/>
        <files mask="enums_70.html"/>
        <files mask="enums_70.js"/>
        <files mask="enumvalues_6b.html"/>
        <files mask="enumvalues_6b.js"/>
        <files mask="functions_61.html"/>
        <files mask="functions_61.js"/>
        <files mask="functions_63.html"/>
        <files mask="functions_63.js"/>
        <files mask="functions_64.html"/>
        <files mask="functions_64.js"/>
        <files mask="functions_67.html"/>
        <files mask="functions_67.js"/>
        <files mask="functions_69.html"/>
        <files mask="functions_69.js"/>
        <files mask="functions_6d.html"/>
        <files mask="functions_6d.js"/>
        <files mask="functions_70.html"/>
        <files mask="functions_70.js"/>
        <files mask="functions_72.html"/>
        <files mask="functions_72.js"/>
        <files mask="functions_73.html"/>
        <files mask="functions_73.js"/>
        <files mask="functions_75.html"/>
        <files mask="functions_75.js"/>
        <files mask="functions_77.html"/>
        <files mask="functions_77.js"/>
        <files mask="groups_61.html"/>
        <files mask="groups_61.js"/>
        <files mask="groups_63.html"/>
        <files mask="groups_63.js"/>
        <files mask="groups_64.html"/>
        <files mask="groups_64.js"/>
        <files mask="groups_67.html"/>
        <files mask="groups_67.js"/>
        <files mask="groups_69.html"/>
        <files mask="groups_69.js"/>
        <files mask="groups_6c.html"/>
        <files mask="groups_6c.js"/>
        <files mask="groups_6d.html"/>
        <files mask="groups_6d.js"/>
        <files mask="groups_70.html"/>
        <files mask="groups_70.js"/>
        <files mask="groups_72.html"/>
        <files mask="groups_72.js"/>
        <files mask="groups_73.html"/>
        <files mask="groups_73.js"/>
        <files mask="groups_75.html"/>
        <files mask="groups_75.js"/>
        <files mask="groups_77.html"/>
        <files mask="groups_77.js"/>
        <files mask="mag_sel.png"/>
        <files mask="nomatches.html"/>
        <files mask="pages_61.html"/>
        <files mask="pages_61.js"/>
        <files mask="pages_64.html"/>
        <files mask="pages_64.js"/>
        <files mask="pages_69.html"/>
        <files mask="pages_69.js"/>
        <files mask="pages_74.html"/>
        <files mask="pages_74.js"/>
        <files mask="search.css"/>
        <files mask="search.js"/>
        <files mask="search_l.png"/>
        <files mask="search_m.png"/>
        <files mask="search_r.png"/>
        <files mask="typedefs_61.html"/>
        <files mask="typedefs_61.js"/>
        <files mask="typedefs_63.html"/>
        <files mask="typedefs_63.js"/>
        <files mask="typedefs_64.html"/>
        <files mask="typedefs_64.js"/>
        <files mask="typedefs_67.html"/>
        <files mask="typedefs_67.js"/>
        <files mask="typedefs_69.html"/>
        <files mask="typedefs_69.js"/>
        <files mask="typedefs_6d.html"/>
        <files mask="typedefs_6d.js"/>
        <files mask="typedefs_70.html"/>
        <files mask="typedefs_70.js"/>
        <files mask="typedefs_73.html"/>
        <files mask="typedefs_73.js"/>
        <files mask="typedefs_75.html"/>
        <files mask="typedefs_75.js"/>
        <files mask="typedefs_77.html"/>
        <files mask="typedefs_77.js"/>
        <files mask="variables_61.html"/>
        <files mask="variables_61.js"/>
        <files mask="variables_62.html"/>
        <files mask="variables_62.js"/>
        <files mask="variables_63.html"/>
        <files mask="variables_63.js"/>
        <files mask="variables_64.html"/>
        <files mask="variables_64.js"/>
        <files mask="variables_65.html"/>
        <files mask="variables_65.js"/>
        <files mask="variables_66.html"/>
        <files mask="variables_66.js"/>
        <files mask="variables_67.html"/>
        <files mask="variables_67.js"/>
        <files mask="variables_68.html"/>
        <files mask="variables_68.js"/>
        <files mask="variables_69.html"/>
        <files mask="variables_69.js"/>
        <files mask="variables_6c.html"/>
        <files mask="variables_6c.js"/>
        <files mask="variables_6d.html"/>
        <files mask="variables_6d.js"/>
        <files mask="variables_6e.html"/>
        <files mask="variables_6e.js"/>
        <files mask="variables_6f.html"/>
        <files mask="variables_6f.js"/>
        <files mask="variables_70.html"/>
        <files mask="variables_70.js"/>
        <files mask="variables_71.html"/>
        <files mask="variables_71.js"/>
        <files mask="variables_72.html"/>
        <files mask="variables_72.js"/>
        <files mask="variables_73.html"/>
        <files mask="variables_73.js"/>
        <files mask="variables_74.html"/>
        <files mask="variables_74.js"/>
        <files mask="variables_75.html"/>
        <files mask="variables_75.js"/>
        <files mask="variables_76.html"/>
        <files mask="variables_76.js"/>
        <files mask="variables_77.html"/>
        <files mask="variables_77.js"/>
        <files mask="variables_78.html"/>
        <files mask="variables_78.js"/>
        <files mask="variables_79.html"/>
        <files mask="variables_79.js"/>
      </source>
    </component>
    <component id="platform.drivers.inputmux_connections.LPC865" name="inputmux_connections" brief="Inputmux_connections Driver" version="2.0.1" full_name="Inputmux_connections Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/devices/LPC865/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_inputmux_connections.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_inputmux_connections.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.swm_connections.LPC865" name="swm_connections" brief="Swm_connections Driver" version="2.0.1" full_name="Swm_connections Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/devices/LPC865/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_swm_connections.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_swm_connections.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.syscon_connections.LPC865" name="syscon_connections" brief="Syscon_connections Driver" version="2.0.1" full_name="Syscon_connections Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/devices/LPC865/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_syscon_connections.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_syscon_connections.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.power_no_lib.LPC865" name="power_no_lib" brief="Power Driver" version="2.0.0" full_name="power_no_lib" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/devices/LPC865/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_power.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_power.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_power_no_lib.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_NN_Source.LPC865" name="CMSIS_NN_Library_Source" brief="CMSIS-NN Library" version="5.0.0" full_name="CMSIS NN Library Source" category="CMSIS/NN" user_visible="true" type="CMSIS_driver" package_base_path="core/CMSIS/NN" project_base_path="CMSIS/NN">
      <dependencies>
        <all>
          <component_dependency value="CMSIS_DSP_Source.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source exclude="true" relative_path="./" type="doc">
        <files mask="README.md" hidden="true"/>
      </source>
      <source relative_path="Include" type="c_include">
        <files mask="arm_nnfunctions.h"/>
        <files mask="arm_nnsupportfunctions.h"/>
        <files mask="arm_nn_math_types.h"/>
        <files mask="arm_nn_tables.h"/>
        <files mask="arm_nn_types.h"/>
      </source>
      <source relative_path="Include/Internal" type="c_include">
        <files mask="arm_nn_compiler.h"/>
      </source>
      <source relative_path="Source/ActivationFunctions" type="src">
        <files mask="arm_nn_activation_s16.c"/>
        <files mask="arm_relu6_s8.c"/>
        <files mask="arm_relu_q15.c"/>
        <files mask="arm_relu_q7.c"/>
      </source>
      <source relative_path="Source/BasicMathFunctions" type="src">
        <files mask="arm_elementwise_add_s16.c"/>
        <files mask="arm_elementwise_add_s8.c"/>
        <files mask="arm_elementwise_mul_s16.c"/>
        <files mask="arm_elementwise_mul_s16_s8.c"/>
        <files mask="arm_elementwise_mul_s8.c"/>
      </source>
      <source relative_path="Source/ConcatenationFunctions" type="src">
        <files mask="arm_concatenation_s8_w.c"/>
        <files mask="arm_concatenation_s8_x.c"/>
        <files mask="arm_concatenation_s8_y.c"/>
        <files mask="arm_concatenation_s8_z.c"/>
      </source>
      <source relative_path="Source/ConvolutionFunctions" type="src">
        <files mask="arm_convolve_1x1_s4.c"/>
        <files mask="arm_convolve_1x1_s4_fast.c"/>
        <files mask="arm_convolve_1x1_s8.c"/>
        <files mask="arm_convolve_1x1_s8_fast.c"/>
        <files mask="arm_convolve_1_x_n_s8.c"/>
        <files mask="arm_convolve_fast_s16.c"/>
        <files mask="arm_convolve_get_buffer_sizes_s16.c"/>
        <files mask="arm_convolve_get_buffer_sizes_s4.c"/>
        <files mask="arm_convolve_get_buffer_sizes_s8.c"/>
        <files mask="arm_convolve_s16.c"/>
        <files mask="arm_convolve_s4.c"/>
        <files mask="arm_convolve_s8.c"/>
        <files mask="arm_convolve_wrapper_s16.c"/>
        <files mask="arm_convolve_wrapper_s4.c"/>
        <files mask="arm_convolve_wrapper_s8.c"/>
        <files mask="arm_depthwise_conv_3x3_s8.c"/>
        <files mask="arm_depthwise_conv_fast_s16.c"/>
        <files mask="arm_depthwise_conv_get_buffer_sizes_s16.c"/>
        <files mask="arm_depthwise_conv_get_buffer_sizes_s4.c"/>
        <files mask="arm_depthwise_conv_get_buffer_sizes_s8.c"/>
        <files mask="arm_depthwise_conv_s16.c"/>
        <files mask="arm_depthwise_conv_s4.c"/>
        <files mask="arm_depthwise_conv_s4_opt.c"/>
        <files mask="arm_depthwise_conv_s8.c"/>
        <files mask="arm_depthwise_conv_s8_opt.c"/>
        <files mask="arm_depthwise_conv_wrapper_s16.c"/>
        <files mask="arm_depthwise_conv_wrapper_s4.c"/>
        <files mask="arm_depthwise_conv_wrapper_s8.c"/>
        <files mask="arm_nn_depthwise_conv_s8_core.c"/>
        <files mask="arm_nn_mat_mult_kernel_s4_s16.c"/>
        <files mask="arm_nn_mat_mult_kernel_s8_s16.c"/>
        <files mask="arm_nn_mat_mult_s8.c"/>
        <files mask="arm_transpose_conv_get_buffer_sizes_s8.c"/>
        <files mask="arm_transpose_conv_s8.c"/>
      </source>
      <source relative_path="Source/FullyConnectedFunctions" type="src">
        <files mask="arm_fully_connected_get_buffer_sizes_s16.c"/>
        <files mask="arm_fully_connected_get_buffer_sizes_s8.c"/>
        <files mask="arm_fully_connected_s16.c"/>
        <files mask="arm_fully_connected_s4.c"/>
        <files mask="arm_fully_connected_s8.c"/>
        <files mask="arm_vector_sum_s8.c"/>
      </source>
      <source relative_path="Source/LSTMFunctions" type="src">
        <files mask="arm_lstm_unidirectional_s8_s16.c"/>
      </source>
      <source relative_path="Source/NNSupportFunctions" type="src">
        <files mask="arm_nntables.c"/>
        <files mask="arm_nn_depthwise_conv_nt_t_padded_s8.c"/>
        <files mask="arm_nn_depthwise_conv_nt_t_s16.c"/>
        <files mask="arm_nn_depthwise_conv_nt_t_s8.c"/>
        <files mask="arm_nn_lstm_calculate_gate_s8_s16.c"/>
        <files mask="arm_nn_lstm_step_s8_s16.c"/>
        <files mask="arm_nn_lstm_update_cell_state_s16.c"/>
        <files mask="arm_nn_lstm_update_output_s8_s16.c"/>
        <files mask="arm_nn_mat_mult_nt_t_s4.c"/>
        <files mask="arm_nn_mat_mult_nt_t_s8.c"/>
        <files mask="arm_nn_mat_mult_nt_t_s8_s32.c"/>
        <files mask="arm_nn_mat_mul_core_1x_s8.c"/>
        <files mask="arm_nn_mat_mul_core_4x_s8.c"/>
        <files mask="arm_nn_mat_mul_kernel_s16.c"/>
        <files mask="arm_nn_vec_mat_mult_t_s16.c"/>
        <files mask="arm_nn_vec_mat_mult_t_s4.c"/>
        <files mask="arm_nn_vec_mat_mult_t_s8.c"/>
        <files mask="arm_nn_vec_mat_mult_t_svdf_s8.c"/>
        <files mask="arm_nn_vec_mat_mul_result_acc_s8.c"/>
        <files mask="arm_q7_to_q15_with_offset.c"/>
        <files mask="arm_s8_to_s16_unordered_with_offset.c"/>
      </source>
      <source relative_path="Source/PoolingFunctions" type="src">
        <files mask="arm_avgpool_get_buffer_sizes_s16.c"/>
        <files mask="arm_avgpool_get_buffer_sizes_s8.c"/>
        <files mask="arm_avgpool_s16.c"/>
        <files mask="arm_avgpool_s8.c"/>
        <files mask="arm_max_pool_s16.c"/>
        <files mask="arm_max_pool_s8.c"/>
      </source>
      <source relative_path="Source/ReshapeFunctions" type="src">
        <files mask="arm_reshape_s8.c"/>
      </source>
      <source relative_path="Source/SoftmaxFunctions" type="src">
        <files mask="arm_nn_softmax_common_s8.c"/>
        <files mask="arm_softmax_s16.c"/>
        <files mask="arm_softmax_s8.c"/>
        <files mask="arm_softmax_s8_s16.c"/>
        <files mask="arm_softmax_u8.c"/>
      </source>
      <source relative_path="Source/SVDFunctions" type="src">
        <files mask="arm_svdf_get_buffer_sizes_s8.c"/>
        <files mask="arm_svdf_s8.c"/>
        <files mask="arm_svdf_state_s16_s8.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_NN_Source.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_RTOS2_Secure.LPC865" name="CMSIS_RTOS2_Keil_RTX5" brief="CMSIS-RTOS2 RTX5 for Cortex-M, SC000, C300 and Armv8-M (Library)" version="2.1.3" full_name="CMSIS RTOS2 Keil RTX5" category="CMSIS/RTOS2" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/RTOS2" project_base_path="CMSIS/RTOS2">
      <dependencies>
        <all>
          <component_dependency value="CMSIS_Device_API_OSTick.LPC865"/>
          <component_dependency value="CMSIS_Device_API_RTOS2.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="RTX/Source" type="c_include">
        <files mask="rtx_core_c.h"/>
        <files mask="rtx_core_ca.h"/>
        <files mask="rtx_core_cm.h"/>
        <files mask="rtx_lib.h"/>
      </source>
      <source relative_path="RTX/Source" type="src">
        <files mask="rtx_lib.c"/>
      </source>
      <source relative_path="RTX/Include" type="c_include">
        <files mask="rtx_evr.h"/>
        <files mask="rtx_os.h"/>
        <files mask="rtx_def.h"/>
      </source>
      <source relative_path="RTX/Config" type="src">
        <files mask="RTX_Config.c"/>
      </source>
      <source relative_path="RTX/Config" type="c_include">
        <files mask="RTX_Config.h"/>
      </source>
      <source toolchain="armgcc mcuxpresso" relative_path="RTX/Library/GCC" project_relative_path="RTX/Library" type="lib" device_cores="core0_LPC865">
        <files mask="libRTX_CM0.a"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_RTOS2_Secure.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="RTX/Source" type="c_include"/>
        <include_path relative_path="RTX/Include" type="c_include"/>
        <include_path relative_path="RTX/Config" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_RTOS2_NonSecure.LPC865" name="CMSIS_RTOS2_Keil_RTX5_NS" brief="CMSIS-RTOS2 RTX5 for Armv8-M Non-Secure Domain (Library)" version="2.1.3" full_name="CMSIS RTOS2 Keil RTX5 Non Secure" category="CMSIS/RTOS2" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/RTOS2" project_base_path="CMSIS/RTOS2">
      <dependencies>
        <all>
          <component_dependency value="CMSIS_Device_API_OSTick.LPC865"/>
          <component_dependency value="CMSIS_Device_API_RTOS2.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="RTX/Source" type="c_include">
        <files mask="rtx_core_c.h"/>
        <files mask="rtx_core_ca.h"/>
        <files mask="rtx_core_cm.h"/>
        <files mask="rtx_lib.h"/>
      </source>
      <source relative_path="RTX/Source" type="src">
        <files mask="rtx_lib.c"/>
      </source>
      <source relative_path="RTX/Include" type="c_include">
        <files mask="rtx_evr.h"/>
        <files mask="rtx_os.h"/>
        <files mask="rtx_def.h"/>
      </source>
      <source relative_path="RTX/Config" type="src">
        <files mask="RTX_Config.c"/>
      </source>
      <source relative_path="RTX/Config" type="c_include">
        <files mask="RTX_Config.h"/>
      </source>
      <source toolchain="armgcc mcuxpresso" relative_path="RTX/Library/GCC" project_relative_path="RTX/Library" type="lib" device_cores="core0_LPC865">
        <files mask="libRTX_CM0.a"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_RTOS2_NonSecure.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="RTX/Source" type="c_include"/>
        <include_path relative_path="RTX/Include" type="c_include"/>
        <include_path relative_path="RTX/Config" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.common.LPC865" name="common" brief="COMMON Driver" version="2.4.1" full_name="COMMON Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/common" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.reset.LPC865"/>
          <component_dependency value="platform.drivers.clock.LPC865"/>
          <component_dependency value="device.LPC865_CMSIS.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_common.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_common.c"/>
      </source>
      <source relative_path="./" type="src" device_cores="core0_LPC865">
        <files mask="fsl_common_arm.c"/>
      </source>
      <source relative_path="./" type="c_include" device_cores="core0_LPC865">
        <files mask="fsl_common_arm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_common.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="device.LPC865_system.LPC865" name="LPC865_system" brief="Device LPC865_system" version="1.0.0" full_name="Device LPC865_system" category="Device/CMSIS" user_visible="true" type="CMSIS_Include" package_base_path="core/devices/LPC865" project_base_path="device">
      <dependencies>
        <all>
          <component_dependency value="device.LPC865_CMSIS.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="system_LPC865.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="system_LPC865.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="device_LPC865_system.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="utility.str.LPC865" name="utility_str" brief="Utility str" version="1.0.0" full_name="Utility str" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="core/utilities" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="str" project_relative_path="./" type="src">
        <files mask="fsl_str.c"/>
      </source>
      <source relative_path="str" project_relative_path="./" type="c_include">
        <files mask="fsl_str.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="utility_str.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="str" project_relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.LPC865" name="FreeRTOS kernel" brief="FreeRTOS kernel" version="11.0.1" full_name="FreeRTOS kernel" category="RTOS/Core" user_visible="true" type="OS" package_base_path="rtos/freertos/freertos-kernel" project_base_path="freertos/freertos-kernel">
      <defines>
        <define name="SDK_OS_FREE_RTOS" value=""/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="middleware.freertos-kernel.template.LPC865"/>
          <component_dependency value="middleware.freertos-kernel.extension.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="croutine.c"/>
        <files mask="event_groups.c"/>
        <files mask="list.c"/>
        <files mask="queue.c"/>
        <files mask="stream_buffer.c"/>
        <files mask="tasks.c"/>
        <files mask="timers.c"/>
      </source>
      <source relative_path="include" type="c_include">
        <files mask="atomic.h"/>
        <files mask="croutine.h"/>
        <files mask="deprecated_definitions.h"/>
        <files mask="event_groups.h"/>
        <files mask="FreeRTOS.h"/>
        <files mask="list.h"/>
        <files mask="message_buffer.h"/>
        <files mask="mpu_prototypes.h"/>
        <files mask="mpu_syscall_numbers.h"/>
        <files mask="mpu_wrappers.h"/>
        <files mask="newlib-freertos.h"/>
        <files mask="picolibc-freertos.h"/>
        <files mask="portable.h"/>
        <files mask="projdefs.h"/>
        <files mask="queue.h"/>
        <files mask="semphr.h"/>
        <files mask="stack_macros.h"/>
        <files mask="StackMacros.h"/>
        <files mask="stream_buffer.h"/>
        <files mask="task.h"/>
        <files mask="timers.h"/>
      </source>
      <source relative_path="include" type="doc">
        <files mask="stdint.readme"/>
      </source>
      <source toolchain="armgcc mcuxpresso" compiler="compiler_gcc" relative_path="portable/GCC/ARM_CM0" type="src" device_cores="core0_LPC865">
        <files mask="port.c"/>
      </source>
      <source toolchain="armgcc mcuxpresso" compiler="compiler_gcc" relative_path="portable/GCC/ARM_CM0" type="c_include" device_cores="core0_LPC865">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/MemMang" type="other">
        <files mask="ReadMe.url"/>
      </source>
      <source relative_path="portable" type="doc">
        <files mask="readme.txt"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_freertos-kernel.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
        <include_path relative_path="portable/GCC/ARM_CM0" toolchain="armgcc mcuxpresso" type="c_include" device_cores="core0_LPC865"/>
        <include_path relative_path="include" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.heap_1.LPC865" name="FreeRTOS heap 1" brief="FreeRTOS heap 1" version="11.0.1" full_name="FreeRTOS heap 1" category="RTOS/Heap" user_visible="false" type="other" package_base_path="rtos/freertos/freertos-kernel" project_base_path="freertos/freertos-kernel">
      <dependencies>
        <all>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_2.LPC865"/>
          </not>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_3.LPC865"/>
          </not>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_4.LPC865"/>
          </not>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_5.LPC865"/>
          </not>
          <component_dependency value="middleware.freertos-kernel.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_1.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_freertos-kernel_heap_1.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_2.LPC865" name="FreeRTOS heap 2" brief="FreeRTOS heap 2" version="11.0.1" full_name="FreeRTOS heap 2" category="RTOS/Heap" user_visible="false" type="other" package_base_path="rtos/freertos/freertos-kernel" project_base_path="freertos/freertos-kernel">
      <dependencies>
        <all>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_1.LPC865"/>
          </not>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_3.LPC865"/>
          </not>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_4.LPC865"/>
          </not>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_5.LPC865"/>
          </not>
          <component_dependency value="middleware.freertos-kernel.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_2.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_freertos-kernel_heap_2.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_3.LPC865" name="FreeRTOS heap 3" brief="FreeRTOS heap 3" version="11.0.1" full_name="FreeRTOS heap_3" category="RTOS/Heap" user_visible="false" type="other" package_base_path="rtos/freertos/freertos-kernel" project_base_path="freertos/freertos-kernel">
      <dependencies>
        <all>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_1.LPC865"/>
          </not>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_2.LPC865"/>
          </not>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_4.LPC865"/>
          </not>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_5.LPC865"/>
          </not>
          <component_dependency value="middleware.freertos-kernel.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_3.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_freertos-kernel_heap_3.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_4.LPC865" name="FreeRTOS heap 4" brief="FreeRTOS heap 4" version="11.0.1" full_name="FreeRTOS heap 4" category="RTOS/Heap" user_visible="false" type="other" package_base_path="rtos/freertos/freertos-kernel" project_base_path="freertos/freertos-kernel">
      <dependencies>
        <all>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_1.LPC865"/>
          </not>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_2.LPC865"/>
          </not>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_3.LPC865"/>
          </not>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_5.LPC865"/>
          </not>
          <component_dependency value="middleware.freertos-kernel.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_4.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_freertos-kernel_heap_4.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_5.LPC865" name="FreeRTOS heap 5" brief="FreeRTOS heap 5" version="11.0.1" full_name="FreeRTOS heap 5" category="RTOS/Heap" user_visible="false" type="other" package_base_path="rtos/freertos/freertos-kernel" project_base_path="freertos/freertos-kernel">
      <dependencies>
        <all>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_1.LPC865"/>
          </not>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_2.LPC865"/>
          </not>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_3.LPC865"/>
          </not>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_4.LPC865"/>
          </not>
          <component_dependency value="middleware.freertos-kernel.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_5.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_freertos-kernel_heap_5.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.mpu_wrappers_v2.LPC865" name="new V2 FreeRTOS MPU wrappers introduced in V10.6.0" brief="new V2 FreeRTOS MPU wrappers introduced in V10.6.0" version="11.0.1" full_name="new V2 FreeRTOS MPU wrappers introduced in V10.6.0" category="RTOS/MPU wrappers V2" user_visible="false" type="other" package_base_path="rtos/freertos/freertos-kernel" project_base_path="freertos/freertos-kernel">
      <dependencies>
        <all>
          <component_dependency value="middleware.freertos-kernel.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="portable/Common" type="src">
        <files mask="mpu_wrappers_v2.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_freertos-kernel_mpu_wrappers_v2.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.mpu_wrappers.LPC865" name="old FreeRTOS MPU wrappers used before V10.6.0" brief="old FreeRTOS MPU wrappers used before V10.6.0" version="11.0.1" full_name="old FreeRTOS MPU wrappers used before V10.6.0" category="RTOS/MPU wrappers" user_visible="false" type="other" package_base_path="rtos/freertos/freertos-kernel" project_base_path="freertos/freertos-kernel">
      <dependencies>
        <all>
          <component_dependency value="middleware.freertos-kernel.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="portable/Common" type="src">
        <files mask="mpu_wrappers.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_freertos-kernel_mpu_wrappers.cmake" hidden="true"/>
      </source>
    </component>
    <component id="docs.FreeRTOS.LPC865" name="FreeRTOS documentation" brief="FreeRTOS documentation" version="1.0.0" full_name="FreeRTOS documentation" category="docs/FreeRTOS" user_visible="true" type="documentation" package_base_path="core/docs/FreeRTOS" project_base_path="FreeRTOS">
      <dependencies>
        <all>
          <component_dependency value="middleware.freertos-kernel.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="doc">
        <files mask="Getting Started with MCUXpressoSDK and FreeRTOS OS.pdf"/>
      </source>
    </component>
    <component id="component.button.LPC865" name="button" brief="Component button" version="1.0.0" full_name="Component button" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/button" project_base_path="component/button">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <component_dependency value="component.timer_manager.LPC865"/>
          <component_dependency value="component.lpc_gpio_adapter.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_button.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_button.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_button.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.common_task.LPC865" name="common_task" brief="Component common_task" version="1.0.0" full_name="Component common_task" category="NXP Component/OS Abstraction Layer" user_visible="true" type="software_component" package_base_path="core/components/common_task" project_base_path="component/common_task">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <component_dependency value="component.osa.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_common_task.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_common_task.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_common_task.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lpc_crc_adapter.LPC865" name="lpc_crc_adapter" brief="Component lpc_crc_adapter" version="1.0.0" full_name="Component lpc_crc_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/crc" project_base_path="component/crc">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <component_dependency value="platform.drivers.lpc_crc.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_crc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lpc_crc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_lpc_crc_adapter.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.software_crc_adapter.LPC865" name="software_crc_adapter" brief="Component software_crc_adapter" version="1.0.0" full_name="Component software_crc_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/crc" project_base_path="component/crc">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_crc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_software_crc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_software_crc_adapter.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lpc_i2c_adapter.LPC865" name="lpc_i2c_adapter" brief="Component lpc_i2c_adapter" version="1.0.0" full_name="Component lpc_i2c_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/i2c" project_base_path="component/i2c">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <component_dependency value="platform.drivers.lpc_i2c.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_i2c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lpc_i2c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_lpc_i2c_adapter.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.i3c_adapter.LPC865" name="i3c_adapter" brief="Component i3c_adapter" version="1.0.0" full_name="Component i3c_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/i2c" project_base_path="component/i2c">
      <defines>
        <define name="SDK_I3C_BASED_COMPONENT_USED" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <component_dependency value="platform.drivers.i3c.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_i2c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_i3c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_i3c_adapter.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.led.LPC865" name="led" brief="Component led" version="1.0.0" full_name="Component led" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/led" project_base_path="component/led">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <component_dependency value="component.timer_manager.LPC865"/>
          <component_dependency value="component.lpc_gpio_adapter.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_led.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_led.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_led.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lists.LPC865" name="lists" brief="Component lists" version="1.0.0" full_name="Component lists" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/lists" project_base_path="component/lists">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_generic_list.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_generic_list.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_lists.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mem_manager.LPC865" name="mem_manager" brief="Component mem_manager" version="1.0.0" full_name="Component mem_manager" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/mem_manager" project_base_path="component/mem_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <component_dependency value="component.lists.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_mem_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_mem_manager.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_mem_manager.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mem_manager_light.LPC865" name="mem_manager_light" brief="Component mem_manager_light" version="1.0.0" full_name="Component mem_manager_light" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/mem_manager" project_base_path="component/mem_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <component_dependency value="component.lists.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_mem_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_mem_manager_light.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_mem_manager_light.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mem_manager_freertos.LPC865" name="mem_manager_freertos" brief="Component mem_manager_freertos" version="1.0.0" full_name="Component mem_manager_freertos" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/mem_manager" project_base_path="component/mem_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <component_dependency value="middleware.freertos-kernel.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_mem_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_mem_manager_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_mem_manager_freertos.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa_bm.LPC865" name="osa_bm" brief="Component osa_bm" version="1.0.0" full_name="Component osa_bm" category="NXP Component/OS Abstraction Layer" user_visible="true" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <component_dependency value="component.lists.LPC865"/>
          <component_dependency value="component.osa_interface.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction_bm.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_osa_bm.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa_free_rtos.LPC865" name="osa_free_rtos" brief="Component osa_free_rtos" version="1.0.0" full_name="Component osa_free_rtos" category="NXP Component/OS Abstraction Layer" user_visible="true" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="middleware.freertos-kernel.LPC865"/>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <component_dependency value="component.lists.LPC865"/>
          <component_dependency value="component.osa_interface.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction_free_rtos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_os_abstraction_free_rtos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_osa_free_rtos.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa.LPC865" name="osa" brief="Component osa" version="1.0.0" full_name="Component osa" category="NXP Component/OS Abstraction Layer" user_visible="false" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <component_dependency value="component.lists.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source condition="middleware.baremetal.LPC865" relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction_bm.h"/>
      </source>
      <source condition="middleware.baremetal.LPC865" relative_path="./" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <source condition="middleware.freertos-kernel.LPC865" relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction_free_rtos.h"/>
      </source>
      <source condition="middleware.freertos-kernel.LPC865" relative_path="./" type="src">
        <files mask="fsl_os_abstraction_free_rtos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_osa.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa_interface.LPC865" name="osa_interface" brief="Component osa interface" version="1.0.0" full_name="Component osa interface" category="NXP Component/OS Abstraction Layer" user_visible="true" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <component_dependency value="component.lists.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_osa_interface.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.panic.LPC865" name="panic" brief="Component panic" version="1.0.0" full_name="Component panic" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/panic" project_base_path="component/panic">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_panic.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_panic.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_panic.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.pwm_ftm_adapter.LPC865" name="pwm_ftm_adapter" brief="Component pwm_ftm_adapter" version="1.0.0" full_name="Component pwm_ftm_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/pwm" project_base_path="component/pwm">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <component_dependency value="platform.drivers.ftm.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_pwm.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_pwm_ftm.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_pwm_ftm_adapter.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.reset_adapter.LPC865" name="reset_adapter" brief="Component reset_adapter" version="1.0.0" full_name="Component reset_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/reset" project_base_path="component/reset">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_reset.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_reset.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_reset_adapter.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.software_rng_adapter.LPC865" name="software_rng_adapter" brief="Component software_rng_adapter" version="1.0.0" full_name="Component software_rng_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/rng" project_base_path="component/rng">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_rng.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_software_rng.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_software_rng_adapter.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.ftm_adapter.LPC865" name="ftm_adapter" brief="Component ftm_adapter" version="1.0.0" full_name="Component ftm_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <defines>
        <define name="TIMER_PORT_TYPE_FTM" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <component_dependency value="platform.drivers.ftm.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_ftm.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_ftm_adapter.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mrt_adapter.LPC865" name="mrt_adapter" brief="Component mrt_adapter" version="1.0.0" full_name="Component mrt_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <defines>
        <define name="TIMER_PORT_TYPE_MRT" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <component_dependency value="platform.drivers.mrt.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_mrt.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_mrt_adapter.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.timer_manager.LPC865" name="timer_manager" brief="Component timer_manager" version="1.0.0" full_name="Component timer_manager" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/timer_manager" project_base_path="component/timer_manager">
      <dependencies>
        <all>
          <any_of>
            <component_dependency value="component.ftm_adapter.LPC865"/>
            <component_dependency value="component.mrt_adapter.LPC865"/>
          </any_of>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <component_dependency value="component.lists.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_timer_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_timer_manager.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_timer_manager.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.miniusart_adapter.LPC865" name="miniusart_adapter" brief="Component miniusart_adapter" version="1.0.0" full_name="miniusart_adapter" category="Device/SDK Drivers" user_visible="true" type="utilities" package_base_path="core/components/uart" project_base_path="component/uart">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <component_dependency value="platform.drivers.lpc_miniusart.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_miniusart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_miniusart_adapter.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_crc.LPC865" name="lpc_crc" brief="CRC Driver" version="2.1.1" full_name="CRC Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/lpc_crc" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_crc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_crc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lpc_crc.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.iap.LPC865" name="iap" brief="IAP Driver" version="2.0.7" full_name="IAP Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/iap" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_iap.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_iap.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_iap.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.inputmux.LPC865" name="inputmux" brief="INPUTMUX Driver" version="2.0.7" full_name="INPUTMUX Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/inputmux" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <component_dependency value="platform.drivers.inputmux_connections.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_inputmux.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_inputmux.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_inputmux.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_acomp.LPC865" name="lpc_acomp" brief="LPC_ACOMP Driver" version="2.1.0" full_name="LPC_ACOMP Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/lpc_acomp" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_acomp.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_acomp.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lpc_acomp.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_adc.LPC865" name="adc" brief="ADC Driver" version="2.5.3" full_name="ADC Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/lpc_adc" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lpc_adc.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_dma.LPC865" name="dma" brief="DMA Driver" version="2.5.3" full_name="DMA Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/lpc_dma" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_dma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lpc_dma.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_gpio.LPC865" name="gpio" brief="GPIO Driver" version="2.1.7" full_name="GPIO Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/lpc_gpio" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_gpio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_gpio.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lpc_gpio.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_i2c.LPC865" name="i2c" brief="I2C Driver" version="2.1.0" full_name="I2C Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/lpc_i2c" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_i2c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_i2c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lpc_i2c.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_iocon_lite.LPC865" name="iocon" brief="IOCON Driver" version="2.0.2" full_name="IOCON Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/lpc_iocon_lite" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_iocon.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lpc_iocon_lite.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_minispi.LPC865" name="spi" brief="SPI Driver" version="2.0.7" full_name="SPI Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/lpc_minispi" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_spi.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_spi.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lpc_minispi.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_miniusart.LPC865" name="usart" brief="USART Driver" version="2.5.1" full_name="Usart Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/lpc_miniusart" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_usart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_usart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lpc_miniusart.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.mrt.LPC865" name="mrt" brief="MRT Driver" version="2.0.4" full_name="MRT Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/mrt" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_mrt.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_mrt.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_mrt.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.pint.LPC865" name="pint" brief="PINT Driver" version="2.1.13" full_name="PINT Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/pint" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_pint.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_pint.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_pint.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.reset.LPC865" name="reset" brief="Reset Driver" version="2.1.2" full_name="Reset Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/devices/LPC865/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_reset.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_reset.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_reset.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.swm.LPC865" name="swm" brief="SWM Driver" version="2.1.2" full_name="SWM Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/swm" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <component_dependency value="platform.drivers.swm_connections.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_swm.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_swm.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_swm.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.syscon.LPC865" name="syscon" brief="SYSCON Driver" version="2.0.1" full_name="SYSCON Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/syscon" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <component_dependency value="platform.drivers.syscon_connections.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_syscon.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_syscon.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_syscon.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.wkt.LPC865" name="wkt" brief="WKT Driver" version="2.0.2" full_name="WKT Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/wkt" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wkt.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_wkt.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_wkt.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.wwdt.LPC865" name="wwdt" brief="WWDT Driver" version="2.1.9" full_name="WWDT Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/wwdt" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wwdt.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_wwdt.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_wwdt.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.i3c.LPC865" name="i3c" brief="I3C Driver" version="2.12.0" full_name="I3C Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/i3c" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_i3c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_i3c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_i3c.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.i3c_dma.LPC865" name="i3c_dma" brief="I3C DMA Driver" version="2.1.6" full_name="I3C DMA Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/i3c" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.i3c.LPC865"/>
          <component_dependency value="platform.drivers.lpc_dma.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_i3c_dma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_i3c_dma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_i3c_dma.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.i3c_bus.LPC865" name="i3c_bus" brief="Component i3c_bus" version="1.0.1" full_name="Component i3c_bus" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/i3c_bus" project_base_path="component/i3c_bus">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <component_dependency value="component.lists.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_i3c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_i3c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_i3c_bus.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.i3c_bus_adapter.LPC865" name="i3c_bus_adapter" brief="Component i3c_bus_adapter" version="1.1.0" full_name="Component i3c_bus_adapter" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/i3c_bus" project_base_path="component/i3c_bus">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.i3c.LPC865"/>
          <component_dependency value="component.i3c_bus.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_i3c_adapter.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_i3c_adapter.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_i3c_bus_adapter.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.ftm.LPC865" name="ftm" brief="FTM Driver" version="2.6.1" full_name="FTM Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/ftm" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC865"/>
          <device_dependency value="LPC865"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_ftm.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ftm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_ftm.LPC865.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
  </components>
</ksdk:manifest>
