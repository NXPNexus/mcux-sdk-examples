<?xml version="1.0" encoding="UTF-8"?>
<ksdk:manifest xmlns:ksdk="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SDK_2.x_LPCXpresso812MAX" name="LPCXpresso812MAX" brief="This is SDK version 2.9.0 manifest file. It describes the content of the LPCXpresso812MAX and additional settings for tools that support SDK version 2.9.0" format_version="3.8" api_version="2.0.0" configuration="37bbf4eb706f3814bfad8f3a27525c83" xsi:schemaLocation="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd http://nxp.com/mcuxpresso/sdk/sdk_manifest_v3.8.xsd">
  <!--Timestamp (UTC): 2021-06-08 04:50:20.084788-->
  <!--This manifest is generated based on sdk repo commit: 242d157ba29afc4bbd1dac95f382a1491bc2daf5-->
  <defines>
    <define name="CPU_$|package|" value=""/>
    <define name="CPU_$|package|_$|core|" value=""/>
    <define name="CPU_$|package|_$|core_name|" value=""/>
  </defines>
  <ksdk id="MCUXpressoSDK290" name="MCUXpressoSDK290" version="2.9.0"/>
  <compilers>
    <compiler id="compiler_gcc" name="gcc" type="gcc"/>
  </compilers>
  <toolchainSettings>
    <toolchainSetting id="com.nxp.mcuxpresso" name="mcuxpresso" version="11.3.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" toolchain="mcuxpresso">
      <option id="gnu.cpp.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.c.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.cpp.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.cpp.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="gnu.c.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
    </toolchainSetting>
  </toolchainSettings>
  <toolchains>
    <toolchain id="armgcc" name="GCC_ARM_Embedded" version="9.3.1" full_name="GCC ARM Embedded" compiler="compiler_gcc" type="armgcc" vendor="GCC ARM Embedded" vendor_url="http://launchpad.net/gcc-arm-embedded"/>
    <toolchain id="mcuxpresso" name="MCUXpresso_IDE" version="11.3.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" type="mcuxpresso" vendor="NXP Semiconductors" vendor_url="http://www.nxp.com">
      <debug>
        <debug_configuration id="com.crt.advproject.config.exe.release" name="Release Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.release.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.release.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.crt.advproject.config.exe.debug" name="Debug Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.debug.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.debug.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.debug" name="Debug Configuration" probe="Segger"/>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.release" name="Release Configuration" probe="Segger"/>
      </debug>
    </toolchain>
  </toolchains>
  <boards>
    <board id="lpcxpresso812max" name="LPCXpresso812MAX" href="https://www.nxp.com/pip/OM13055" version="1.0.0" package="LPC812M101JDH20">
      <description>LPCXpresso Development Board for the LPC81x family of MCUs</description>
      <image path="core/boards/lpcxpresso812max" type="image">
        <files mask="lpcxpresso812max.png"/>
      </image>
      <examples>
        <example id="lpcxpresso812max_acomp_basic" name="acomp_basic" brief="The ACOMP Basic Example shows the simplest way to use ACOMP driver and help user with a quick start.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the ACOMP's negative channel input. On the postive side, the internal voltage ladder is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user's voltage crosses the internal ladder's output. The endless loop in main() functionwould detect the logic value of comparator's output, and change the LED. The LED would be turned on when the compareoutput is logic one, or turned off when zero." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/acomp" path="examples/lpcxpresso812max/driver_examples/acomp/acomp_basic">
          <external path="examples/lpcxpresso812max/driver_examples/acomp/acomp_basic" type="xml">
            <files mask="acomp_basic_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso812max_acomp_interrupt" name="acomp_interrupt" brief="The ACOMP Interrupt Example shows how to use interrupt with ACOMP driver.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the ACOMP's negative channel input. On the postive side, the internal voltage ladder is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user-defined channel's voltage crosses the internal ladder's output. The change ofcomparator's output would generate the falling and rising edge events with their interrupts enabled. When any ACOMP interrupt happens, the ACOMP's ISR would turn on/off the LED light." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/acomp" path="examples/lpcxpresso812max/driver_examples/acomp/acomp_interrupt">
          <external path="examples/lpcxpresso812max/driver_examples/acomp/acomp_interrupt" type="xml">
            <files mask="acomp_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso812max_crc" name="crc" brief="The CRC Example project is a demonstration program that uses the KSDK software to generate checksumsfor an ASCII string. Several CRC protocols are implemented using the CRC driver API." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/lpcxpresso812max/driver_examples/crc">
          <external path="examples/lpcxpresso812max/driver_examples/crc" type="xml">
            <files mask="crc_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso812max_hello_world" name="hello_world" brief="The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers and repeat what user input. The purpose of this demo is to show how to use the UART, and to provide a simple project for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/lpcxpresso812max/demo_apps/hello_world">
          <external path="examples/lpcxpresso812max/demo_apps/hello_world" type="xml">
            <files mask="hello_world_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso812max_iap_basic" name="iap_basic" brief="The IAP project is a simple demonstration program of the SDK IAP driver. It reads part id, boot code version, unique id and reinvoke ISP. A message a printed on the UART terminal as various bascial iap operations are performed." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/lpcxpresso812max/driver_examples/iap/iap_basic">
          <external path="examples/lpcxpresso812max/driver_examples/iap/iap_basic" type="xml">
            <files mask="iap_basic_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso812max_iap_flash" name="iap_flash" brief="The IAP Flash project is a simple demonstration program of the SDK IAP driver. It erases and programs a portion of on-chip flash memory. A message a printed on the UART terminal as various operations on flash memory are performed." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/lpcxpresso812max/driver_examples/iap/iap_flash">
          <external path="examples/lpcxpresso812max/driver_examples/iap/iap_flash" type="xml">
            <files mask="iap_flash_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso812max_led_blinky" name="led_blinky" brief="The LED Blinky demo application provides a sanity check for the new SDK build environments and board bring up. The LED Blinky demo uses the systick interrupt to realize the function of timing delay. The example takes turns to shine the LED. The purpose of this demo is to provide a simple project for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/lpcxpresso812max/demo_apps/led_blinky">
          <external path="examples/lpcxpresso812max/demo_apps/led_blinky" type="xml">
            <files mask="led_blinky_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso812max_lpc_i2c_interrupt_b2b_transfer_master" name="lpc_i2c_interrupt_b2b_transfer_master" brief="The i2c_interrupt_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/lpcxpresso812max/driver_examples/i2c/interrupt_b2b_transfer/master">
          <external path="examples/lpcxpresso812max/driver_examples/i2c/interrupt_b2b_transfer/master" type="xml">
            <files mask="lpc_i2c_interrupt_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso812max_lpc_i2c_interrupt_b2b_transfer_slave" name="lpc_i2c_interrupt_b2b_transfer_slave" brief="The i2c_interrupt_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with interrupt:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/lpcxpresso812max/driver_examples/i2c/interrupt_b2b_transfer/slave">
          <external path="examples/lpcxpresso812max/driver_examples/i2c/interrupt_b2b_transfer/slave" type="xml">
            <files mask="lpc_i2c_interrupt_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso812max_lpc_i2c_polling_b2b_master" name="lpc_i2c_polling_b2b_master" brief="The i2c_polling_b2b_master example shows how to use i2c driver as master to do board to board transfer using polling method:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/lpcxpresso812max/driver_examples/i2c/polling_b2b/master">
          <external path="examples/lpcxpresso812max/driver_examples/i2c/polling_b2b/master" type="xml">
            <files mask="lpc_i2c_polling_b2b_master_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso812max_lpc_i2c_polling_b2b_slave" name="lpc_i2c_polling_b2b_slave" brief="The i2c_polling_b2b_slave example shows how to use i2c driver as slave to do board to board transfer with a polling master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/lpcxpresso812max/driver_examples/i2c/polling_b2b/slave">
          <external path="examples/lpcxpresso812max/driver_examples/i2c/polling_b2b/slave" type="xml">
            <files mask="lpc_i2c_polling_b2b_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso812max_mrt_example" name="mrt_example" brief="The MRT project is a simple demonstration program of the SDK MRT driver. It sets up the MRThardware block to trigger a periodic interrupt after every 250 milliseconds. When the PIT interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/mrt" path="examples/lpcxpresso812max/driver_examples/mrt">
          <external path="examples/lpcxpresso812max/driver_examples/mrt" type="xml">
            <files mask="mrt_example_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso812max_power_mode_switch_lpc" name="power_mode_switch_lpc" brief="The power_mode_switch application shows the usage of normal power mode control APIs for entering the three kinds oflow power mode: Sleep mode, Deep Sleep mode and Power Down mode, deep power down mode. When the application runs to each low powermode, the device would cut off the power for specific modules to save energy. The device can be also waken up by prepared wakeup source from external event. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware. - In order to meet typedef power consumption of DateSheet manual, Please configure MCU under the following conditions.     鈥? Configure all pins as GPIO with pull-up resistor disabled in the IOCON block.     鈥? Configure GPIO pins as outputs using the GPIO DIR register.     鈥?Write 1 to the GPIO CLR register to drive the outputs LOW.     鈥?All peripherals disabled." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/lpcxpresso812max/demo_apps/power_mode_switch_lpc">
          <external path="examples/lpcxpresso812max/demo_apps/power_mode_switch_lpc" type="xml">
            <files mask="power_mode_switch_lpc_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso812max_sctimer_16bit_counter" name="sctimer_16bit_counter" brief="The SCTimer 16-bit counter project is a demonstration program of the SDK SCTimer driver operation when using the SCTimer counteras two 16-bit counters.The example toggles an output per counter when a match occurs." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/sctimer" path="examples/lpcxpresso812max/driver_examples/sctimer/16bit_counter">
          <external path="examples/lpcxpresso812max/driver_examples/sctimer/16bit_counter" type="xml">
            <files mask="sctimer_16bit_counter_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso812max_sctimer_pwm_with_dutycyle_change" name="sctimer_pwm_with_dutycyle_change" brief="This SCTIMer project is a demonstration program of the SDK SCTimer driver's PWM generation. It sets up a PWM signaland periodically updates the PWM signals dutycycle." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/sctimer" path="examples/lpcxpresso812max/driver_examples/sctimer/pwm_with_dutycyle_change">
          <external path="examples/lpcxpresso812max/driver_examples/sctimer/pwm_with_dutycyle_change" type="xml">
            <files mask="sctimer_pwm_with_dutycyle_change_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso812max_sctimer_simple_pwm" name="sctimer_simple_pwm" brief="The SCTimer project is a simple demonstration program of the SDK SCTimer's driver capabiltiy to generate PWM signals." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/sctimer" path="examples/lpcxpresso812max/driver_examples/sctimer/simple_pwm">
          <external path="examples/lpcxpresso812max/driver_examples/sctimer/simple_pwm" type="xml">
            <files mask="sctimer_simple_pwm_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso812max_spi_interrupt_master" name="spi_interrupt_master" brief="The spi_interrupt_master example shows how to use spi functional API to do interrupt transfer as a master:In this example, the spi instance as master. Master sends a piece of data to slave, receive data from slave,and check if the data master received is correct. This example needs to work with spi_interrupt_slave example. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/lpcxpresso812max/driver_examples/spi/interrupt/master">
          <external path="examples/lpcxpresso812max/driver_examples/spi/interrupt/master" type="xml">
            <files mask="spi_interrupt_master_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso812max_spi_interrupt_slave" name="spi_interrupt_slave" brief="The spi_interrupt_slave example shows how to use spi driver as slave to receive data from master.In this example, one spi instance as slave and another spi instance on other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from master is correct. This example should work with spi_interrupt_master example. And this example should start first. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/lpcxpresso812max/driver_examples/spi/interrupt/slave">
          <external path="examples/lpcxpresso812max/driver_examples/spi/interrupt/slave" type="xml">
            <files mask="spi_interrupt_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso812max_spi_polling_master" name="spi_polling_master" brief="The spi_polling_transfer_master example shows how to use spi driver as master to do board to boardtransfer with polling:In this example, one spi instance as master and another spi instance on othere board as slave. Mastersends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct. This example need to work with spi_polling_transfer_slave example. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/lpcxpresso812max/driver_examples/spi/polling/master">
          <external path="examples/lpcxpresso812max/driver_examples/spi/polling/master" type="xml">
            <files mask="spi_polling_master_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso812max_spi_polling_slave" name="spi_polling_slave" brief="The spi_polling_transfer_slave example shows how to use spi driver as slave to receive data from master.In this example, one spi instance as slave and another spi instance on other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from master is correct. This example should work with spi_polling_transfer_master example. And this example should start first." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/lpcxpresso812max/driver_examples/spi/polling/slave">
          <external path="examples/lpcxpresso812max/driver_examples/spi/polling/slave" type="xml">
            <files mask="spi_polling_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso812max_spi_transfer_interrupt_master" name="spi_transfer_interrupt_master" brief="The spi_interrupt_transfer_master example shows how to use spi driver as master to do board to boardtransfer in interrupt way:In this example, one spi instance as master and another spi instance on othere board as slave. Mastersends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct. This example need to work with spi_interrupt_transfer_slave example. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/lpcxpresso812max/driver_examples/spi/transfer_interrupt/master">
          <external path="examples/lpcxpresso812max/driver_examples/spi/transfer_interrupt/master" type="xml">
            <files mask="spi_transfer_interrupt_master_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso812max_spi_transfer_interrupt_slave" name="spi_transfer_interrupt_slave" brief="The spi_interrupt_transfer_slave example shows how to use spi driver as slave to receive data from master.In this example, one spi instance as slave and another spi instance on other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from master is correct. This example should work with spi_interrupt_transfer_master example. And this example should start first. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/lpcxpresso812max/driver_examples/spi/transfer_interrupt/slave">
          <external path="examples/lpcxpresso812max/driver_examples/spi/transfer_interrupt/slave" type="xml">
            <files mask="spi_transfer_interrupt_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso812max_usart_polling_example" name="usart_polling_example" brief="The uart_polling example shows how to use uart driver in polling way:In this example, one uart instance connect to PC, the board will send back all characters that PCsend to the board. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/usart" path="examples/lpcxpresso812max/driver_examples/usart/polling">
          <external path="examples/lpcxpresso812max/driver_examples/usart/polling" type="xml">
            <files mask="usart_polling_example_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso812max_usart_terminal" name="usart_terminal" brief="This example demonstrate configuration and use of the USART module in interrupt-driven &#10;asynchronous mode on communication with a terminal emulator calling the USART &#10;transactional APIs. USART will echo back every character to terminal emulator, and send&#10;back all received characters once users press [Enter] key.&#10;" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/usart" path="examples/lpcxpresso812max/driver_examples/usart/terminal">
          <external path="examples/lpcxpresso812max/driver_examples/usart/terminal" type="xml">
            <files mask="usart_terminal_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso812max_usart_transfer_interrupt" name="usart_transfer_interrupt" brief="usart_transfer_interrupt" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/usart" path="examples/lpcxpresso812max/driver_examples/usart/transfer_interrupt">
          <external path="examples/lpcxpresso812max/driver_examples/usart/transfer_interrupt" type="xml">
            <files mask="usart_transfer_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso812max_usart_transfer_ring_buffer" name="usart_transfer_ring_buffer" brief="The usart_interrupt_rb_transfer example shows how to use usart driver in interrupt way withRX ring buffer enabled.In this example, one uart instance connect to PC through, the board will send back all charactersthat PC send to the board.Note: The example echo every 8 characters." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/usart" path="examples/lpcxpresso812max/driver_examples/usart/transfer_ring_buffer">
          <external path="examples/lpcxpresso812max/driver_examples/usart/transfer_ring_buffer" type="xml">
            <files mask="usart_transfer_ring_buffer_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso812max_usart_transfer_sync_mode" name="usart_transfer_sync_mode" brief="The usart_interrupt_sync_transfer example shows how to use usart API in synchronous mode:In this example, one usart instance will be selected as master ,and another as slave. The master will send data to slave in polling way, and slave will receive data in nonblocking way.After all data has been received by slave, info will be printed by debug console." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/usart" path="examples/lpcxpresso812max/driver_examples/usart/transfer_sync_mode">
          <external path="examples/lpcxpresso812max/driver_examples/usart/transfer_sync_mode" type="xml">
            <files mask="usart_transfer_sync_mode_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso812max_wkt_example" name="wkt_example" brief="The WKT project is a simple demonstration program of the SDK WKT driver. It sets up the WKT hardware block to trigger a periodic interrupt after loading a counter value and counting down to 0. When the WKT interrupt is triggered a message printed on the UART terminal and the LED is toggled on the board.Depending on the clock source, the WKT can be used for waking up the part from any low power mode or for general-purposetiming." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/wkt" path="examples/lpcxpresso812max/driver_examples/wkt">
          <external path="examples/lpcxpresso812max/driver_examples/wkt" type="xml">
            <files mask="wkt_example_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso812max_wwdt_example" name="wwdt_example" brief="The WDOG Example project is to demonstrate usage of the KSDK wdog driver.In this example,quick test is first implemented to test the wdog.And then after 5 times of refreshing the watchdog, a timeout reset is generated." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/wwdt" path="examples/lpcxpresso812max/driver_examples/wwdt">
          <external path="examples/lpcxpresso812max/driver_examples/wwdt" type="xml">
            <files mask="wwdt_example_v3_8.xml"/>
          </external>
        </example>
      </examples>
    </board>
  </boards>
  <devices>
    <device id="LPC812" name="LPC812" version="1.0.0" full_name="LPC812" family="LPC81x" platform="LPC">
      <description>Low-Cost Microcontrollers (MCUs) based on Arm Cortex-M0+ Core</description>
      <metadataSet>
        <metadata key="vendor" value="NXP"/>
      </metadataSet>
      <core id="core0_LPC812" name="core0" fpu="false" type="cm0plus"/>
      <memory>
        <memoryBlock id="PROGRAM_FLASH_LPC812" name="PROGRAM_FLASH" addr="00000000" size="00004000" type="Flash" access="RO"/>
        <memoryBlock id="SRAM_LPC812" name="SRAM" addr="10000000" size="00000fe0" type="RAM" access="RW"/>
        <memoryBlock id="IAP_SRAM_LPC812" name="IAP_SRAM" addr="10000fe0" size="00000020" type="RAM" access="RW"/>
      </memory>
      <total_memory flash_size_kb="16" ram_size_kb="4"/>
      <package id="LPC812M101JDH20" name="LPC812M101JDH20"/>
      <package id="LPC812M101JDH16" name="LPC812M101JDH16"/>
      <package id="LPC812M101JD20" name="LPC812M101JD20"/>
      <package id="LPC812M101JTB16" name="LPC812M101JTB16"/>
      <evaluation_boards>
        <evaluation_board name="lpcxpresso812max"/>
      </evaluation_boards>
      <toolchainSettings>
        <toolchainSetting id_refs="com.nxp.mcuxpresso">
          <option id="com.crt.advproject.link.cpp.crpenable" type="boolean" user_name="">
            <value>true</value>
          </option>
          <option id="com.crt.advproject.link.crpenable" type="boolean" user_name="">
            <value>true</value>
          </option>
        </toolchainSetting>
      </toolchainSettings>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <params>
            <params id="internal.wiretype.release.LPC812" name="internal.wiretype" value="SWD"/>
            <params id="internal.has_swo.release.LPC812" name="internal.has_swo" value="false"/>
            <params id="vector.catch.release.LPC812" name="vector.catch" value="true"/>
          </params>
          <drivers>
            <driver id_refs="PROGRAM_FLASH_LPC812">
              <driverBinary path="core/devices/LPC812/mcuxpresso" type="binary">
                <files mask="LPC800_16.cfx"/>
              </driverBinary>
            </driver>
          </drivers>
        </debug_configuration>
      </debug_configurations>
      <linkerSettings nature="c_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="mtb_supported" value="true"/>
        <linker property="crp_address" value="0x2fc"/>
      </linkerSettings>
      <linkerSettings nature="cpp_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="mtb_supported" value="true"/>
        <linker property="crp_address" value="0x2fc"/>
      </linkerSettings>
    </device>
  </devices>
  <components>
    <component id="project_template.lpcxpresso812max.LPC812" name="lpcxpresso812max" brief="Board_project_template lpcxpresso812max" version="1.0.0" full_name="Board_project_template lpcxpresso812max" devices="LPC812" device_cores="core0_LPC812" category="Board Support/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/boards/lpcxpresso812max/project_template" project_base_path="board">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpc_miniusart.LPC812"/>
          <component_dependency value="component.miniusart_adapter.LPC812"/>
          <component_dependency value="platform.drivers.power_no_lib.LPC812"/>
          <component_dependency value="platform.drivers.lpc_iocon_lite.LPC812"/>
          <component_dependency value="device.LPC812_startup.LPC812"/>
          <component_dependency value="platform.drivers.common.LPC812"/>
          <component_dependency value="utility.debug_console_lite.LPC812"/>
          <component_dependency value="platform.drivers.clock.LPC812"/>
          <component_dependency value="platform.drivers.lpc_gpio.LPC812"/>
          <component_dependency value="platform.drivers.swm.LPC812"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS.LPC812" name="CMSIS" brief="Cmsis" version="5.6.0" full_name="Cmsis" devices="LPC812" user_visible="true" type="CMSIS" package_base_path="core/CMSIS" project_base_path="./">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.LPC812"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC812"/>
          <component_dependency value="platform.CMSIS_Driver"/>
          <component_dependency value="platform.CMSIS_Driver_Include.CAN_CMSISInclude.LPC812"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.LPC812"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.LPC812"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.LPC812"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Flash_CMSISInclude.LPC812"/>
          <component_dependency value="platform.CMSIS_Driver_Include.I2C_CMSISInclude.LPC812"/>
          <component_dependency value="platform.CMSIS_Driver_Include.MCI_CMSISInclude.LPC812"/>
          <component_dependency value="platform.CMSIS_Driver_Include.NAND_CMSISInclude.LPC812"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SAI_CMSISInclude.LPC812"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SPI_CMSISInclude.LPC812"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USART_CMSISInclude.LPC812"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.LPC812"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.LPC812"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.LPC812"/>
          <component_dependency value="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.LPC812"/>
          <component_dependency value="platform.Include_dsp.LPC812"/>
          <component_dependency value="platform.CMSIS_Driver_Include.GPIO_CMSISInclude.LPC812"/>
        </all>
      </dependencies>
      <source relative_path="./" project_relative_path="CMSIS" type="doc">
        <files mask="LICENSE.txt"/>
      </source>
      <source relative_path="Include" type="c_include">
        <files mask="cmsis_compiler.h"/>
        <files mask="arm_math.h"/>
        <files mask="core_cm35p.h"/>
        <files mask="core_cm4.h"/>
        <files mask="core_cm0plus.h"/>
        <files mask="mpu_armv8.h"/>
        <files mask="arm_common_tables.h"/>
        <files mask="core_dsp.h"/>
        <files mask="core_cm1.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="core_cm7.h"/>
        <files mask="tz_context.h"/>
        <files mask="cmsis_armcc.h"/>
        <files mask="core_sc000.h"/>
        <files mask="core_armv8mml.h"/>
        <files mask="core_sc300.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="core_cm0.h"/>
        <files mask="core_armv8mbl.h"/>
        <files mask="core_cm33.h"/>
        <files mask="mpu_armv7.h"/>
        <files mask="core_armv81mml.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="core_cm3.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="core_cm23.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver" name="CMSIS_Driver" brief="Cmsis_driver" version="2.7.1" full_name="Cmsis_driver" user_visible="true" type="CMSIS" package_base_path="core/CMSIS/Driver/DriverTemplates" project_base_path="Driver/DriverTemplates">
      <source relative_path="./" type="src">
        <files mask="Driver_SPI.c"/>
        <files mask="Driver_Flash.c"/>
        <files mask="Driver_USART.c"/>
        <files mask="Driver_SAI.c"/>
        <files mask="Driver_Storage.c"/>
        <files mask="Driver_I2C.c"/>
        <files mask="Driver_ETH_PHY.c"/>
        <files mask="Driver_ETH_MAC.c"/>
        <files mask="Driver_CAN.c"/>
        <files mask="Driver_MCI.c"/>
        <files mask="Driver_USBH.c"/>
        <files mask="Driver_USBD.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.CAN_CMSISInclude.LPC812" name="CAN" brief="Cmsis_driver_include can" version="1.2.0" full_name="Cmsis_driver_include can" devices="LPC812" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_CAN.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC812" name="Common" brief="Cmsis_driver_include common" version="2.7.1" full_name="Cmsis_driver_include common" devices="LPC812" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <source relative_path="./" type="c_include">
        <files mask="Driver_Common.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.LPC812" name="Ethernet" brief="Cmsis_driver_include ethernet" version="2.1.0" full_name="Cmsis_driver_include ethernet" devices="LPC812" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_ETH.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.LPC812" name="Ethernet_MAC" brief="Cmsis_driver_include ethernet_mac" version="2.1.0" full_name="Cmsis_driver_include ethernet_mac" devices="LPC812" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_ETH_MAC.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.LPC812" name="Ethernet_PHY" brief="Cmsis_driver_include ethernet_phy" version="2.1.0" full_name="Cmsis_driver_include ethernet_phy" devices="LPC812" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_ETH_PHY.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Flash_CMSISInclude.LPC812" name="Flash" brief="Cmsis_driver_include flash" version="2.2.0" full_name="Cmsis_driver_include flash" devices="LPC812" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_Flash.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.GPIO_CMSISInclude.LPC812" name="GPIO" brief="Cmsis_driver_include gpio" version="2.0.0" full_name="Cmsis_driver_include gpio" devices="LPC812" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_GPIO.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.I2C_CMSISInclude.LPC812" name="I2C" brief="Cmsis_driver_include i2c" version="2.3.0" full_name="Cmsis_driver_include i2c" devices="LPC812" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_I2C.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.MCI_CMSISInclude.LPC812" name="MCI" brief="Cmsis_driver_include mci" version="2.3.0" full_name="Cmsis_driver_include mci" devices="LPC812" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_MCI.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.NAND_CMSISInclude.LPC812" name="NAND" brief="Cmsis_driver_include nand" version="2.3.0" full_name="Cmsis_driver_include nand" devices="LPC812" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_NAND.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.SAI_CMSISInclude.LPC812" name="SAI" brief="Cmsis_driver_include sai" version="1.1.0" full_name="Cmsis_driver_include sai" devices="LPC812" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_SAI.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.SPI_CMSISInclude.LPC812" name="SPI" brief="Cmsis_driver_include spi" version="2.2.0" full_name="Cmsis_driver_include spi" devices="LPC812" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_SPI.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USART_CMSISInclude.LPC812" name="USART" brief="Cmsis_driver_include usart" version="2.3.0" full_name="Cmsis_driver_include usart" devices="LPC812" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USART.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_CMSISInclude.LPC812" name="USB" brief="Cmsis_driver_include usb" version="2.2.0" full_name="Cmsis_driver_include usb" devices="LPC812" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USB.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.LPC812" name="USB_Device" brief="Cmsis_driver_include usb_device" version="2.2.0" full_name="Cmsis_driver_include usb_device" devices="LPC812" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USBD.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.LPC812" name="USB_Host" brief="Cmsis_driver_include usb_host" version="2.2.0" full_name="Cmsis_driver_include usb_host" devices="LPC812" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USBH.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.LPC812" name="WiFi" brief="Cmsis_driver_include wifi" version="1.0.0" full_name="Cmsis_driver_include wifi" devices="LPC812" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_WiFi.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.Include_common.LPC812" name="CMSIS_Include_common" brief="Cmsis_include_common" version="5.3.0" full_name="Cmsis_include_common" devices="LPC812" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Include" project_base_path="CMSIS">
      <source relative_path="./" type="c_include">
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="cmsis_iccarm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="CMSIS_Include_common_LPC812.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.Include_core_cm0plus.LPC812" name="CMSIS_Include_core_cm0plus" brief="Cmsis_include_core_cm0plus" version="5.3.0" full_name="Cmsis_include_core_cm0plus" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Include" project_base_path="CMSIS">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.LPC812"/>
          <component_dependency value="platform.Include_dsp.LPC812"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="core_cm0plus.h"/>
        <files mask="mpu_armv7.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="CMSIS_Include_core_cm0plus_LPC812.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.Include_dsp.LPC812" name="CMSIS_Include_dsp" brief="Cmsis_include_dsp" version="1.7.0" full_name="Cmsis_include_dsp" devices="LPC812" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Include" project_base_path="CMSIS">
      <source relative_path="./" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="CMSIS_Include_dsp_LPC812.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="COPY_BSD_License.LPC812" name="COPY_BSD_License" brief="COPY of BSD-3-Clause license" version="1.0.0" full_name="COPY of BSD-3-Clause license" devices="LPC812" user_visible="true" type="other" package_base_path="core/./" project_base_path="src">
      <source relative_path="./" type="other">
        <files mask="COPYING-BSD-3"/>
      </source>
    </component>
    <component id="project_template.LPC812.LPC812" name="LPC812" brief="Devices_project_template LPC812" version="1.0.0" full_name="Devices_project_template LPC812" devices="LPC812" device_cores="core0_LPC812" category="Board Support/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/devices/LPC812/project_template" project_base_path="board">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpc_miniusart.LPC812"/>
          <component_dependency value="component.miniusart_adapter.LPC812"/>
          <component_dependency value="platform.drivers.power_no_lib.LPC812"/>
          <component_dependency value="platform.drivers.lpc_iocon_lite.LPC812"/>
          <component_dependency value="device.LPC812_startup.LPC812"/>
          <component_dependency value="platform.drivers.common.LPC812"/>
          <component_dependency value="utility.debug_console_lite.LPC812"/>
          <component_dependency value="platform.drivers.clock.LPC812"/>
          <component_dependency value="platform.drivers.lpc_gpio.LPC812"/>
          <component_dependency value="platform.drivers.swm.LPC812"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="tools.LPC812" name="cmake_toolchain" brief="Cmake_toolchain" version="1.0.0" full_name="Cmake_toolchain" devices="LPC812" user_visible="true" type="other" package_base_path="core/tools/cmake_toolchain_files" project_base_path="cmake_toolchain_files">
      <source relative_path="./" type="script">
        <files mask="armgcc.cmake"/>
        <files mask="xcc.cmake"/>
        <files mask="armgcc_force_cpp.cmake"/>
      </source>
    </component>
    <component id="component.common_task.LPC812" name="common_task" brief="Component common_task" version="1.0.0" full_name="Component common_task" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="software_component" package_base_path="core/components/common_task" project_base_path="component/common_task">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC812"/>
          <component_dependency value="component.osa.LPC812"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_common_task.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_common_task.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lists.LPC812" name="lists" brief="Component lists" version="1.0.0" full_name="Component lists" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="software_component" package_base_path="core/components/lists" project_base_path="component/lists">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_generic_list.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_generic_list.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lpc_crc_adapter.LPC812" name="lpc_crc_adapter" brief="Component lpc_crc_adapter" version="1.0.0" full_name="Component lpc_crc_adapter" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="abstraction_layer" package_base_path="core/components/crc" project_base_path="component/crc">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC812"/>
          <component_dependency value="platform.drivers.lpc_crc.LPC812"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_crc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lpc_crc.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mem_manager.LPC812" name="mem_manager" brief="Component mem_manager" version="1.0.0" full_name="Component mem_manager" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="software_component" package_base_path="core/components/mem_manager" project_base_path="component/mem_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC812"/>
          <component_dependency value="component.lists.LPC812"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_mem_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_mem_manager.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mem_manager_light.LPC812" name="mem_manager_light" brief="Component mem_manager_light" version="1.0.0" full_name="Component mem_manager_light" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="software_component" package_base_path="core/components/mem_manager" project_base_path="component/mem_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC812"/>
          <component_dependency value="component.lists.LPC812"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_mem_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_mem_manager_light.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.miniusart_adapter.LPC812" name="miniusart_adapter" brief="Component miniusart_adapter" version="1.0.0" full_name="miniusart_adapter" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="utilities" package_base_path="core/components/uart" project_base_path="component/uart">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC812"/>
          <component_dependency value="platform.drivers.lpc_miniusart.LPC812"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_miniusart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_miniusart_adapter_LPC812.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mrt_adapter.LPC812" name="mrt_adapter" brief="Component mrt_adapter" version="1.0.0" full_name="Component mrt_adapter" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC812"/>
          <component_dependency value="platform.drivers.mrt.LPC812"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_mrt.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa.LPC812" name="osa" brief="Component osa" version="1.0.0" full_name="Component osa" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC812"/>
          <component_dependency value="component.lists.LPC812"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source condition="middleware.baremetal.LPC812" relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction_bm.h"/>
      </source>
      <source condition="middleware.baremetal.LPC812" relative_path="./" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa_bm.LPC812" name="osa_bm" brief="Component osa_bm" version="1.0.0" full_name="Component osa_bm" devices="LPC812" device_cores="core0_LPC812" user_visible="false" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC812"/>
          <component_dependency value="component.lists.LPC812"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_bm.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.software_crc_adapter.LPC812" name="software_crc_adapter" brief="Component software_crc_adapter" version="1.0.0" full_name="Component software_crc_adapter" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="abstraction_layer" package_base_path="core/components/crc" project_base_path="component/crc">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_crc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_software_crc.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.software_rng_adapter.LPC812" name="software_rng_adapter" brief="Component software_rng_adapter" version="1.0.0" full_name="Component software_rng_adapter" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="abstraction_layer" package_base_path="core/components/rng" project_base_path="component/rng">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_rng.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_software_rng.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.timer_manager.LPC812" name="timer_manager" brief="Component timer_manager" version="1.0.0" full_name="Component timer_manager" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="software_component" package_base_path="core/components/timer_manager" project_base_path="component/timer_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC812"/>
          <component_dependency value="component.lists.LPC812"/>
          <component_dependency value="component.mrt_adapter.LPC812"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_timer_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_timer_manager.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="device.LPC812_CMSIS.LPC812" name="LPC812_CMSIS" brief="Device LPC812_cmsis" version="1.0.0" full_name="Device LPC812_cmsis" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="CMSIS_Include" package_base_path="core/devices/LPC812" project_base_path="device">
      <dependencies>
        <component_dependency value="platform.Include_core_cm0plus.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_device_registers.h"/>
        <files mask="LPC812.h"/>
        <files mask="LPC812_features.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="device_LPC812_CMSIS_LPC812.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="device.LPC812_debugger.LPC812" name="LPC812_debugger" brief="Device LPC812_debugger" version="1.0.0" full_name="Device LPC812_debugger" devices="LPC812" user_visible="true" type="debugger" package_base_path="core/devices/LPC812" project_base_path="LPC812">
      <source relative_path="./" type="xml">
        <files mask="LPC812.xml"/>
      </source>
    </component>
    <component id="platform.devices.LPC812_linker.LPC812" name="LPC812_linker" brief="Device LPC812_linker" version="1.0.0" full_name="Device LPC812_linker" devices="LPC812" user_visible="true" type="linker" package_base_path="core/devices/LPC812" project_base_path="LPC812">
      <source toolchain="armgcc" relative_path="gcc" type="linker">
        <files mask="LPC812_flash.ld"/>
        <files mask="LPC812_ram.ld"/>
      </source>
    </component>
    <component id="device.LPC812_startup.LPC812" name="LPC812_startup" brief="Device LPC812_startup" version="1.1.0" full_name="Device LPC812_startup" devices="LPC812" device_cores="core0_LPC812" category="Device/Startup" user_visible="true" type="startup" package_base_path="core/devices/LPC812" project_base_path="startup">
      <dependencies>
        <component_dependency value="device.LPC812_system.LPC812"/>
      </dependencies>
      <source toolchain="armgcc" relative_path="gcc" project_relative_path="./" type="asm_include">
        <files mask="startup_LPC812.S"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" project_relative_path="./" type="src_c">
        <files mask="startup_lpc812.c"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" project_relative_path="./" type="src_cpp">
        <files mask="startup_lpc812.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="device_LPC812_startup_LPC812.cmake" hidden="true"/>
      </source>
    </component>
    <component id="device.LPC812_system.LPC812" name="LPC812_system" brief="Device LPC812_system" version="1.0.0" full_name="Device LPC812_system" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="CMSIS_Include" package_base_path="core/devices/LPC812" project_base_path="device">
      <dependencies>
        <component_dependency value="device.LPC812_CMSIS.LPC812"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="system_LPC812.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="system_LPC812.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="device_LPC812_system_LPC812.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="docs.LPC812.LPC812" name="LPC812" brief="Docs lpc812" version="1.0.0" full_name="Docs lpc812" devices="LPC812" user_visible="true" type="documentation" package_base_path="core/docs" project_base_path="docs">
      <source relative_path="./" type="doc">
        <files mask="Getting Started with MCUXpresso SDK.pdf"/>
        <files mask="MCUXpresso SDK Release Notes for LPCXpresso812MAX.pdf"/>
      </source>
    </component>
    <component id="platform.drivers.clock.LPC812" name="clock" brief="Clock Driver" version="2.1.0" full_name="Clock Driver" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="driver" package_base_path="core/devices/LPC812/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC812"/>
          <component_dependency value="platform.drivers.power_no_lib.LPC812"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_clock.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_clock.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_clock_LPC812.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.common.LPC812" name="common" brief="COMMON Driver" version="2.2.9" full_name="COMMON Driver" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="driver" package_base_path="core/drivers/common" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.clock.LPC812"/>
          <component_dependency value="device.LPC812_CMSIS.LPC812"/>
          <component_dependency value="platform.drivers.reset.LPC812"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_common.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_common.c"/>
      </source>
      <source relative_path="./" type="src" device_cores="core0_LPC812">
        <files mask="fsl_common_arm.c"/>
      </source>
      <source relative_path="./" type="c_include" device_cores="core0_LPC812">
        <files mask="fsl_common_arm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_common_LPC812.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.iap.LPC812" name="iap" brief="IAP Driver" version="2.0.4" full_name="IAP Driver" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="driver" package_base_path="core/drivers/iap" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_iap.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_iap.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_iap_LPC812.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_acomp.LPC812" name="lpc_acomp" brief="LPC_ACOMP Driver" version="2.1.0" full_name="LPC_ACOMP Driver" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="driver" package_base_path="core/drivers/lpc_acomp" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_acomp.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_acomp.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpc_acomp_LPC812.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_crc.LPC812" name="lpc_crc" brief="CRC Driver" version="2.1.1" full_name="CRC Driver" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="driver" package_base_path="core/drivers/lpc_crc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_crc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_crc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpc_crc_LPC812.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_gpio.LPC812" name="gpio" brief="GPIO Driver" version="2.1.7" full_name="GPIO Driver" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="driver" package_base_path="core/drivers/lpc_gpio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_gpio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_gpio.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpc_gpio_LPC812.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_i2c.LPC812" name="i2c" brief="I2C Driver" version="2.1.0" full_name="I2C Driver" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="driver" package_base_path="core/drivers/lpc_i2c" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_i2c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_i2c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpc_i2c_LPC812.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_iocon_lite.LPC812" name="iocon" brief="IOCON Driver" version="2.0.0" full_name="IOCON Driver" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="driver" package_base_path="core/drivers/lpc_iocon_lite" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_iocon.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpc_iocon_lite_LPC812.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_minispi.LPC812" name="spi" brief="SPI Driver" version="2.0.4" full_name="SPI Driver" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="driver" package_base_path="core/drivers/lpc_minispi" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_spi.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_spi.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpc_minispi_LPC812.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_miniusart.LPC812" name="usart" brief="USART Driver" version="2.3.0" full_name="Usart Driver" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="driver" package_base_path="core/drivers/lpc_miniusart" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_usart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_usart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpc_miniusart_LPC812.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.mrt.LPC812" name="mrt" brief="MRT Driver" version="2.0.3" full_name="MRT Driver" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="driver" package_base_path="core/drivers/mrt" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_mrt.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_mrt.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_mrt_LPC812.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.pint.LPC812" name="pint" brief="PINT Driver" version="2.1.8" full_name="PINT Driver" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="driver" package_base_path="core/drivers/pint" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_pint.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_pint.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_pint_LPC812.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.power_no_lib.LPC812" name="power_no_lib" brief="Power Driver" version="2.0.0" full_name="power_no_lib" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="driver" package_base_path="core/devices/LPC812/drivers" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_power.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_power.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_power_no_lib_LPC812.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.reset.LPC812" name="reset" brief="Reset Driver" version="2.0.1" full_name="Reset Driver" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="driver" package_base_path="core/devices/LPC812/drivers" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_reset.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_reset.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_reset_LPC812.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sctimer.LPC812" name="sctimer" brief="SCT Driver" version="2.3.0" full_name="SCT Driver" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="driver" package_base_path="core/drivers/sctimer" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sctimer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sctimer.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_sctimer_LPC812.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.swm.LPC812" name="swm" brief="SWM Driver" version="2.0.2" full_name="SWM Driver" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="driver" package_base_path="core/drivers/swm" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC812"/>
          <component_dependency value="platform.drivers.swm_connections.LPC812"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_swm.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_swm.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_swm_LPC812.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.swm_connections.LPC812" name="swm_connections" brief="Swm_connections Driver" version="2.0.1" full_name="Swm_connections Driver" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="driver" package_base_path="core/devices/LPC812/drivers" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_swm_connections.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_swm_connections_LPC812.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.syscon.LPC812" name="syscon" brief="SYSCON Driver" version="2.0.1" full_name="SYSCON Driver" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="driver" package_base_path="core/drivers/syscon" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC812"/>
          <component_dependency value="platform.drivers.syscon_connections.LPC812"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_syscon.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_syscon.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_syscon_LPC812.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.syscon_connections.LPC812" name="syscon_connections" brief="Syscon_connections Driver" version="2.0.1" full_name="Syscon_connections Driver" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="driver" package_base_path="core/devices/LPC812/drivers" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_syscon_connections.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_syscon_connections_LPC812.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.wkt.LPC812" name="wkt" brief="WKT Driver" version="2.0.2" full_name="WKT Driver" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="driver" package_base_path="core/drivers/wkt" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wkt.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_wkt.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_wkt_LPC812.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.wwdt.LPC812" name="wwdt" brief="WWDT Driver" version="2.1.9" full_name="WWDT Driver" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="driver" package_base_path="core/drivers/wwdt" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC812"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wwdt.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_wwdt.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_wwdt_LPC812.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.baremetal.LPC812" name="baremetal" brief="Middleware baremetal" version="1.0.0" full_name="Baremetal" devices="LPC812" user_visible="true" type="OS" package_base_path="core/middleware" project_base_path="middleware">
      <defines>
        <define name="FSL_RTOS_BM" value=""/>
        <define name="SDK_OS_BAREMETAL" value=""/>
      </defines>
    </component>
    <component id="platform.utilities.misc_utilities.LPC812" name="misc_utilities" brief="Utilities which is needed for particular toolchain like the SBRK function required to address limitation between HEAP and STACK in GCC toolchain library." version="1.0.0" full_name="Utilities miscellaneous" devices="LPC812" user_visible="true" type="utilities" package_base_path="core/utilities/misc_utilities" project_base_path="utilities">
      <source toolchain="armgcc" relative_path="./" type="src">
        <files mask="fsl_sbrk.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utilities_misc_utilities_LPC812.cmake" hidden="true"/>
      </source>
    </component>
    <component id="platform.utilities.assert_lite.LPC812" name="assert_lite" brief="Utility assert_lite" version="1.0.0" full_name="Utility assert_lite" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="utilities" package_base_path="core/utilities/assert" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.miniusart_adapter.LPC812"/>
          <component_dependency value="utility.debug_console_lite.LPC812"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_assert.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_assert_lite_LPC812.cmake" hidden="true"/>
      </source>
    </component>
    <component id="utility.debug_console_lite.LPC812" name="debug_console_lite" brief="Utility debug_console_lite" version="1.0.0" full_name="Utility debug_console_lite" devices="LPC812" device_cores="core0_LPC812" user_visible="true" type="utilities" package_base_path="core/utilities/debug_console_lite" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.miniusart_adapter.LPC812"/>
          <component_dependency value="platform.drivers.common.LPC812"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_debug_console.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_debug_console_lite_LPC812.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
  </components>
</ksdk:manifest>
